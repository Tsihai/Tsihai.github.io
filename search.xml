<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Etcd</title>
      <link href="/2024/05/17/2024.05.17/"/>
      <url>/2024/05/17/2024.05.17/</url>
      
        <content type="html"><![CDATA[<h2 id="注册中心应该有什么核心能力？"><a href="#注册中心应该有什么核心能力？" class="headerlink" title="注册中心应该有什么核心能力？"></a>注册中心应该有什么核心能力？</h2><ol><li>服务注册：服务提供者上报服务信息到注册中心。</li><li>服务发现：服务消费者从注册中心获取服务提供者信息。</li><li>心跳检测：定期检查服务提供者存活状态，如果服务提供者挂了，则从注册中心删除服务提供者信息。</li><li>服务注销：手动剔除节点、或者自动剔除失效节点。</li><li>数据分布式存储：集中的服务注册信息数据存储、读取和共享。</li><li>更多的优点：比如注册中心本身的容错、服务消费者缓存等。<hr/></li></ol><h2 id="Etcd"><a href="#Etcd" class="headerlink" title="Etcd"></a>Etcd</h2><p>官方网站：<a href="https://github.com/etcd-io/etcd">https://github.com/etcd-io/etcd</a></p><hr/>### Etcd 介绍Etcd 是一个 Go 语言实现的、开源的、分布式的键值存储系统，他主要用于分布式系统中的服务发现、配置管理和分布式锁等场景。<p>当提到 Go 语言实现，我们就可以想得到，Etcd 的性能是非常高的，而且它和云原生有密切的关系，通常被作为云原生应用的配置中心、基础设施，存储一些元信息。</p><p>比如经典的容器管理平台 K8s 就是使用了Etcd 来存储集群配置信息、集群状态信息、节点信息等。</p><p>除了性能高外，Etcd 采用 Raft 一致性算法，确保了在分布式环境中的数据强一致性和可靠性，具有高可用性、强一致性、分布式特性等特点。</p><p>Etcd 非常简单易用，提供了简单的 Api、数据的过期机制、数据的监听和通知机制等，完美满足注册中心场景的需求。</p><p>Etcd 的入门极低，只需要学过 Redis、Zookeeper 或者对象存储中的一个，就能够很快的理解 Etcd 并且投入实战运用。</p><hr/><h3 id="Etcd-数据结构与特征"><a href="#Etcd-数据结构与特征" class="headerlink" title="Etcd 数据结构与特征"></a>Etcd 数据结构与特征</h3><p>Etcd 在其数据模型和组织结构上更接近于 ZooKeeper 和对象存储，而不是 Redis。</p><p>它使用层次化的键值对来存储数据，支持类似于文件系统路径的层次结构，能够很灵活地单 key 查询、按前缀查询、按范围查询。</p><p>如下图：<br><img src="/../img/etcd/etcd.png" alt="etcd.png"></p><hr/><h4 id="Etcd-的核心数据结构"><a href="#Etcd-的核心数据结构" class="headerlink" title="Etcd 的核心数据结构"></a>Etcd 的核心数据结构</h4><ol><li>Key：Etcd 中的基本数据单元，类似于文件系统中的文件名。每一个键都唯一标识一个值，并且可以包含子键，形成类似于路径的层次结构。</li><li>Value：与键关联的数据，可以是任何类型的数据，通常是字符串形式。</li></ol><p>只有 Key 和 Value,所以我们可以将数据序列化后写入到 Value 中。</p><hr/><h4 id="Etcd-的核心特征"><a href="#Etcd-的核心特征" class="headerlink" title="Etcd 的核心特征"></a>Etcd 的核心特征</h4><ol><li>Lease(租约)：用于对键值对进行 TTL 超时设置，也就是设置键值对的过期时间。当租约过期的时候，相关的键值对将被自动删除。</li><li>Watch(监听)：用于监听特定键的变化，每当键的值发生变化时，会触发相应的回调函数。</li></ol><p>有了这些特性，我们就可以能够实现注册中心的服务提供者节点的过期和监听。</p><hr/><h3 id="Etcd-如何保证数据一致性？"><a href="#Etcd-如何保证数据一致性？" class="headerlink" title="Etcd 如何保证数据一致性？"></a>Etcd 如何保证数据一致性？</h3><p>Etcd 的一大优势就是能够保证数据的强一致性。</p><ol><li>从表层来看，Etcd 支持事务操作，能够保证数据一致性。</li><li>从底层来看，Etcd 采用的是 Raft 算法来实现数据一致性。</li></ol><p>Raft 是一种分布式一致性算法，它确保了分布式系统中的所有节点在任何时间点都能达成一致的数据视图。</p><ul><li>具体来说， Raft算法是通过选举机制选举出一个领导者（Leader）节点，领导者负责接受客户端的写请求，并且将写请求操作复制到其他节点上。</li><li>当客户端发送写请求时，领导者首先将写操作写入自己的日志中，并且将写操作的日志条目分发到其他节点，其他节点通过复制日志条目来保持一致性。</li><li>一旦大多数节点（至少是超过半数的节点）都将该日志条目成功写入到自己的日志中，该日志条目则视为已提交，领导者则向客户端发送成功响应。</li><li>在领导者发送成功响应后，该写操作就被视为成功提交，从而保证了数据的一致性。</li><li>如果领导者节点挂了，其他节点会自动选举出新的领导者，保证数据的一致性。</li><li>新的领导者会继续接收客户端的写请求，并将写请求操作复制到其他节点上，从而保证数据的一致性。<hr/></li></ul><h4 id="Playground"><a href="#Playground" class="headerlink" title="Playground"></a>Playground</h4><p>我们可以使用官方提供的 Etcd Playground 来可视化操作 Etcd，便于学习。</p><p>官方网站：<a href="http://play.etcd.io/play">http://play.etcd.io/play</a></p><hr/><h3 id="Etcd-安装"><a href="#Etcd-安装" class="headerlink" title="Etcd 安装"></a>Etcd 安装</h3><p>Etcd Github下载页：<a href="https://github.com/etcd-io/etcd/releases">https://github.com/etcd-io/etcd/releases</a></p><p>Etcd 官方下载：<a href="https://etcd.io/docs/v3.2/install/">https://etcd.io/docs/v3.2/install/</a></p><p>找到自己操作系统的版本执行即可，安装完成后，会得到 3 个脚本：</p><ul><li>etcd: etcd 服务端</li><li>etcdctl: etcd 客户端，用于操作 etcd 服务端，比如读写数据等。</li><li>etcdutl: etcd 备份恢复工具</li></ul><p>执行完 etcd 脚本后，就可以启动 etcd 服务，服务会默认监听 2379 和 2380 两个端口，作用分别如下：</p><ul><li>2379：提供 HTTP API 服务，和 etcdctl 通信。</li><li>2380：急群中节点之间的通信。<hr/></li></ul><h3 id="Etcd-可视化工具"><a href="#Etcd-可视化工具" class="headerlink" title="Etcd 可视化工具"></a>Etcd 可视化工具</h3><p>一般情况下，我们使用数据存储中间件时，一定要有一个可视化工具，能够更直观清晰地管理已经存储的数据。</p><p>比如 Redis 的 Redis Desktop Manager。</p><p>同样的，Etcd 也有一些可视化工具，比如：</p><ul><li>etcdkeeper：️<a href="https://github.com/evildecay/etcdkeeper/">https://github.com/evildecay/etcdkeeper/</a></li><li>kstone：<a href="https://github.com/kstone-io/kstone/tree/master/charts">https://github.com/kstone-io/kstone/tree/master/charts</a></li></ul><p><strong>推荐 etcdkeeper，安装成本更低，学习使用更方便。</strong></p><p>进入项目的 GitHub，就能看到安装方式，直接按照指引下载、解压、运行脚本即可：<br><img src="/../img/etcd/etcd-1.png" alt="etcd-1.png"></p><p>安装后，执行命令，可以在指定端口启动可视化界面（默认是 8080 端口），比如在 8081 端口启动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./etcdkeeper -port <span class="number">8081</span></span><br></pre></td></tr></table></figure><p>安装后，访问本地 <a href="http://127.0.0.1:8081/etcdkeeper/">http://127.0.0.1:8081/etcdkeeper/</a> ，就能看到可视化页面了</p><hr/><h3 id="Etcd-Java-客户端"><a href="#Etcd-Java-客户端" class="headerlink" title="Etcd Java 客户端"></a>Etcd Java 客户端</h3><p>客户端，就是操作 Etcd 的工具。</p><p>etcd 主流的 Java 客户端是 jetcd：<a href="https://github.com/etcd-io/jetcd">https://github.com/etcd-io/jetcd</a></p><p><strong>注意，Java 版本必须要大于 11</strong></p><p>用法非常简单，就像 curator 能够操作 ZooKeeper、jedis 能够操作 Redis 一样。</p><hr/><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/io.etcd/jetcd-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.etcd<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetcd-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><hr/><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EtcdRegistry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        <span class="comment">// create client using endpoints</span></span><br><span class="line">        <span class="type">Client</span> <span class="variable">client</span> <span class="operator">=</span> Client.builder().endpoints(<span class="string">&quot;http://localhost:2379&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="type">KV</span> <span class="variable">kvClient</span> <span class="operator">=</span> client.getKVClient();</span><br><span class="line">        <span class="type">ByteSequence</span> <span class="variable">key</span> <span class="operator">=</span> ByteSequence.from(<span class="string">&quot;test_key&quot;</span>.getBytes());</span><br><span class="line">        <span class="type">ByteSequence</span> <span class="variable">value</span> <span class="operator">=</span> ByteSequence.from(<span class="string">&quot;test_value&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// put the key-value</span></span><br><span class="line">        kvClient.put(key, value).get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get the CompletableFuture</span></span><br><span class="line">        CompletableFuture&lt;GetResponse&gt; getFuture = kvClient.get(key);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get the value from CompletableFuture</span></span><br><span class="line">        <span class="type">GetResponse</span> <span class="variable">response</span> <span class="operator">=</span> getFuture.get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// delete the key</span></span><br><span class="line">        kvClient.delete(key).get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，我们使用 KVClient 来操作 etcd 写入和读取数据。</p><p>除了 KVClient 客户端外，Etcd 还提供了很多其他客户端。</p><p><img src="/../img/etcd/etcd-3.png" alt="etcd-3.png"></p><hr/><h4 id="常用的客户端和作用如下："><a href="#常用的客户端和作用如下：" class="headerlink" title="常用的客户端和作用如下："></a>常用的客户端和作用如下：</h4><ol><li>kvClient：用于对 etcd 中的键值对进行操作。通过 kvClient 可以进行设置值、获取值、删除值、列出目录等操作。 </li><li>leaseClient：用于管理 etcd 的租约机制。租约是 etcd 中的一种时间片，用于为键值对分配生存时间，并在租约到期时自动删除相关的键值对。通过 leaseClient 可以创建、获取、续约和撤销租约。 </li><li>watchClient：用于监视 etcd 中键的变化，并在键的值发生变化时接收通知。 </li><li>clusterClient：用于与 etcd 集群进行交互，包括添加、移除、列出成员、设置选举、获取集群的健康状态、获取成员列表信息等操作。 </li><li>authClient：用于管理 etcd 的身份验证和授权。通过 authClient 可以添加、删除、列出用户、角色等身份信息，以及授予或撤销用户或角色的权限。 </li><li>maintenanceClient：用于执行 etcd 的维护操作，如健康检查、数据库备份、成员维护、数据库快照、数据库压缩等。 </li><li>lockClient：用于实现分布式锁功能，通过 lockClient 可以在 etcd 上创建、获取、释放锁，能够轻松实现并发控制。 </li><li>electionClient：用于实现分布式选举功能，可以在 etcd 上创建选举、提交选票、监视选举结果等。</li></ol><p>绝大多数情况下，用前 3 个客户端就足够了，其余的仅做了解。</p><hr/><h4 id="Debug-代码"><a href="#Debug-代码" class="headerlink" title="Debug 代码"></a>Debug 代码</h4><p>使用 Debug 执行上述代码，观察 Etcd 的数据结构，如图：<br><img src="/../img/etcd/etcd-4.png" alt="etcd-4.png"></p><p>发现除了 key 和 value 外，还有 revision、create_revision 和 mod_revision，它们分别代表键的版本号、创建时间戳和修改时间戳。</p><p>这是因为 etcd 中的每一个键都有一个与之关联的版本号，用于跟踪键的修改历史，每当一个键的值发生变化时，它的版本号都会增加。</p><p>通过使用 etcd 的 Watch API，我们可以实时监听键的变化，并在键的值发生变化时接收通知。</p><p>这种版本号的机制，使得 etcd 可以实现在分布式系统中高效的实现乐观并发控制、一致性和可靠性的数据访问。</p><hr/><h2 id="存储结构设计"><a href="#存储结构设计" class="headerlink" title="存储结构设计"></a>存储结构设计</h2><p>了解了 Etcd 的基本使用后，还需要设计服务注册信息如何存储在注册中心内。</p><p><strong>存储结构设计的几个要点：</strong></p><ol><li>key 如何设计？</li><li>value 如何设计？</li><li>key 什么时候过期？</li></ol><hr/><p>由于一个服务可能有多个服务提供者（负载均衡），我们可以有两种结构设计：</p><h3 id="层级结构"><a href="#层级结构" class="headerlink" title="层级结构"></a>层级结构</h3><p>将服务理解为文件夹，将服务对应的多个节点理解为文件夹下的子文件。</p><p>那么就可以通过服务名称，使用前缀查询的方法，获取到该服务的所有节点。</p><p>键名的规则可以是：&#x2F;业务前缀&#x2F;服务名&#x2F;服务节点地址</p><pre>服务A: key = /service服务A节点1: key = /service/node1服务A节点2: key = /service/node2服务A节点3: key = /service/node3</pre><hr/><h3 id="列表结构"><a href="#列表结构" class="headerlink" title="列表结构"></a>列表结构</h3><p>将服务理解为列表，将服务对应的多个节点理解为列表中的元素。</p><pre>服务A: key = service服务A节点1: key = node1服务A节点2: key = node2服务A节点3: key = node3</pre><hr/><p>选择哪种存储结构呢？这个也会跟我们的技术选型有关。</p><p>对于 ZooKeeper 和 Etcd 这种支持层级查询的中间件，用第一种结构会更清晰。</p><p>对于 Redis，由于本身就支持列表数据结构，可以选择第二种结构。</p><p>最后，必须要给 key 设置过期时间，比如默认 30秒过期时间，这样如果服务提供者宕机了，也可以超时后自动移除。</p><hr/><h2 id="Etcd-开发实现"><a href="#Etcd-开发实现" class="headerlink" title="Etcd 开发实现"></a>Etcd 开发实现</h2><h3 id="注册中心开发"><a href="#注册中心开发" class="headerlink" title="注册中心开发"></a>注册中心开发</h3><h4 id="注册信息定义"><a href="#注册信息定义" class="headerlink" title="注册信息定义"></a>注册信息定义</h4><p>在 model 包下定义服务注册信息类 <code>ServiceMetaInfo</code>，用于封装服务的注册信息，包括服务名称、服务版本号、服务地址（域名和端口号）、服务分组等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务元信息（注册信息）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceMetaInfo</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String serviceName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务版本号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">serviceVersion</span> <span class="operator">=</span> <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务域名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String serviceHost;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务端口号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer servicePort;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务分组（暂未实现）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">serviceGroup</span> <span class="operator">=</span> <span class="string">&quot;default&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外还需要给<code>ServiceMetaInfo</code>类增加一些工具方法，用于获取服务注册信息的键名、获取服务注册节点的键名等。</p><p>可以把版本号和分组都放到服务键名中，就可以在查询时根据这些参数获取对应的版本和分组的服务。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取服务键名</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getServiceKey</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 后续可扩展服务分组</span></span><br><span class="line">    <span class="comment">// return String.format(&quot;%s:%s:%s&quot;, serviceName, serviceVersion, serviceGroup);</span></span><br><span class="line">    <span class="keyword">return</span> String.format(<span class="string">&quot;%s:%s&quot;</span>, serviceName, serviceVersion);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取服务注册节点键名</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getServiceNodeKey</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> String.format(<span class="string">&quot;%s/%s:%s&quot;</span>, getServiceKey(), serviceHost, servicePort);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于注册信息中包含了服务版本号字段，所以我们也可以给 RpcRequest 对象补充服务版本号字段，可以先作为预留字段，后续再实现。</p><p>在 <code>RpcConstant</code> 常量类中补充默认服务版本号常量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RPC 相关常量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RpcConstant</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认配置文件加载前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">DEFAULT_CONFIG_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;rpc&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认服务版本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">DEFAULT_SERVICE_VERSION</span> <span class="operator">=</span> <span class="string">&quot;1.0&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>RpcRequest</code> 请求类中使用该常量，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RPC 请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcRequest</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String serviceName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String methodName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务版本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">serviceVersion</span> <span class="operator">=</span> RpcConstant.DEFAULT_SERVICE_VERSION;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数类型列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Class&lt;?&gt;[] parameterTypes;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参数列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object[] args;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h4 id="注册中心配置"><a href="#注册中心配置" class="headerlink" title="注册中心配置"></a>注册中心配置</h4><p>在 config 包下编写注册中心配置类 <code>RegistryConfig</code>，让用户配置连接注册中心所需的信息，比如注册中心类别、注册中心地址、用户名、密码、连接超时时间等。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RPC 框架注册中心配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegistryConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册中心类别</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">registry</span> <span class="operator">=</span> <span class="string">&quot;etcd&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册中心地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:2380&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 超时时间（单位毫秒）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Long</span> <span class="variable">timeout</span> <span class="operator">=</span> <span class="number">10000L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还要为 <code>RpcConfig</code> 全局配置补充注册中心配置，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RpcConfig</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册中心配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">RegistryConfig</span> <span class="variable">registryConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RegistryConfig</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h4 id="注册中心接口"><a href="#注册中心接口" class="headerlink" title="注册中心接口"></a>注册中心接口</h4><p>遵循可拓展的设计原则，所以先写一个注册中心接口，后续可以实现多种不同的注册中心，并且和序列化器一样，可以使用 SPI 机制来动态加载。</p><p>注册中心接口主要提供了初始化、注册服务、注销服务、服务发现（获取服务节点列表）、服务销毁等方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册中心接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Registry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registryConfig</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(RegistryConfig registryConfig)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册服务（服务端）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serviceMetaInfo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(ServiceMetaInfo serviceMetaInfo)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注销服务（服务端）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serviceMetaInfo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">unRegister</span><span class="params">(ServiceMetaInfo serviceMetaInfo)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务发现（获取某服务的所有节点，消费端）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serviceKey 服务键名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;ServiceMetaInfo&gt; <span class="title function_">serviceDiscovery</span><span class="params">(String serviceKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 服务销毁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h4 id="Etcd-注册中心实现"><a href="#Etcd-注册中心实现" class="headerlink" title="Etcd 注册中心实现"></a>Etcd 注册中心实现</h4><h5 id="注册中心初始化"><a href="#注册中心初始化" class="headerlink" title="注册中心初始化"></a>注册中心初始化</h5><p>在 registry 目录下新建 Etcd 注册中心类 <code>EtcdRegistry</code>，实现注册中心接口，先完成初始化，读取注册中心配置并初始化客户端对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Etcd 注册中心类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EtcdRegistry</span> <span class="keyword">implements</span> <span class="title class_">Registry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Client client;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> KV kvClient;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根节点，定义 Etcd 键存储的根路径为 /rpc/，为了区分不同的项目。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ETCD_ROOT_PATH</span> <span class="operator">=</span> <span class="string">&quot;/rpc/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(RegistryConfig registryConfig)</span> &#123;</span><br><span class="line">        client = Client.builder().endpoints(registryConfig.getAddress()).connectTimeout(Duration.ofMillis(registryConfig.getTimeout())).build();</span><br><span class="line">        kvClient = client.getKVClient();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h5 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h5><p>创建 key 并设置过期时间，value 为服务注册信息的 JSON 序列化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务注册</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(ServiceMetaInfo serviceMetaInfo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">// 创建 Lease 和 KV 客户端</span></span><br><span class="line">    <span class="type">Lease</span> <span class="variable">leaseClient</span> <span class="operator">=</span> client.getLeaseClient();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建一个 30 秒的 Lease</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">leaseId</span> <span class="operator">=</span> leaseClient.grant(<span class="number">30</span>).get().getID();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置要存储的键值对</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">registerKey</span> <span class="operator">=</span> ETCD_ROOT_PATH + serviceMetaInfo.getServiceNodeKey();</span><br><span class="line">    <span class="type">ByteSequence</span> <span class="variable">key</span> <span class="operator">=</span> ByteSequence.from(registerKey, StandardCharsets.UTF_8);</span><br><span class="line">    <span class="type">ByteSequence</span> <span class="variable">value</span> <span class="operator">=</span> ByteSequence.from(JSONUtil.toJsonStr(serviceMetaInfo), StandardCharsets.UTF_8);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将键值对与租约关联起来，并设置过期时间</span></span><br><span class="line">    <span class="type">PutOption</span> <span class="variable">putOption</span> <span class="operator">=</span> PutOption.builder().withLeaseId(leaseId).build();</span><br><span class="line">    kvClient.put(key, value, putOption).get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h5 id="服务注销"><a href="#服务注销" class="headerlink" title="服务注销"></a>服务注销</h5><p>删除 key，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务注销</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unRegister</span><span class="params">(ServiceMetaInfo serviceMetaInfo)</span> &#123;</span><br><span class="line">    kvClient.delete(ByteSequence.from(ETCD_ROOT_PATH + serviceMetaInfo.getServiceNodeKey(), StandardCharsets.UTF_8));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h5 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h5><p>服务发现根据服务名称作为前缀，从 Etcd 获取服务下的节点列表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务发现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;ServiceMetaInfo&gt; <span class="title function_">serviceDiscovery</span><span class="params">(String serviceKey)</span> &#123;</span><br><span class="line">    <span class="comment">// 前缀搜索，结尾一定要加 &#x27;/&#x27;</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">searchPrefix</span> <span class="operator">=</span> ETCD_ROOT_PATH + serviceKey + <span class="string">&quot;/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 前缀查询</span></span><br><span class="line">        <span class="type">GetOption</span> <span class="variable">getOption</span> <span class="operator">=</span> GetOption.builder().isPrefix(<span class="literal">true</span>).build();</span><br><span class="line">        List&lt;KeyValue&gt; keyValues = kvClient.get(</span><br><span class="line">                        ByteSequence.from(searchPrefix, StandardCharsets.UTF_8),</span><br><span class="line">                        getOption)</span><br><span class="line">                .get()</span><br><span class="line">                .getKvs();</span><br><span class="line">        <span class="comment">// 解析服务信息</span></span><br><span class="line">        <span class="keyword">return</span> keyValues.stream()</span><br><span class="line">                .map(keyValue -&gt; &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> keyValue.getValue().toString(StandardCharsets.UTF_8);</span><br><span class="line">                    <span class="keyword">return</span> JSONUtil.toBean(value, ServiceMetaInfo.class);</span><br><span class="line">                &#125;)</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;获取服务列表失败&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h5 id="服务销毁"><a href="#服务销毁" class="headerlink" title="服务销毁"></a>服务销毁</h5><p>服务销毁时，需要关闭 Etcd 客户端连接，用于关闭后释放资源，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务销毁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;当前节点下线&quot;</span>);</span><br><span class="line">    <span class="comment">// 释放资源</span></span><br><span class="line">    <span class="keyword">if</span> (kvClient != <span class="literal">null</span>) &#123;</span><br><span class="line">        kvClient.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (client != <span class="literal">null</span>) &#123;</span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h3 id="支持配置和拓展注册中心"><a href="#支持配置和拓展注册中心" class="headerlink" title="支持配置和拓展注册中心"></a>支持配置和拓展注册中心</h3><p>让开发者能够填写配置来指定使用的注册中心，并且支持自定义注册中心，让框架更易用、更利于扩展。</p><p>我们可以使用工厂来创建注册中心对象、并且使用 SPI 机制来动态加载自定义的注册中心。</p><hr/><h4 id="注册中心常量"><a href="#注册中心常量" class="headerlink" title="注册中心常量"></a>注册中心常量</h4><p>在 registry 目录下新建一个类 <code>RegistryKeys</code>，用于列举所有支持的注册中心键名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册中心键名常量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RegistryKeys</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">ETCD</span> <span class="operator">=</span> <span class="string">&quot;etcd&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">ZOOKEEPER</span> <span class="operator">=</span> <span class="string">&quot;zookeeper&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h4 id="注册中心工厂"><a href="#注册中心工厂" class="headerlink" title="注册中心工厂"></a>注册中心工厂</h4><p>使用工厂模式，支持根据 key 从 SPI 获取注册中心对象实例。</p><p>在 registry 目录下新建一个类 <code>RegistryFactory</code>，实现工厂模式，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注册中心工厂（用于获取注册中心对象）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RegistryFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        SpiLoader.load(Registry.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认注册中心</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Registry</span> <span class="variable">DEFAULT_REGISTRY</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">EtcdRegistry</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取实例</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Registry <span class="title function_">getInstance</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SpiLoader.getInstance(Registry.class, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h4 id="注册中心接口-SPI-配置文件"><a href="#注册中心接口-SPI-配置文件" class="headerlink" title="注册中心接口 SPI 配置文件"></a>注册中心接口 SPI 配置文件</h4><p>在 META-INF&#x2F;rpc&#x2F;system 目录下新建一个文件 <code>com.sihai.rpc.registry.Registry</code>，内容如下：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">etcd</span>=<span class="string">com.sihai.rpc.registry.EtcdRegistry</span></span><br></pre></td></tr></table></figure><hr/><h4 id="注册中心初始化-1"><a href="#注册中心初始化-1" class="headerlink" title="注册中心初始化"></a>注册中心初始化</h4><p>由于服务提供者和服务消费者都需要和注册中心建立连接，是一个 RPC 框架启动必不可少的环节，所以可以将初始化流程放在 RpcApplication 类中。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 框架初始化，支持传入自定义配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> newRpcConfig</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(RpcConfig newRpcConfig)</span> &#123;</span><br><span class="line">    rpcConfig = newRpcConfig;</span><br><span class="line">    log.info(<span class="string">&quot;rpc init, config = &#123;&#125;&quot;</span>, newRpcConfig.toString());</span><br><span class="line">    <span class="comment">// 注册中心初始化</span></span><br><span class="line">    <span class="type">RegistryConfig</span> <span class="variable">registryConfig</span> <span class="operator">=</span> rpcConfig.getRegistryConfig();</span><br><span class="line">    <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> RegistryFactory.getInstance(registryConfig.getRegistry());</span><br><span class="line">    registry.init(registryConfig);</span><br><span class="line">    log.info(<span class="string">&quot;registry init, config = &#123;&#125;&quot;</span>, registryConfig);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> RPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SPI</title>
      <link href="/2024/04/19/2024.04.19/"/>
      <url>/2024/04/19/2024.04.19/</url>
      
        <content type="html"><![CDATA[<p>SPI（Service Provider Interface）服务提供接口是Java提供的一种用于服务发现和扩展的标准机制，主要用于实现模块化开发和插件化扩展。</p><p>SPI 机制允许服务提供者通过特定的配置文件将自己的实现注册到系统中，<br>然后系统通过反射机制动态加载这些实现，而不需要修改原始框架的代码，从而实现了系统的解耦、提高了可扩展性。</p><p>这样的设计极大地增强了软件系统的可扩展性和灵活性。</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>一个典型的 SPI 应用场景是 JDBC（Java 数据库连接库），不同的数据库驱动程序开发者可以使用 JDBC 库，然后定制自己的数据库驱动程序。</p><h3 id="框架扩展"><a href="#框架扩展" class="headerlink" title="框架扩展"></a>框架扩展</h3><p>许多Java框架利用SPI机制来支持可插拔的组件和服务，例如JDBC驱动加载、Dubbo的扩展点加载、Spring Boot的自动配置等。</p><p>我们使用的主流 Java 开发框架中，几乎都使用到了 SPI 机制，比如 Servlet 容器、日志框架、ORM 框架、Spring 框架。</p><p><strong>所以这是 Java 开发者必须掌握的一个重要特性！</strong></p><hr/><h2 id="SPI-实现"><a href="#SPI-实现" class="headerlink" title="SPI 实现"></a>SPI 实现</h2><h3 id="系统配置文件实现"><a href="#系统配置文件实现" class="headerlink" title="系统配置文件实现"></a>系统配置文件实现</h3><p>Java 内已经提供了 SPI 机制相关的 API 接口，可以直接使用，这种方式最简单。</p><ol><li>首先创建一个 META-INF&#x2F;services 目录，然后在其中创建一个配置文件，文件名就是要实现的接口的空文件。</li><li>在配置文件中写入自己定制的接口实现类的完整类路径。<pre>com.sihai.rpc.serializer.JdkSerializer</pre></li><li>直接使用系统内置的 ServiceLoader 动态加载指定接口的实现类，代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定序列化器</span></span><br><span class="line"><span class="type">Serializer</span> <span class="variable">serializer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">ServiceLoader&lt;Serializer&gt; serviceLoader = ServiceLoader.load(Serializer.class);</span><br><span class="line"><span class="keyword">for</span> (Serializer service : serviceLoader) &#123;</span><br><span class="line">    serializer = service;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>上述代码能够获取到所有文件中编写的实现类对象，选择一个使用即可。<hr/></li></ol><h3 id="自定义配置文件实现"><a href="#自定义配置文件实现" class="headerlink" title="自定义配置文件实现"></a>自定义配置文件实现</h3><p>系统实现 SPI 虽然简单，但是如果我们想定制多个不同的接口实现类，就没办法在框架中指定使用哪一个了，也就无法实现我们 “通过配置快速指定序列化器” 的需求。</p><p>所以我们需要自己定义 SPI 机制的实现，只要能够根据配置加载到类即可。</p><p>比如读取如下配置文件，能够得到一个 序列化器名称 &#x3D;&gt; 序列化器实现类对象 的映射，就可以根据用户配置的序列化器名称动态加载指定实现类对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdk=com.sihai.rpc.serializer.JdkSerializer</span><br><span class="line">hessian=com.sihai.rpc.serializer.HessianSerializer</span><br><span class="line">json=com.sihai.rpc.serializer.JsonSerializer</span><br><span class="line">kryo=com.sihai.rpc.serializer.KryoSerializer</span><br></pre></td></tr></table></figure><hr/><h3 id="自定义序列化器"><a href="#自定义序列化器" class="headerlink" title="自定义序列化器"></a>自定义序列化器</h3><p>使用自定义的 SPI 机制实现，支持用户自定义序列化器并指定键名。</p><h4 id="指定-SPI-配置目录。"><a href="#指定-SPI-配置目录。" class="headerlink" title="指定 SPI 配置目录。"></a>指定 SPI 配置目录。</h4><p>系统内置的 SPI 机制默认是读取 META-INF&#x2F;services 目录下的配置文件，我们可以自定义序列化器的路径，改为读取 META-INF&#x2F;rpc 目录。</p><p>还可以将 SPI 配置再分为系统内置 SPI 和 用户自定义 SPI，这样用户可以自定义自己的 SPI 配置，系统内置 SPI 配置可以由系统管理员统一配置。</p><ul><li>用户自定义 SPI ：META-INF&#x2F;rpc&#x2F;custom 目录，用户可以在该目录下新建配置，加载自定义的实现类。</li><li>系统内置 SPI ：META-INF&#x2F;rpc&#x2F;system 目录，RPC 框架自带的视线类，例如之前开发的 JdkSerializer。</li></ul><p>这样，所有接口的实现类都可以通过 SPI 机制动态加载，不需要在代码中硬编码 Map 来维护实现类。</p><p>之后，我们如果要实现自定义的序列化器，只需要进行以下步骤：</p><ul><li>写一个类实现 Serializer 接口</li><li>在 custom 目录下编写 SPI 配置文件，加载自己写的实现类</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> RPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列化</title>
      <link href="/2024/04/18/2024.04.18/"/>
      <url>/2024/04/18/2024.04.18/</url>
      
        <content type="html"><![CDATA[<h2 id="序列化器"><a href="#序列化器" class="headerlink" title="序列化器"></a>序列化器</h2><p>在编写处理请求的逻辑前，我们要先实现序列化器。因为无论是请求或响应，都会涉及参数的传输。</p><p>而 Java 对象是存活在 JVM 虚拟机中的，如果想在其他位置存储并访问、或者在网络中进行传输，就需要进行序列化和反序列化。</p><hr/><h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><ul><li>序列化：将 Java 对象转换为字节序列的过程。</li><li>反序列化：将字节序列转换为 Java 对象的过程。</li></ul><hr/><h3 id="序列化方式"><a href="#序列化方式" class="headerlink" title="序列化方式"></a>序列化方式</h3><ul><li>Java 序列化：Java 提供的序列化方式，将 Java 对象转换为字节序列，然后通过网络传输。</li><li>JSON 序列化：将 Java 对象转换为 JSON 字符串，然后通过网络传输。</li><li>XML 序列化：将 Java 对象转换为 XML 字符串，然后通过网络传输。</li><li>Protobuf 序列化：将 Java 对象转换为 Protobuf 字节序列，然后通过网络传输。</li><li>Hessian 序列化：将 Java 对象转换为 Hessian 字节序列，然后通过网络传输。</li><li>Kryo 序列化：将 Java 对象转换为 Kryo 字节序列，然后通过网络传输。</li></ul><hr/><h2 id="序列化的作用"><a href="#序列化的作用" class="headerlink" title="序列化的作用"></a>序列化的作用</h2><p>无论是请求或响应，都会涉及参数的传输。</p><p>而 Java 对象是存活在 JVM 虚拟机中的，如果想在其他位置存储并访问、或者在网络中进行传输，就需要进行序列化和反序列化。</p><hr/><h2 id="序列化器实现方式"><a href="#序列化器实现方式" class="headerlink" title="序列化器实现方式"></a>序列化器实现方式</h2><p>我们所追求的 “更好的” 序列化器，可以是具有更高的性能、或者更小的序列化结果，这样就能够更快地完成 RPC 的请求和响应。</p><p>我们实现了 Java 原生序列化实现序列化器，但这未必是最好的。</p><p>市面上还有很多种主流的序列化方式，比如 JSON、Hessian、Kryo、protobuf 等。</p><hr/><h3 id="主流序列化方式优缺点对比"><a href="#主流序列化方式优缺点对比" class="headerlink" title="主流序列化方式优缺点对比"></a>主流序列化方式优缺点对比</h3><h4 id="JSON："><a href="#JSON：" class="headerlink" title="JSON："></a>JSON：</h4><p>优点：</p><ul><li>易读性好，可读性强，便于人类理解和调试。 </li><li>跨语言支持广泛，几乎所有编程语言都有 JSON 的解析和生成库。</li></ul><p>缺点：</p><ul><li>占用空间大，JSON 字符串通常比二进制序列化的数据量大很多，因为JSON 是文本格式存储数据，需要额外的字符表示键、值和数据结构。</li><li>不可以很好的处理复杂的数据结构和循环引用，可能会导致性能降低和序列化失败。</li></ul><h4 id="Hessian："><a href="#Hessian：" class="headerlink" title="Hessian："></a>Hessian：</h4><p>官方网站：<a href="https://hessian.caucho.com/">https://hessian.caucho.com/</a></p><p>优点：</p><ul><li>占用空间小，序列化后的数据量比较小，因为 Protobuf 是一种二进制序列化格式，可以节省空间，减少网络传输时间。</li><li>兼容性高，支持跨语言，适用于分布式系统中的RPC 调用。</li></ul><p>缺点：</p><ul><li>Hessian 的序列化速度比 JSON 慢，因为需要将对象转换为二进制格式。</li><li>对象必须要实现Serializable 接口，限制了可序列化的对象范围。</li></ul><h4 id="Kryo："><a href="#Kryo：" class="headerlink" title="Kryo："></a>Kryo：</h4><p>官方网站：<a href="https://github.com/EsotericSoftware/kryo">https://github.com/EsotericSoftware/kryo</a></p><p>优点：</p><ul><li>高性能：Kryo 是一个高性能的序列化框架，序列化和反序列化速度非常快，适用于高吞吐量场景。</li><li>支持循环引用，可以处理复杂的数据结构，如树形结构、循环引用等。</li><li>可定制：允许自定义序列化器，适用于复杂的对象结构。</li><li>无需实现 Serializable 接口，可以序列化任意对象。</li></ul><p>缺点：</p><ul><li>兼容性问题：不支持跨语言，只适用于 Java。</li><li>对象的序列化格式不够友好，不易于读懂和调试。</li></ul><h4 id="Protobuf："><a href="#Protobuf：" class="headerlink" title="Protobuf："></a>Protobuf：</h4><p>优点：</p><ul><li>高效的二进制序列化，序列化后的数据量极小，占用空间小。</li><li>支持跨语言，并且提供了多种语言的实现库。</li><li>支持版本化，解决了向前&#x2F;向后兼容的问题。</li></ul><p>缺点：</p><ul><li>配置相对复杂，需要先定义数据结构的消息格式。</li><li>对象的序列化格式不易读懂，不便于调试。</li></ul><hr/><h2 id="序列化器实现"><a href="#序列化器实现" class="headerlink" title="序列化器实现"></a>序列化器实现</h2><h3 id="序列化接口"><a href="#序列化接口" class="headerlink" title="序列化接口"></a>序列化接口</h3><p>首先我们提供一个序列化接口 Serializer，它包含两个方法，方便后续扩展更多的序列化器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 序列化器接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Serializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; <span class="type">byte</span>[] serialize(T object) <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes, Class&lt;T&gt; type)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h3 id="Java-原生序列化实现"><a href="#Java-原生序列化实现" class="headerlink" title="Java 原生序列化实现"></a>Java 原生序列化实现</h3><p>基于Java自带的序列化方式来实现序列化器 JdkSerializer：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JDK 序列化器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdkSerializer</span> <span class="keyword">implements</span> <span class="title class_">Serializer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="type">byte</span>[] serialize(T object) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(outputStream);</span><br><span class="line">        objectOutputStream.writeObject(object);</span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        <span class="keyword">return</span> outputStream.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bytes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes, Class&lt;T&gt; type)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(inputStream);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (T) objectInputStream.readObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            objectInputStream.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h3 id="JSON-序列化实现"><a href="#JSON-序列化实现" class="headerlink" title="JSON 序列化实现"></a>JSON 序列化实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Json 序列化器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonSerializer</span> <span class="keyword">implements</span> <span class="title class_">Serializer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">OBJECT_MAPPER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="type">byte</span>[] serialize(T obj) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> OBJECT_MAPPER.writeValueAsBytes(obj);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes, Class&lt;T&gt; classType)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">T</span> <span class="variable">obj</span> <span class="operator">=</span> OBJECT_MAPPER.readValue(bytes, classType);</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> RpcRequest) &#123;</span><br><span class="line">            <span class="keyword">return</span> handleRequest((RpcRequest) obj, classType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> RpcResponse) &#123;</span><br><span class="line">            <span class="keyword">return</span> handleResponse((RpcResponse) obj, classType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由于 Object 的原始对象会被擦除，导致反序列化时会被作为 LinkedHashMap 无法转换成原始对象，因此这里做了特殊处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rpcRequest rpc 请求</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type       类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> T&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException IO异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; T <span class="title function_">handleRequest</span><span class="params">(RpcRequest rpcRequest, Class&lt;T&gt; type)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        Class&lt;?&gt;[] parameterTypes = rpcRequest.getParameterTypes();</span><br><span class="line">        Object[] args = rpcRequest.getArgs();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环处理每个参数的类型</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; parameterTypes.length; i++) &#123;</span><br><span class="line">            Class&lt;?&gt; clazz = parameterTypes[i];</span><br><span class="line">            <span class="comment">// 如果类型不同，则重新处理一下类型</span></span><br><span class="line">            <span class="keyword">if</span> (!clazz.isAssignableFrom(args[i].getClass())) &#123;</span><br><span class="line">                <span class="type">byte</span>[] argBytes = OBJECT_MAPPER.writeValueAsBytes(args[i]);</span><br><span class="line">                args[i] = OBJECT_MAPPER.readValue(argBytes, clazz);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> type.cast(rpcRequest);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由于 Object 的原始对象会被擦除，导致反序列化时会被作为 LinkedHashMap 无法转换成原始对象，因此这里做了特殊处理</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rpcResponse rpc 响应</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type        类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> T&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException IO异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; T <span class="title function_">handleResponse</span><span class="params">(RpcResponse rpcResponse, Class&lt;T&gt; type)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 处理响应数据</span></span><br><span class="line">        <span class="type">byte</span>[] dataBytes = OBJECT_MAPPER.writeValueAsBytes(rpcResponse.getData());</span><br><span class="line">        rpcResponse.setData(OBJECT_MAPPER.readValue(dataBytes, rpcResponse.getDataType()));</span><br><span class="line">        <span class="keyword">return</span> type.cast(rpcResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h3 id="Kryo-序列化实现"><a href="#Kryo-序列化实现" class="headerlink" title="Kryo 序列化实现"></a>Kryo 序列化实现</h3><p>依赖库：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.esotericsoftware/kryo --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.esotericsoftware<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kryo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于 Kryo 本身是线程不安全的，所以需要使用 ThreadLocal 来保证每个线程都有一个单独的 Kryo 对象实例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Kryo 序列化器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KryoSerializer</span> <span class="keyword">implements</span> <span class="title class_">Serializer</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * kryo 线程不安全，使用 ThreadLocal 保证每个线程只有一个 Kryo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Kryo&gt; KRYO_THREAD_LOCAL = ThreadLocal.withInitial(() -&gt; &#123;</span><br><span class="line">        <span class="type">Kryo</span> <span class="variable">kryo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Kryo</span>();</span><br><span class="line">        <span class="comment">// 设置动态动态序列化和反序列化类，不提前注册所有类（可能有安全问题）</span></span><br><span class="line">        kryo.setRegistrationRequired(<span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> kryo;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="type">byte</span>[] serialize(T obj) &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">byteArrayOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">Output</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Output</span>(byteArrayOutputStream);</span><br><span class="line">        KRYO_THREAD_LOCAL.get().writeObject(output, obj);</span><br><span class="line">        output.close();</span><br><span class="line">        <span class="keyword">return</span> byteArrayOutputStream.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes, Class&lt;T&gt; classType)</span> &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">byteArrayInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">Input</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Input</span>(byteArrayInputStream);</span><br><span class="line">        <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> KRYO_THREAD_LOCAL.get().readObject(input, classType);</span><br><span class="line">        input.close();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr/><h3 id="Hessian-序列化实现"><a href="#Hessian-序列化实现" class="headerlink" title="Hessian 序列化实现"></a>Hessian 序列化实现</h3><p>依赖库：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.caucho/hessian --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.caucho<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hessian<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.66<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>实现比较简单，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Hessian 序列化器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HessianSerializer</span> <span class="keyword">implements</span> <span class="title class_">Serializer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="type">byte</span>[] serialize(T object) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">        <span class="type">HessianOutput</span> <span class="variable">ho</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianOutput</span>(bos);</span><br><span class="line">        ho.writeObject(object);</span><br><span class="line">        <span class="keyword">return</span> bos.toByteArray();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] bytes, Class&lt;T&gt; tClass)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">ByteArrayInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);</span><br><span class="line">        <span class="type">HessianInput</span> <span class="variable">hi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HessianInput</span>(bis);</span><br><span class="line">        <span class="keyword">return</span> (T) hi.readObject(tClass);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> RPC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot+FastDFS 前后端分离文件上传</title>
      <link href="/2023/10/25/2023.10.25/"/>
      <url>/2023/10/25/2023.10.25/</url>
      
        <content type="html"><![CDATA[<p>在Spring Boot前后端分离环境下做文件上传, 在生产环境中, 我们可以搭建独立的文件服务器, 结合FastDFS还可以搭建独立的分布式文件服务系统, 这样文件管理服务器不仅方便管理还易于扩展, 可以解决临时目录丢失的问题.<br>如果网络请求使用Axios, 那么文件上传有两种不同的实现方式：</p><h2 id="后端配置"><a href="#后端配置" class="headerlink" title="后端配置"></a>后端配置</h2><p>上传的准备工作, 其实本质就是在后端提供一个文件上传接口</p><h3 id="单文件上传"><a href="#单文件上传" class="headerlink" title="单文件上传"></a>单文件上传</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploadController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日期格式 作为目录拼接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;/yyyy/MM/dd/&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile file, HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">// 并且在 uploadFile 文件夹中通过日期对上传的文件归类保存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> realPath + format;</span><br><span class="line">        <span class="type">File</span> <span class="variable">folder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">        <span class="comment">// 如果文件夹不存在, 则创建文件夹</span></span><br><span class="line">        <span class="keyword">if</span>(!folder.exists()) &#123;</span><br><span class="line">            <span class="comment">// 创建n层目录</span></span><br><span class="line">            folder.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取文件扩展名后缀, 对上传的文件重命名，避免文件重名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">oldName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">newName</span> <span class="operator">=</span> UUID.randomUUID().toString() + oldName.substring(oldName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 文件保存</span></span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(folder, newName));</span><br><span class="line">            <span class="comment">// 生成上传文件的访问路径</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> request.getScheme() + <span class="string">&quot;://&quot;</span> + request.getServerName() + <span class="string">&quot;:&quot;</span> + request.getServerPort() + format + newName;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上传的文件按照日期进行归类, 使用UUID给文件重命名避免重名</p><h3 id="多文件上传"><a href="#多文件上传" class="headerlink" title="多文件上传"></a>多文件上传</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultiFileUploadController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 日期格式 作为目录拼接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;/yyyy/MM/dd/&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">upload2</span><span class="params">(MultipartFile[] files, HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        <span class="comment">// 并且在 uploadFile 文件夹中通过日期对上传的文件归类保存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">format</span> <span class="operator">=</span> sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> realPath + format;</span><br><span class="line">        <span class="type">File</span> <span class="variable">folder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">        <span class="comment">// 如果文件夹不存在, 则创建文件夹</span></span><br><span class="line">        <span class="keyword">if</span>(!folder.exists()) &#123;</span><br><span class="line">            <span class="comment">// 创建n层目录</span></span><br><span class="line">            folder.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (MultipartFile file : files) &#123;</span><br><span class="line">                <span class="comment">// 获取文件扩展名后缀, 对上传的文件重命名，避免文件重名</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">oldName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">                <span class="type">String</span> <span class="variable">newName</span> <span class="operator">=</span> UUID.randomUUID().toString() + oldName.substring(oldName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">                <span class="comment">// 文件保存</span></span><br><span class="line">                file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(folder, newName));</span><br><span class="line">                <span class="comment">// 生成上传文件的访问路径</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> request.getScheme() + <span class="string">&quot;://&quot;</span> + request.getServerName() + <span class="string">&quot;:&quot;</span> + request.getServerPort() + format + newName;</span><br><span class="line">                System.out.println(<span class="string">&quot;s = &quot;</span> + s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>多文件上传使用的是数组MultipartFile[], 需要遍历上传的文件</strong></p><h2 id="通过Ajax实现文件上传"><a href="#通过Ajax实现文件上传" class="headerlink" title="通过Ajax实现文件上传"></a>通过Ajax实现文件上传</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://code.jquery.com/jquery-3.5.1.js&quot; integrity=&quot;sha256-QWo7LDvxbWT2tbbQ97B53yJnYU3WhH/C8ycbRAkjPDc=&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=&quot;result&quot;&gt;&lt;/div&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; id=&quot;file&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;上传&quot; onclick=&quot;uploadFile()&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function uploadFile() &#123;</span><br><span class="line">        var file = $(&quot;#file&quot;)[0].files[0];</span><br><span class="line">        var formData = new FormData();</span><br><span class="line">        formData.append(&quot;file&quot;, file);</span><br><span class="line">        formData.append(&quot;username&quot;, &quot;sihai&quot;);</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            type:&#x27;post&#x27;,</span><br><span class="line">            url:&#x27;/upload&#x27;,</span><br><span class="line">            processData: false,</span><br><span class="line">            contentType: false,</span><br><span class="line">            data: formData,</span><br><span class="line">            success: function (msg) &#123;</span><br><span class="line">                $(&quot;#result&quot;).html(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><ul><li>从file对象中, 获取要上传的文件, 由于此处为单文件上传, 所以获取数组中的第一项</li><li>构建一个FormData, 用于存放上传的数据, FormData不可以像Java中的StringBuffer使用链式配置</li><li>构建好FormData后便可以上传数据, FormData就是需要上传的数据</li><li>1.请求方法为post<br/>2.设置Content-Type为multipart/form-data</li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> FastDFS </tag>
            
            <tag> Spring Boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ</title>
      <link href="/2023/08/31/2023.08.31/"/>
      <url>/2023/08/31/2023.08.31/</url>
      
        <content type="html"><![CDATA[<h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><p>RabbitMQ 即一个消息队列，主要是用来实现应用程序的异步和解耦，同时也能起到消息缓冲，消息分发的作用。</p><p>消息中间件最主要的作用是解耦，中间件最标准的用法是生产者生产消息传送到队列，消费者从队列中拿取消息并处理，生产者不用关心是谁来消费，消费者不用关心谁在生产消息，从而达到解耦的目的。</p><p>在分布式的系统中，消息队列也会被用在很多其它的方面，比如：分布式事务的支持，RPC 的调用等等。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Eureka</title>
      <link href="/2023/08/19/2023.08.19/"/>
      <url>/2023/08/19/2023.08.19/</url>
      
        <content type="html"><![CDATA[<h2 id="Eureka-集群"><a href="#Eureka-集群" class="headerlink" title="Eureka 集群"></a>Eureka 集群</h2><ul><li>使用了注册中心之后，所有的服务都要通过服务注册中心来进行信息交换。</li><li>那么服务注册中心的稳定性就变得非常重要了，一旦服务注册中心掉线，那么就会影响到整个系统的稳定性。</li><li>所以，在实际开发中，Eureka一般都是以集群的形式出现。</li></ul><blockquote><p>Eureka集群，实际上就是启动多个Eureka示例，多个Eureka实例之间，相互注册，相互同步数据，共同组成一个Eureka集群。</p></blockquote><hr/><h3 id="Eureka-集群搭建"><a href="#Eureka-集群搭建" class="headerlink" title="Eureka 集群搭建"></a>Eureka 集群搭建</h3><ol><li><p>首先需要修改电脑的 hosts文件<br/></p><pre>127.0.0.1 eureka-a eureka-b</pre></li><li><p>在resources中添加两个环境模拟集群: <br/></p><pre>application-a.ymlapplication-b.yml</pre><p>打成jar包流程：跳过test测试，package打包</p></li><li><p>启动Eureka实例<br/></p></li></ol><p>打包完成后，在命令行启动实例<br/></p><ul><li><p>打开term终端</p><pre>cd target/</pre></li><li><p>启动实例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=a</span><br><span class="line">java -jar eureka-0.0.1-SNAPSHOT.jar --spring.profiles.active=b</span><br></pre></td></tr></table></figure></li></ul><hr/><h2 id="Eureka-细节"><a href="#Eureka-细节" class="headerlink" title="Eureka 细节"></a>Eureka 细节</h2><p>Eureka 本身可以分为两大部分</p><ul><li>Eureka Server</li><li>Eureka client</li></ul><hr/><h3 id="Eureka-Server"><a href="#Eureka-Server" class="headerlink" title="Eureka Server"></a>Eureka Server</h3><p>Eureka Server主要提供了三个功能：<br/></p><ol><li>服务注册，所有的服务都注册到Eureka Server上面</li><li>提供了注册表，注册表就是所有注册上来的服务的一个列表，Eureka Client在调用服务的时候，需要获取这个注册表，一般来说，这个注册表会被缓存下来，如果缓存失效了，则直接获取最新的注册表</li><li>同步状态，Eureka Client通过注册、心跳等机制，和Eureka Server同步当前客户端的状态</li></ol><hr/><h3 id="Eureka-Client"><a href="#Eureka-Client" class="headerlink" title="Eureka Client"></a>Eureka Client</h3><ul><li>Eureka Client主要是用来简化每一个服务和Eureka Server之间的交互</li><li>Eureka Client会自动拉取、更新以及缓存Eureka Server的信息，这样的话，即使Eureka Server所有的节点都宕机了</li><li>Eureka Client依然可以在缓存中获取到想要调用服务的地址（但是地址有可能会发生改变，从而不准确）。</li></ul><hr/><h4 id="Eureka-服务注册"><a href="#Eureka-服务注册" class="headerlink" title="Eureka 服务注册"></a>Eureka 服务注册</h4><ul><li>服务提供者将自己注册到服务注册中心（Eureka Server）</li><li>需要注意的是，所谓的服务提供者，只是一个业务上的划分，本质上它就是一个Eureka Client</li><li>当Eureka Client向Eureka Server注册时，他需要提供一些自身的元数据信息，例如 IP地址、端口号、名称、运行状态等等。</li></ul><hr/><h4 id="Eureka-服务续约"><a href="#Eureka-服务续约" class="headerlink" title="Eureka 服务续约"></a>Eureka 服务续约</h4><ul><li>Eureka Client注册到Eureka Server上之后，事情才刚刚开始运行</li><li>注册成功之后，默认的情况下，Eureka Client每隔30秒便会向Eureka Server发送一条心跳消息，来告诉Eureka Server我还在运行中</li><li>如果Eureka Server连续90秒都没有收到Eureka Client的续约消息（连续三次没发送回复），Eureka Server就会认为Eureka Client已经掉线了，便会将掉线的Eureka Client从当前的服务注册列表中剔除出去。</li></ul><p>关于服务续约的两个相关属性（一般不建议修改）：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 表示服务的续约时间，默认时间为30秒</span></span><br><span class="line"><span class="attr">eureka.instance.lease-renewal-interval-in-seconds</span>=<span class="string">30</span></span><br><span class="line"><span class="comment">## 表示服务的失效时间，默认时间为90秒</span></span><br><span class="line"><span class="attr">eureka.instance.lease-expiration-duration-in-seconds</span>=<span class="string">90</span></span><br></pre></td></tr></table></figure><hr/><h4 id="服务下线"><a href="#服务下线" class="headerlink" title="服务下线"></a>服务下线</h4><p>当Eureka Client下线的时候，会主动发送一条信息，告诉Eureka Server，我已经下线。</p><hr/><h4 id="获取注册表信息"><a href="#获取注册表信息" class="headerlink" title="获取注册表信息"></a>获取注册表信息</h4><ul><li>Eureka Client会从Eureka Server上获取服务的注册信息，并且将其缓存到本地</li><li>那么本地服务端在需要调用远程服务时，会从该缓存信息中查找远程服务所对应的 IP地址、端口号等信息</li><li>Eureka Client上缓存的服务注册信息也会定期从Eureka Server上更新（30秒）</li><li>如果Eureka Server返回的注册表信息与本地缓存的注册表信息不一致的话，Eureka Client会自动更改同步处理。</li></ul><p><b>这里涉及到两个属性：</b></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 表示是否允许从 Eureka Server中获取信息 默认为true</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">    <span class="attr">client:</span></span><br><span class="line">        <span class="attr">fetch-registry:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">instance:</span></span><br><span class="line">      <span class="comment">## 表示Eureka Client上缓存的服务注册信息，定时更新的时间间隔，默认为30秒</span></span><br><span class="line">      <span class="string">lease-renewal-interval-in-seconds：30</span></span><br></pre></td></tr></table></figure><hr/><h3 id="Eureka-集群原理"><a href="#Eureka-集群原理" class="headerlink" title="Eureka 集群原理"></a>Eureka 集群原理</h3><ul><li>在Eureka集群架构中，Eureka Server之间通过 Replicate进行数据同步，不同的Eureka Server之间不区分主从节点，所有的节点都是平等的。在节点之间，通过指定serviceUrl来相互注册，形成一个集群，从而提高节点的可用性。 </li><li>在Eureka Server集群中，如果有某一个节点宕机，Eureka Client会自动切换到新的Eureka Server上。每一个Eureka Server节点，都会相互同步数据。 </li><li>Eureka Server的连接方式，也可以是单线的，也就是a–&gt;b–&gt;c，此时虽然a的数据也会和c之间互相同步，但是一般不建议这种写法。</li></ul><p>在我们配置serviceUrl时，可以指定多个注册地址，也就是a可以注册到b上，也可以同时注册到c上，一般推荐使用这种写法。<br><b>Eureka分区：</b></p><ol><li>region: 根据地理上的不同区域分区</li><li>zone: 根据具体的机房分区</li></ol><hr/><h2 id="服务注册与消费"><a href="#服务注册与消费" class="headerlink" title="服务注册与消费"></a>服务注册与消费</h2><h3 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h3><ul><li>服务注册就是把一个微服务注册到Eureka Server上，这样的话，当其他服务需要调用该服务的时候，只需要从Eureka Server上查询该服务的信息即可。</li></ul><p>以下我们创建一个 provider，作为我们的服务提供者。</p><blockquote><ul><li>创建一个spring boot项目</li><li>选择Eureka Client, Spring Web依赖</li><li>这样的话，当服务创建成功之后，简单的配置一下，就可以被注册到Eureka Server上了。</li></ul></blockquote><p>只需要在 application.yml配置一下项目的注册地址即可</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">provider</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">1114</span></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line">  <span class="attr">client:</span></span><br><span class="line">    <span class="comment">## 注册地址</span></span><br><span class="line">    <span class="attr">service-url:</span></span><br><span class="line">      <span class="attr">defaultZone:</span> <span class="string">http://localhost:1111/eureka</span></span><br></pre></td></tr></table></figure><ul><li>先启动Eureka Server，等到服务注册中心Eureka Server启动成功之后，再启动 provider项目注册。 </li><li>检验是否成功注册：等到两者均成功启动</li><li>打开 <a href="http://localhost:1111/">http://localhost:1111</a> ，就可以查看 provider的注册信息是否存在。</li></ul><hr/><h3 id="服务消费"><a href="#服务消费" class="headerlink" title="服务消费"></a>服务消费</h3><blockquote><ul><li>首先在 provider中提供一个接口 </li><li>然后创建一个新的 consumer项目</li><li>去消费这个接口(&#x2F;hello)</li></ul></blockquote><ol><li>在 provider中，提供了一个 hello接口。</li><li>创建一个 consumer项目，在 consumer项目中，去消费 provider提供的接口</li><li>因为 consumer想要能够获取到 provider这个接口的地址，它就需要去Eureka Server中查询。</li><li>如果直接在consumer中写死 provider的地址，便意味着这两个服务之间的耦合度太高了，所以我们需要降低他们之间的耦合度</li></ol><hr/><h4 id="写死的调用："><a href="#写死的调用：" class="headerlink" title="写死的调用："></a>写死的调用：</h4><p>(具体代码参考 provider中HelloController、consumer中UserHelloController(&#x2F;hello1))</p><ol><li>首先也在 application.yml中配置一下注册信息</li><li>假设我们现在想在 consumer中调用 provider提供的服务，我们可以直接将调用写死，也就是说整个调用过程中不会涉及到Eureka Server。</li></ol><blockquote><ul><li>写死的方法是利用了 HttpUrlConnection来发起的请求，请求中 provider的地址写死了</li><li>意味着 provider和 consumer高度的绑定在一起，这个不符合微服务的思想。</li></ul></blockquote><hr/><h4 id="灵活调用方法："><a href="#灵活调用方法：" class="headerlink" title="灵活调用方法："></a>灵活调用方法：</h4><p>(具体代码参考 provider中HelloController、consumer中UserHelloController(&#x2F;hello2))</p><p>我们可以借助Eureka Client提供的 DiscoveryClient工具</p><p>利用了这个工具，我们可以根据服务名从Eureka Server上查询到一个服务的详细信息。</p><p>注意需要注入下面的工具 DiscoveryClient</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">DiscoveryClient discoveryClient;</span><br></pre></td></tr></table></figure><p>注意：DiscoveryClient 查询到的服务列表是一个集合，因为服务在部署的过程中，有可能是集群化部署，集合中的每一项就是一个实例。</p><hr/><h4 id="展示集群化部署"><a href="#展示集群化部署" class="headerlink" title="展示集群化部署"></a>展示集群化部署</h4><p>如果要同时启动多个 provider实例，多个 provider实例的端口不同，为了区分调用时到底是哪一个 provider提供的服务，这里可以在接口返回值中返回端口。</p><p>修改完成后，对项目进行打包。打包成功之后，在命令行启动两个 provider实例:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar provider-0.0.1-SNAPSHOT.jar --server.port=1117</span><br><span class="line">java -jar provider-0.0.1-SNAPSHOT.jar --server.port=1118</span><br></pre></td></tr></table></figure><ul><li>启动完成后检查Eureka Server，这两个 provider实例是否注册上来。 </li><li>这个时候注册成功之后，在 consumer中再去调用 provider，DiscoveryClient集合之中，获取到的就不再是一个实例，而是两个实例了。</li></ul><hr/><h4 id="手动实现线性负载均衡"><a href="#手动实现线性负载均衡" class="headerlink" title="手动实现线性负载均衡"></a>手动实现线性负载均衡</h4><p>(具体代码参考 provider中HelloController、consumer中UserHelloController(&#x2F;hello3))</p><p>&#x2F;&#x2F; todo 一步步简化 手动负载均衡改自动<br/></p><ul><li>在从集合中获取数据时，通过小小的改变来实现线性负载均衡。</li><li>当请求 <a href="http://localhost:1115/hello3">http://localhost:1115/hello3</a> 的时候，观察到 port端口号不断变化，则表示负载均衡成功启动。</li></ul><hr/><h4 id="升级改造集群化部署"><a href="#升级改造集群化部署" class="headerlink" title="升级改造集群化部署"></a>升级改造集群化部署</h4><p>从两个方面进行改造：</p><h5 id="1-Http调用"><a href="#1-Http调用" class="headerlink" title="1. Http调用"></a>1. Http调用</h5><ul><li>Http调用，我们可以使用 Spring提供的 RestTemplate来实现。 </li><li>首先，在当前服务中，提供一个 RestTemplate的实例。     （具体代码参考&#x2F;consumer&#x2F;ConsumerApplication）方法：restTemplateOne()</li><li>然后在 Http调用时，不再使用 HttpUrlConnection，而是直接使用 RestTemplate。</li><li>(具体代码参考 provider中HelloController、consumer中UserHelloController(&#x2F;hello4))</li><li>用 RestTemplate一行代码就可以实现了 Http调用。</li></ul><hr/><h5 id="2-负载均衡"><a href="#2-负载均衡" class="headerlink" title="2. 负载均衡"></a>2. 负载均衡</h5><ul><li>使用 Ribbon来快速实现负载均衡。 </li><li>在 RestTemplate上使用 @LoadBalanced注解开启负载均衡 </li><li>（具体代码参考&#x2F;consumer&#x2F;ConsumerApplication）方法：restTemplate)</li><li>此时的 RestTemplate就自动具备了负载均衡的功能。</li><li>(具体代码参考 provider中HelloController、consumer中UserHelloController(&#x2F;hello5))</li></ul><hr/><h3 id="RestTemplate"><a href="#RestTemplate" class="headerlink" title="RestTemplate"></a>RestTemplate</h3><ul><li>RestTemplate 是从 Spring 3.0开始支持的一个 Http请求工具</li><li>RestTemplate和 Spring Boot无关, 更加和Spring Cloud无关。</li><li>RestTemplate 提供了常见的 REST请求方法模版，例如 GET、 POST、 PUT、 DELETE请求，以及一些通用的请求执行方法 exchange 和 execute 方法。 </li><li>RestTemplate 本身实现了 RestOperations接口，而在 RestOperations接口中，定义了常见的 RESTful操作，这些操作在 RestTemplate中都得到了很好的实现。</li></ul><hr/><h4 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h4><p>(具体代码参考 provider中HelloController(&#x2F;hello2)、consumer中UserHelloController(&#x2F;hello6))</p><ul><li>首先我们在 provider中定义一个 hello2 接口。</li><li>然后在 consumer中去访问这个接口，因为这个接口是一个 GET请求，所以访问方式就是调用 RestTemplate中的 GET请求去访问。</li></ul><hr/><h5 id="getForObject-、getForEntity-区别"><a href="#getForObject-、getForEntity-区别" class="headerlink" title="getForObject()、getForEntity() 区别"></a>getForObject()、getForEntity() 区别</h5><ul><li>在 RestTemplate中，关于 GET请求，一共有两大类：getForObject()、getForEntity()</li><li>这两大类方法实际上是重载的，唯一的不同就是，返回的值类型不同。 </li><li>getForObject(): 返回的是一个对象，这个对象就是服务端返回的具体值。 </li><li>getForEntity(): 返回的是一个 ResponseEntity，这个 ResponseEntity中除了服务端返回的具体数据外，另外还保留了 Http响应头的数据。 </li><li>通过 getForObject()可以看到直接拿到了服务的返回值，getForEntity()不仅仅拿到了服务的返回值，还拿到了 http响应的具体信息。 </li><li>然后启动 Eureka Server、 provider 以及 consumer，访问 consumer中的 <a href="http://localhost:1115/hello6">http://localhost:1115/hello6</a> 接口，即可以查看到请求结果。</li></ul><hr/><h5 id="getForObject-、getForEntity-重载方法"><a href="#getForObject-、getForEntity-重载方法" class="headerlink" title="getForObject()、getForEntity() 重载方法"></a>getForObject()、getForEntity() 重载方法</h5><ul><li>getForObject()、getForEntity() 分别有三个重载方法，两者的三个重载方法基本上是一致的。</li><li>所以，主要弄清楚一种方法即可。三个重载方法其实代表了三种不同的传参方式。</li><li>(具体代码参考 provider中HelloController(&#x2F;hello2)、consumer中UserHelloController(&#x2F;hello7))</li><li>重启 consumer中的 <a href="http://localhost:1115/hello7">http://localhost:1115/hello7</a> 接口，即可以查看到请求结果。</li></ul><hr/><h4 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h4><ul><li>首先我们在 provider中提供两个 POST接口</li><li>同时，因为 POST请求可能需要传递 JSON，所以这里我们创建一个普通的 Maven项目作为 commons模块</li><li>然后让这个 commons模块被 provider 和 consumer 共同引用，这样就可以方便我们传递 JSON 了。</li><li>commons 模块创建成功后，在 commons模块中创建 User对象，分别被 provider 和 consumer 引用。 </li><li>引入完成后，我们在 provider中提供两个 POST请求接口。</li><li>(具体代码参考 provider中HelloController(&#x2F;hello3、&#x2F;hello4)、consumer中UserHelloController(&#x2F;hello7))</li><li>定义完成后，接下来在 consumer中调用这两个接口。 </li><li>RestTemplate 中的 POST请求和 GET请求很像，只是多出来三个方法</li><li>就是 postForLocation，另外两个 postForObject 和 postForEntity 和前面的 get基本是一致的。</li><li>所以我们主要看 postForObject 和额外的 postForLocation。</li></ul><hr/><h5 id="postForObject"><a href="#postForObject" class="headerlink" title="postForObject()"></a>postForObject()</h5><p>(具体代码参考 provider中HelloController(&#x2F;user、&#x2F;user1)、consumer中UserHelloController(&#x2F;hello8、&#x2F;hello9))</p><hr/><h5 id="postForLocation"><a href="#postForLocation" class="headerlink" title="postForLocation()"></a>postForLocation()</h5><ul><li>有的时候，当我们执行完一个 post请求之后，立马就要进行重定向，</li><li>例如一个非常常见的场景就是注册，注册是一个 post请求，注册完成之后，立马重定向到登陆页面去登陆，对于这种场景，我们就可以使用到 postForLocation。</li></ul><blockquote><ul><li>首先我们在 provider上提供一个 RegisterController 用户注册接口。</li><li>(参考代码 provider&#x2F;controller&#x2F;RegisterController.java)</li><li>post 接口，响应一定要为302，否则 postForLocation无效。</li><li>(具体代码参考 provider中RegisterController&#x2F;register、consumer中UserHelloController(&#x2F;hello10)</li><li><strong>注意：重定向的地址，一定要写成绝对路径，不要写成相对路径，否则会在 consumer 中调用时候出问题。</strong></li><li>postForLocation，调用该方法返回的是一个 uri，这个 uri 就是重定向的地址（里面包含了重定向的参数），拿到了 uri 之后，就可以直接发送新的请求了。</li></ul></blockquote><hr/><h4 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h4><ul><li>PUT 请求比较简单，重载的方法也比较少，一般用于做<strong>更新操作</strong></li><li>我们首先在 provider 中提供一个 PUT 接口。    &#x2F;provider&#x2F;update1   &#x2F;provider&#x2F;update2</li><li>注意： PUT 接口传参其实和 POST 很像，也接受两种类型的参数， key-value 形式以及 JSON 形式。</li><li>然后，我们在 consumer 中调用该接口。     key-value:&#x2F;consumer&#x2F;hello11     json:&#x2F;consumer&#x2F;hello12</li><li>consumer 中的写法基本和 post 类似，也是两种方式，可以传递两种不同类型的参数。</li></ul><hr/><h4 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h4><ul><li>DELETE 也比较容易，我们有两种方式来传递参数，key-value形式，或者 PathVariable（参数放在路径中）</li></ul><blockquote><ul><li>首先我们在 provider 中定义两个 DELETE 方法。 </li><li>key-value:&#x2F;provider&#x2F;delete1       PathVariable:&#x2F;provider&#x2F;delete2 </li><li>然后在 consumer 中调用这两个删除的接口。</li><li>(具体代码参考 consumer中UserHelloController(&#x2F;hello13))</li><li>delete 参数的传递也支持 map， 这块实际上和 get 也是一样的。</li></ul></blockquote><hr/><h3 id="客户端负载均衡"><a href="#客户端负载均衡" class="headerlink" title="客户端负载均衡"></a>客户端负载均衡</h3><ul><li>客户端负载均衡就是相对服务端负载均衡而言的。</li><li><strong>服务端负载均衡，就是传统的 Nginx 的方式，用 Nginx 做负载均衡，我们称之为服务端负载均衡</strong></li><li>服务端负载均衡：它的一个特点是，就是调用的客户端并不知道自己具体是由哪一个 Server 提供的服务，它也不会关心，反正请求发送给 Nginx， Nginx再将请求转发给 Tomcat(上游服务器、service)。客户端只需要记住 Nginx的地址就可以了。</li><li>客户端负载均衡：它的特点是，调用的客户端本身它是知道所有 Server 的详细信息的，当你需要调用 Server 上的接口的时候，客户端会从自身所维护的 Server 列表中，根据提前配置好的负载均衡策略，自己挑选一个 Server 来调用，此时，客户端是知道它所调用的是哪一个 Server。</li><li>在 RestTemplate 中，如果想使用负载均衡功能，只需要给 RestTemplate 实例上添加一个 @LoadBalanced 注解即可，此时，RestTemplate 就会自动具备负载均衡功能，这个负载均衡就是客户端负载均衡。</li></ul><hr/><h3 id="负载均衡原理"><a href="#负载均衡原理" class="headerlink" title="负载均衡原理"></a>负载均衡原理</h3><ul><li>在 Spring Cloud 中，实现负载均衡非常容易，只需要添加 @LoadBalanced 注解即可。</li><li>只要添加了该注解，一个原本普普通通的 Rest 请求的工具 RestTemplate 就会自动具备负载均衡功能</li></ul><p>整体上来说的话，这个功能的实现就是三个核心点：</p><ol><li>从 Eureka Client 本地缓存的服务注册信息中，选择一个可以调用的服务</li><li>根据 1 中所选择的服务，重构请求 URL 地址(不可以直接写域名+端口号，只能写服务名)</li><li>将 1、2 步的功能嵌入到 RestTemplate 中</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Bus</title>
      <link href="/2023/08/11/2023.08.11/"/>
      <url>/2023/08/11/2023.08.11/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Cloud-Bus-简介"><a href="#Spring-Cloud-Bus-简介" class="headerlink" title="Spring Cloud Bus 简介"></a>Spring Cloud Bus 简介</h2><p>Spring Cloud Bus 通过轻量级的消息代理连接各个微服务，可以用来广播配置文件的更改，或者管理服务监控。</p><p>在实际生产开发环境下，Spring Cloud Bus 主要用来做微服务的监控，或者微服务应用程序之间的通信。</p><p>Bus 配合 Spring Cloud Config 使用可以实现配置的动态刷新。目前 Spring Cloud Bus 支持两种消息代理：RabbitMQ 和 Kafka</p><p>下面以 RabbitMQ 为例来演示下使用Spring Cloud Bus 动态刷新配置的功能。</p><hr/><h2 id="RabbitMQ-安装"><a href="#RabbitMQ-安装" class="headerlink" title="RabbitMQ 安装"></a>RabbitMQ 安装</h2><p>首先在 Docker 中安装 RabbitMQ，执行下列命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:management</span><br></pre></td></tr></table></figure><p>查看容器是否成功安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>启动 RabbitMQ 容器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start rabbitmq</span><br></pre></td></tr></table></figure><p>访问是否运行，打开浏览器，输入下列地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:15672</span><br></pre></td></tr></table></figure><p>输入用户名和密码，默认用户名和密码都是 guest</p><hr/><h2 id="RabbitMQ-结合-spring-cloud-bus-配置文件全部刷新"><a href="#RabbitMQ-结合-spring-cloud-bus-配置文件全部刷新" class="headerlink" title="RabbitMQ 结合 spring cloud bus 配置文件全部刷新"></a>RabbitMQ 结合 spring cloud bus 配置文件全部刷新</h2><ul><li>当我们的配置文件发生变化的时候，我们就可以指向 config-server 发送一个更新请求（以前是挨个给 config-client 发送更新请求）</li><li>然后 config-server 把消息发给 spring cloud bus</li><li>spring cloud bus 收到请求之后，再去发送到 RabbitMQ 上</li><li>RabbitMQ 就会通知到 config-client</li><li>让所有 client 都收到刷新请求，来实现配置文件的动态刷新。</li></ul><ol><li>首先给 config-server 和 config-client 分别添加上 Spring Cloud Bus 依赖</li><li>由于现在统一由 config-server 提供刷新接口，所以也需要添加上 actuator 依赖</li><li>在 config-server、config-client 配置 rabbitmq 属性，地址、端口号、用户名、密码，使它们都连接到 RabbitMQ 上。</li><li>由于给 config-server 中的所有接口都添加了保护，所以刷新接口将无法直接访问，需要先登陆，所以需要配置一下 security 的登陆用户名、密码。</li><li>同时可以通过在 config-server 中的 SecurityConfig 修改 Security 配置，对端点的权限做出修改，在 SecurityConfig 配置中，开启了 HttpBasic 登陆，这样，在发送刷新请求时，就可以直接通过 HttpBasic 配置携带认证信息。</li><li>注意，需要在 config-server 的配置文件中暴露 bus-refresh 端点。</li><li>启动 Eureka、config-server、config-client 服务。</li><li>然后修改配置信息提交到 Github 上后，需要访问 config-server 中的 POST 请求：<a href="http://localhost:8081/actuator/bus-refresh">http://localhost:8081/actuator/bus-refresh</a> ，因为使用了 security，开启了 HttpBasic 认证，所以需要在 Authorization 的类型中选择 Basic Auth，输入 security 的登陆名密码才可以访问刷新接口。</li><li>重新刷新 config-client 接口，查看是否有变化。</li><li>这个 post 请求是针对 config-server 的，config-server 会把这个刷新的指令传给 rabbitmq，然后 rabbitmq 再把指令传给各个 client。</li></ol><hr/><h2 id="RabbitMQ-结合-spring-cloud-bus-配置文件逐个刷新"><a href="#RabbitMQ-结合-spring-cloud-bus-配置文件逐个刷新" class="headerlink" title="RabbitMQ 结合 spring cloud bus 配置文件逐个刷新"></a>RabbitMQ 结合 spring cloud bus 配置文件逐个刷新</h2><p>如果更新了配置文件之后，不希望每一个微服务都去刷新配置文件，那么就可以通过配置来解决问题。</p><ol><li>首先，我们在每一个 config-client 的配置文件都添加一个 instance-id，每一个 instance-id 由 <code>应用名称+端口号</code> 组成。</li><li>我们可以将 config-client 打包后(跳过测试)，通过命令同时启动多个实例，作为测试只刷新某一个微服务。</li><li>使用 8091 端口作为测试逐个请求。</li><li>然后修改配置信息提交到 Github 上后，需要访问 config-server 中的 POST 请求：<a href="http://localhost:8081/actuator/bus-refresh/client1:8091">http://localhost:8081/actuator/bus-refresh/client1:8091</a></li><li>bus-refresh 后面的参数就表示只让 8091 端口的微服务进行更新配置文件。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java 远程开发</title>
      <link href="/2023/08/02/2023.08.02/"/>
      <url>/2023/08/02/2023.08.02/</url>
      
        <content type="html"><![CDATA[<p>使用 IDEA 自带的远程开发功能，可以直接将本地的编译、构建、调试、运行等工作全部都放在远程服务器上执行！</p><p>而本地仅运行客户端软件连接服务器，像之前一样编写代码、进行其他开发操作即可。</p><ul><li>适合本地电脑性能差（服务器性能强）、开发环境多人协作开发、需要统一开发环境的场景。</li></ul><h2 id="网络连通"><a href="#网络连通" class="headerlink" title="网络连通"></a>网络连通</h2><p>要确保我们本地的 Windows 电脑能够连接到 Linux 虚拟机。</p><p>首先在设置中搜索网络，点击查看网络设置：<br><img src="/../img/Linux_java/Linux_java_1.jpg" alt="Linux_java_1.jpg"></p><p>获取到虚拟机的 IPv4 地址：<br><img src="/../img/Linux_java/Linux_java_2.jpg" alt="Linux_java_2.jpg"></p><p>在自己的 Windows 电脑上打开 CMD ping 这个 IP 地址，测试能否 ping 通。</p><p>如下图，表示网络正常连通：<br><img src="/../img/Linux_java/Linux_java_3.jpg" alt="Linux_java_3.jpg"></p><hr/><h2 id="开启-SSH-服务"><a href="#开启-SSH-服务" class="headerlink" title="开启 SSH 服务"></a>开启 SSH 服务</h2><p>在 Linux 虚拟机中，我们需要开启 SSH 服务，这样我们才能通过 SSH 协议连接到虚拟机。</p><p>很多远程开发工具都是通过 SSH 协议连接远程服务器的，所以我们要在 Linux 虚拟机上开启 SSH。</p><p>在 Linux 虚拟机上打开终端，输入下列命令安装 SSH 服务器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure><p>安装完成后，我们可以通过下列命令查看 SSH 服务是否已经开启：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -e | grep ssh</span><br></pre></td></tr></table></figure><p>如下图，表示 SSH 服务已经开启：<br><img src="/../img/Linux_java/Linux_java_4.jpg" alt="Linux_java_4.jpg"></p><p>如果没有开启，我们可以通过下列命令开启 SSH 服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh start</span><br></pre></td></tr></table></figure><hr/><h2 id="安装-Java"><a href="#安装-Java" class="headerlink" title="安装 Java"></a>安装 Java</h2><p>因为我们要使用 Java 远程开发，所以我们需要在 Linux 虚拟机上安装 Java。</p><p>首先打开终端，更新软件源信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>然后执行下列命令来安装 Java 8（经典版本）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install openjdk-8-jdk</span><br></pre></td></tr></table></figure><p>安装完成后，我们可以通过下列命令查看 Java 版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><p>看到如下图输出，表示 Java 安装成功：<br><img src="/../img/Linux_java/Linux_java_5.jpg" alt="Linux_java_5.jpg"></p><hr/><h2 id="安装-Maven"><a href="#安装-Maven" class="headerlink" title="安装 Maven"></a>安装 Maven</h2><p>安装 Java 的项目依赖管理工具 Maven，便于接下来测试 Spring Boot 项目的远程开发。</p><p>打开终端，输入如下命令安装 Maven：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install maven</span><br></pre></td></tr></table></figure><p>安装完成后，我们可以通过下列命令查看 Maven 版本：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -v</span><br></pre></td></tr></table></figure><p>看到如下图输出，表示 Maven 安装成功：<br><img src="/../img/Linux_java/Linux_java_6.jpg" alt="Linux_java_6.jpg"></p><hr/><h2 id="远程开发"><a href="#远程开发" class="headerlink" title="远程开发"></a>远程开发</h2><p>进入 IDEA 主页，找到 SSH 选项，点击新建项目：<br><img src="/../img/Linux_java/Linux_java_7.jpg" alt="Linux_java_7.jpg"></p><p>配置 SSH 连接：<br><img src="/../img/Linux_java/Linux_java_8.jpg" alt="Linux_java_8.jpg"></p><p>指定远程开发的代码路径：<br><img src="/../img/Linux_java/Linux_java_9.jpg" alt="Linux_java_9.jpg"></p><p>首次使用时，需要等待下载 JetBrains Client 客户端，服务器上也会自动安装对应的远程开发后端，然后进入远程开发：<br><img src="/../img/Linux_java/Linux_java_10.jpg" alt="Linux_java_10.jpg"></p><p>打开任务管理器，可以看到 JetBrains 的 client 非常 “轻量”：<br><img src="/../img/Linux_java/Linux_java_11.jpg" alt="Linux_java_11.jpg"></p><p>然后直接以 Debug 模式启动项目：<br><img src="/../img/Linux_java/Linux_java_12.jpg" alt="Linux_java_12.jpg"></p><p>还可以配置请求转发，像访问本地服务一样访问远程端口：<br><img src="/../img/Linux_java/Linux_java_13.jpg" alt="Linux_java_13.jpg"><br><img src="/../img/Linux_java/Linux_java_14.jpg" alt="Linux_java_14.jpg"></p><p>接下来访问本机地址 <a href="http://127.0.0.1:8080/hello">http://127.0.0.1:8080/hello</a> ，就能够访问到项目啦，而且直接支持 Debug！无须做任何多余的配置！</p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VMware Workstation 安装 Ubuntu</title>
      <link href="/2023/07/29/2023.07.29/"/>
      <url>/2023/07/29/2023.07.29/</url>
      
        <content type="html"><![CDATA[<h2 id="虚拟机安装"><a href="#虚拟机安装" class="headerlink" title="虚拟机安装"></a>虚拟机安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>首先我们要下载虚拟机软件，这里比较推荐 VMware Workstation Player，个人不商业使用是 免费 的。</p><p>直接到 VMware 官网下载：<br><a href="https://www.vmware.com/cn/products/workstation-player.html">https://www.vmware.com/cn/products/workstation-player.html</a></p><p><img src="/../img/vm/vm_1.jpg" alt="vm_1.jpg"></p><p>在官网点击免费下载后，即可进入安装流程。<br>这里要注意勾选 “自动安装 Windows Hypervisor Platform” 和 “将 VMware Workstation 控制台工具添加到系统 PATH” 两个选项：<br><img src="/../img/vm/vm_2.jpg" alt="vm_2.jpg"><br><img src="/../img/vm/vm_3.jpg" alt="vm_3.jpg"></p><p>选择免费、非商用版本：<br><img src="/../img/vm/vm_4.jpg" alt="vm_4.jpg"></p><p>然后就安装成功了</p><hr/><h2 id="安装-Ubuntu"><a href="#安装-Ubuntu" class="headerlink" title="安装 Ubuntu"></a>安装 Ubuntu</h2><p>这里我们选择 Linux Ubuntu 18.04 LTS 版本来给大家演示，有图形界面。</p><p>Ubuntu 镜像下载：<a href="https://releases.ubuntu.com/18.04/">https://releases.ubuntu.com/18.04/</a></p><p>拉到底部，找到 .iso 后缀的文件下载即可：<br><img src="/../img/ubuntu/ubuntu_1.jpg" alt="ubuntu_1.jpg"></p><hr/><h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><p>虚拟机软件安装完成后，我们打开软件，接下来要先新建虚拟机来安装一个 Linux 操作系统：<br><img src="/../img/vm/vm_5.jpg" alt="vm_5.jpg"></p><p>点击创建新虚拟机，然后它让我们提供一个 Linux 操作系统的镜像：<br><img src="/../img/vm/vm_6.jpg" alt="vm_6.jpg"></p><p>我们可以根据实际的电脑情况来自定义虚拟机的硬件。如果你的电脑配置还不错，内存和 CPU 可以分配多一点：<br><img src="/../img/ubuntu/ubuntu_2.jpg" alt="ubuntu_2.jpg"></p><p>点击完成，然后稍等片刻，系统就安装完成并启动啦！<br><img src="/../img/ubuntu/ubuntu_3.jpg" alt="ubuntu_3.jpg"></p><hr/><h2 id="修改虚拟机配置"><a href="#修改虚拟机配置" class="headerlink" title="修改虚拟机配置"></a>修改虚拟机配置</h2><p>像购买一台新电脑一样，我们有了新的操作系统后，可以自行修改一些配置，比如修改语言为中文。</p><h3 id="修改语言为中文"><a href="#修改语言为中文" class="headerlink" title="修改语言为中文"></a>修改语言为中文</h3><p>按 <b>windows</b> 键，弹出功能搜索按钮，输入 “language”，打开 “语言支持”：<br><img src="/../img/ubuntu/ubuntu_4.jpg" alt="ubuntu_4.jpg"></p><p>然后点击添加语言，选择中文简体，并且把汉语拖到语言列表的最上面，最后点击应用到整个系统：<br><img src="/../img/ubuntu/ubuntu_5.jpg" alt="ubuntu_5.jpg"></p><p>稍等片刻，中文语言包、输入法等内容就安装好了，点击右上角重启虚拟机：<br><img src="/../img/ubuntu/ubuntu_6.jpg" alt="ubuntu_6.jpg"></p><p>重启后，同样是按 windows 键，弹出功能搜索按钮，输入 “language”，打开 “区域和语言”：<br><img src="/../img/ubuntu/ubuntu_7.jpg" alt="ubuntu_7.jpg"></p><p>在区域和语言设置中，新增输入源，添加已安装的中文输入法：<br><img src="/../img/ubuntu/ubuntu_8.jpg" alt="ubuntu_8.jpg"></p><h3 id="修改分辨率"><a href="#修改分辨率" class="headerlink" title="修改分辨率"></a>修改分辨率</h3><p>用同样的方法，我们可以调整系统的分辨率。</p><p>先打开显示设置：<br><img src="/../img/ubuntu/ubuntu_9.jpg" alt="ubuntu_9.jpg"></p><p>然后可以调整分辨率和字体大小：<br><img src="/../img/ubuntu/ubuntu.jpg" alt="ubuntu.jpg"></p><h3 id="修改时间"><a href="#修改时间" class="headerlink" title="修改时间"></a>修改时间</h3><p>默认情况下系统的时区可能是有问题的，我们可以打开“日期和时间”设置，选择时区为“中国上海”：<br><img src="/../img/ubuntu/ubuntu_10.jpg" alt="ubuntu_10.jpg"></p><hr/><h2 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h2><p>基本配置修改完成后，我们就可以给 Linux 系统安装软件并使用了。</p><p>和其他操作系统一样，Linux Ubuntu 也有自己的应用商店，能够可视化一键安装软件，比如防火墙之类的：<br><img src="/../img/ubuntu/ubuntu_11.jpg" alt="ubuntu_11.jpg"></p><p>当然，用 Linux 更多地还是要学习它的终端命令行操作，所以这里我们以 Docker 为例，使用命令行来快速安装。</p><p>按 Ctrl + Alt + T 快速打开终端，输入以下命令来一键安装 Docker：</p><p>apt 命令是软件包管理工具，能够让我们方便地安装软件</p><p>如下图：<br><img src="/../img/ubuntu/ubuntu_13.jpg" alt="ubuntu_13.jpg"></p><p>安装完成后，输入 docker -v ，查看版本号，如下图：<br><img src="/../img/ubuntu/ubuntu_14.jpg" alt="ubuntu_14.jpg"></p><p>然后输入 docker run 命令，测试 Docker 能否正常运行，能看到如下信息，表示 Docker 安装成功：</p><p><img src="/../img/ubuntu/ubuntu_15.jpg" alt="ubuntu_15.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> VMware </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一键部署 Spring Boot 项目到 Docker</title>
      <link href="/2023/07/15/2023.07.15/"/>
      <url>/2023/07/15/2023.07.15/</url>
      
        <content type="html"><![CDATA[<p>容器化部署应该是目前的主流方案。</p><p>不同于传统的单体应用，微服务由于服务数量众多，在部署的时候出问题的可能性更大，这个时候，结合 Docker 来部署，就可以很好的解决这个问题，这也是目前使用较多的方案之一。</p><p>将 Spring Boot 项目打包到 Docker 容器中部署，有很多不同的方法，主要将 Spring Boot 项目一键打包到远程 Docker 容器，然后通过运行一个镜像的方式来启动一个 Spring Boot 项目。</p><hr/><h2 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h2><p>参考文章：<a href="https://blog.csdn.net/m0_59196543/article/details/124749175">https://blog.csdn.net/m0_59196543/article/details/124749175</a></p><h3 id="配置-Docker-远程访问"><a href="#配置-Docker-远程访问" class="headerlink" title="配置 Docker 远程访问"></a>配置 Docker 远程访问</h3><p>Docker 安装成功之后，我们首先需要修改 Docker 配置，开启允许远程访问 Docker 的功能，开启方式很简单，修改 &#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;docker.service 文件，修改如下内容：</p><pre>ExecStart=/usr/bin/dockerd -H tcp://0.0.0.0:2375  -H unix:///var/run/docker.sock</pre><p>配置完成后，保存退出，然后重启 Docker：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br><span class="line">service docker restart</span><br></pre></td></tr></table></figure><hr/><h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><ul><li>安装 Docker 插件。</li><li>在 设置 -&gt; 构建 -&gt; Docker 中，配置一下 Docker 的远程连接地址。</li></ul><p>配置完成后，可以看到下面有一个 Connection successful 提示，这个表示 Docker 已经连接上了。</p><hr/><h2 id="简单项目测试"><a href="#简单项目测试" class="headerlink" title="简单项目测试"></a>简单项目测试</h2><h3 id="依赖项"><a href="#依赖项" class="headerlink" title="依赖项"></a>依赖项</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置-Dockerfile"><a href="#配置-Dockerfile" class="headerlink" title="配置 Dockerfile"></a>配置 Dockerfile</h3><ul><li>在项目的根目录下，创建一个 Dockerfile ，作为镜像的构建文件<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Spring Boot 项目的运行依赖 Java 环境，所以我自己的镜像基于 Java 镜像来构建。</span></span><br><span class="line"><span class="keyword">FROM</span> hub.c.<span class="number">163</span>.com/library/java:latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于 Spring Boot 运行时需要 tmp 目录，这里数据卷配置一个 /tmp 目录出来</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /tmp</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将本地 target 目录中打包好的 .jar 文件复制一份新的 到 /app.jar。</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> target/docker-test-0.0.1-SNAPSHOT.jar app.jar</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后就是配置一下启动命令，由于打包的 jar 已经成为 app.jar 了，所以启动命令也是启动 app.jar。</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="配置-Maven-插件"><a href="#配置-Maven-插件" class="headerlink" title="配置 Maven 插件"></a>配置 Maven 插件</h3><ul><li>首先在 execution 节点中配置当执行 mvn package 的时候，顺便也执行一下 docker:build</li><li>然后在 configuration 中分别配置 Docker 的主机地址，镜像的名称，镜像的 tags，其中 dockerDirectory 表示指定 Dockerfile 的位置。</li><li>最后 resource 节点中再配置一下 jar 的位置和名称即可。<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>build-image<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>build<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://localhost:2375<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>sihai/$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">imageTags</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">imageTag</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">imageTag</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">imageTags</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">forceTags</span>&gt;</span>true<span class="tag">&lt;/<span class="name">forceTags</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dockerDirectory</span>&gt;</span>$&#123;project.basedir&#125;<span class="tag">&lt;/<span class="name">dockerDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="测试接口"><a href="#测试接口" class="headerlink" title="测试接口"></a>测试接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloDockerController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello docker!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="项目打包"><a href="#项目打包" class="headerlink" title="项目打包"></a>项目打包</h3><ul><li>打包完成后，项目会自动构建成一个镜像，并且上传到 Docker 容器中。</li><li>打包完成后，就可以在 Docker 容器中看到刚刚打包成的镜像了。</li></ul><h3 id="项目运行"><a href="#项目运行" class="headerlink" title="项目运行"></a>项目运行</h3><ul><li>注意文件名不要写错</li></ul><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="language-bash"> -d --name sihai -p 8080:8080 sihai/docker-test:0.0.1-SNAPSHOT</span></span><br></pre></td></tr></table></figure><ul><li><p>启动成功之后，我们就可以访问容器中的接口了。</p></li><li><p>访问地址：<a href="http://localhost:8080/hello">http://localhost:8080/hello</a></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot Actuator</title>
      <link href="/2023/07/02/2023.07.02/"/>
      <url>/2023/07/02/2023.07.02/</url>
      
        <content type="html"><![CDATA[<p>在 Spring Boot 项目中，我们使用的信息采集器主要就是 Spring Boot Actuator，这个模块由 Spring Boot 官方提供。</p><p>它包含了许多生产级别的功能，例如健康检查、审计、指标收集、HTTP 请求追踪等，Spring Boot Actuator 将这些信息收集起来后，通过 HTTP 和 JMX 两种方式暴露给外部模块。</p><p>例如 Spring Boot Actuator 通过 &#x2F;health 端点（endpoints）提供了应用的健康信息，开发者只需要访问该端点就可以看到应用的健康信息，但是这些端点返回的数据是 JSON 格式的，不方便查看，也不方便分析，所以一般情况下，Spring Boot Actuator 都是和一些外部模块一起使用。</p><hr/><h2 id="Actuator-端点"><a href="#Actuator-端点" class="headerlink" title="Actuator 端点"></a>Actuator 端点</h2><ul><li>首先创建一个 Spring Boot 项目，添加上 Actuator 依赖。</li><li>项目创建成功后，直接运行项目，可以在 Actuator 的 Mappings 看见端点信息。</li><li>可以通过配置文件来暴露可使用的端点。</li><li>也可以通过配置文件来打开远程暂停 Spring Boot 项目端点。发起 Post 请求: <a href="http://localhost:8080/actuator/shutdown">http://localhost:8080/actuator/shutdown</a></li></ul><hr/><h2 id="Spring-Boot-Security-保护-Actuator-端点信息"><a href="#Spring-Boot-Security-保护-Actuator-端点信息" class="headerlink" title="Spring Boot Security 保护 Actuator 端点信息"></a>Spring Boot Security 保护 Actuator 端点信息</h2><p>我们可以使用 Security 来保护 Actuator，需要登陆才可以访问我们打开的端点。</p><ul><li>首先添加 Security 依赖。</li><li>创建 config&#x2F;SecurityConfig 文件来配置 Security，重写 Security 方法。</li><li>在配置文件中，配置用户基本登陆信息。</li><li>重启项目，Postman 中需要选择 Authorization，登陆类型选择 Basic Auth，输入用户名密码，重新请求远程暂停端点查看效果。</li></ul><hr/><h2 id="修改-Actuator-路径映射"><a href="#修改-Actuator-路径映射" class="headerlink" title="修改 Actuator 路径映射"></a>修改 Actuator 路径映射</h2><p>只需要在配置文件中修改即可。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="comment">## 默认为 /actuator，修改为 /</span></span><br><span class="line">      <span class="attr">base-path:</span> <span class="string">/</span></span><br></pre></td></tr></table></figure><p>也可以针对某一个端点进行修改路径映射</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="comment">## 针对某一个端点修改路径映射</span></span><br><span class="line">     <span class="attr">path-mapping:</span></span><br><span class="line">        <span class="attr">beans:</span> <span class="string">bs</span></span><br></pre></td></tr></table></figure><hr/><h2 id="Actuator-跨域支持"><a href="#Actuator-跨域支持" class="headerlink" title="Actuator 跨域支持"></a>Actuator 跨域支持</h2><p>在配置文件中配置跨域支持</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">cors:</span></span><br><span class="line">        <span class="comment">## 允许所有的域访问</span></span><br><span class="line">        <span class="attr">allowed-origins:</span> <span class="string">*</span></span><br><span class="line">        <span class="comment">## 允许的请求方法</span></span><br><span class="line">        <span class="attr">allowed-methods:</span> <span class="string">GET,POST</span></span><br></pre></td></tr></table></figure><hr/><h2 id="Actuator-健康指示器"><a href="#Actuator-健康指示器" class="headerlink" title="Actuator 健康指示器"></a>Actuator 健康指示器</h2><p>健康指示器显示信息，默认为 never，它有三个参数：</p><ul><li>always: 总是显示</li><li>never：从来不限时</li><li>when_authorized：显示给认证用户<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">when_authorized</span></span><br></pre></td></tr></table></figure></li></ul><p>访问健康指示器，指定所需角色：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">roles:</span> <span class="string">ADMIN</span></span><br></pre></td></tr></table></figure><p>重启项目后，访问 GET 请求： <a href="http://localhost:8080/actuator/health">http://localhost:8080/actuator/health</a></p><p><b>Actuator 健康指示器也支持生成很多技术详细，比如 redis：</b></p><ul><li>首先在项目中添加 redis 依赖。</li><li>在配置文件中配置 redis 用户名密码。</li><li>重启项目后访问：<a href="http://localhost:8080/actuator/health">http://localhost:8080/actuator/health</a></li></ul><hr/><h2 id="Actuator-自定义健康指示器"><a href="#Actuator-自定义健康指示器" class="headerlink" title="Actuator 自定义健康指示器"></a>Actuator 自定义健康指示器</h2><p>新建一个配置类 &#x2F;HealthConfig。<br>配置配置文件，自定义健康指示器和响应码。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="comment">## 自定义健康指示器</span></span><br><span class="line">      <span class="attr">status:</span></span><br><span class="line">        <span class="attr">order:</span> <span class="string">FATAL,DOWN,OUT_OF_SERVER,UP,UNKNOWN</span></span><br><span class="line">        <span class="comment">## 自定义响应码</span></span><br><span class="line">        <span class="attr">http-mapping:</span></span><br><span class="line">          <span class="attr">FATAL:</span> <span class="number">503</span></span><br></pre></td></tr></table></figure><hr/><h2 id="Actuator-自定义应用信息"><a href="#Actuator-自定义应用信息" class="headerlink" title="Actuator 自定义应用信息"></a>Actuator 自定义应用信息</h2><h3 id="通过配置文件定义"><a href="#通过配置文件定义" class="headerlink" title="通过配置文件定义"></a>通过配置文件定义</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">encoding:</span> <span class="string">@project.build.sourceEncoding@</span></span><br><span class="line">    <span class="attr">java:</span></span><br><span class="line">      <span class="attr">source:</span> <span class="string">@java.version@</span></span><br><span class="line">      <span class="attr">target:</span> <span class="string">@java.version@</span></span><br><span class="line">  <span class="attr">author:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sihai</span></span><br></pre></td></tr></table></figure><p>访问：<a href="http://localhost:8080/actuator/info">http://localhost:8080/actuator/info</a></p><h3 id="通过类定义"><a href="#通过类定义" class="headerlink" title="通过类定义"></a>通过类定义</h3><p>创建一个类 AppInfoConfig，继承自 InfoContributor。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppInfoConfig</span> <span class="keyword">implements</span> <span class="title class_">InfoContributor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contribute</span><span class="params">(Info.Builder builder)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; link = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        link.put(<span class="string">&quot;site&quot;</span>, <span class="string">&quot;https://tsihai.github.io/&quot;</span>);</span><br><span class="line">        link.put(<span class="string">&quot;site-2&quot;</span>, <span class="string">&quot;https://github.com/Tsihai&quot;</span>);</span><br><span class="line">        builder.withDetail(<span class="string">&quot;link&quot;</span>, link);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Actuator-Info-端点查看-Git-提交信息"><a href="#Actuator-Info-端点查看-Git-提交信息" class="headerlink" title="Actuator Info 端点查看 Git 提交信息"></a>Actuator Info 端点查看 Git 提交信息</h3><ul><li>首先添加插件 git commit id。</li><li>然后在 maven 中 git-commit-id 插件 revision Git 的信息，生成完成之后。</li><li>重启项目后访问 info 端点。 <a href="http://localhost:8080/actuator/info">http://localhost:8080/actuator/info</a></li><li>即可看见 git 的简略 json 信息。</li><li>可以在配置文件中配置显示 git 的详细信息。</li></ul><h3 id="Actuator-Info-端点查看项目构建信息"><a href="#Actuator-Info-端点查看项目构建信息" class="headerlink" title="Actuator Info 端点查看项目构建信息"></a>Actuator Info 端点查看项目构建信息</h3><p>首先需要配置一下插件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">goal</span>&gt;</span>build-info<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在 maven 中的 spring-boot 插件 build-info 信息。</li><li>生成数据后，重启项目后访问 info 端点。</li></ul><hr/><h2 id="Actuator-单体应用监控信息可视化"><a href="#Actuator-单体应用监控信息可视化" class="headerlink" title="Actuator 单体应用监控信息可视化"></a>Actuator 单体应用监控信息可视化</h2><h3 id="Actuator-Server"><a href="#Actuator-Server" class="headerlink" title="Actuator Server"></a>Actuator Server</h3><ul><li>首先另外创建一个 Spring Boot 项目 &#x2F;actuator-server，添加 web、Admin (Server) 依赖。</li><li>在启动类上添加上 @EnableAdminServer。</li><li>在配置类上配置端口号为 8081。</li><li>由于我们在 client 上配置了 security 进行了端点保护，所以需要在配置类上配置 security 的账号密码。</li><li>启动项目后在浏览器打开：<a href="http://localhost:8081/">http://localhost:8081</a></li></ul><h3 id="Actuator-Client"><a href="#Actuator-Client" class="headerlink" title="Actuator Client"></a>Actuator Client</h3><ul><li>在 actuator 项目中添加 Admin (Client) 依赖</li><li>在配置文件中配置连接的 server 地址。<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://localhost:8081</span></span><br></pre></td></tr></table></figure></li><li>将 HealthConfig 类设置成正常返回。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HealthConfig</span> <span class="keyword">implements</span> <span class="title class_">HealthIndicator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Health <span class="title function_">health</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> Health.up().withDetail(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;正常&quot;</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>重新访问 <a href="http://localhost:8081/">http://localhost:8081</a></li><li>就可以看见 actuator-client 配置的详细信息 &#x2F;info。</li></ul><hr/><h2 id="Actuator-邮件报警"><a href="#Actuator-邮件报警" class="headerlink" title="Actuator 邮件报警"></a>Actuator 邮件报警</h2><p>如果服务掉线后，可以及时发送邮件报警</p><ul><li>在 actuator-server 中，添加上 mail，fastjson 依赖。</li><li>在配置文件中配置信息。</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">instance-auth:</span></span><br><span class="line">        <span class="attr">default-user-name:</span> <span class="string">sihai</span></span><br><span class="line">        <span class="attr">default-password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">notify:</span></span><br><span class="line">        <span class="attr">mail:</span></span><br><span class="line">          <span class="attr">from:</span> <span class="number">1075991706</span><span class="string">@qq.com</span></span><br><span class="line">          <span class="attr">to:</span> <span class="number">13169186610</span><span class="string">@163.com</span></span><br><span class="line">          <span class="attr">ignore-changes:</span></span><br><span class="line">  <span class="comment">## 邮件发送信息</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">465</span></span><br><span class="line">    <span class="attr">username:</span> <span class="number">1075991706</span><span class="string">@qq.com</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">    <span class="attr">default-encoding:</span> <span class="string">utf-8</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">socketFactory:</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">javax.net.ssl.SSLSocketFactory</span></span><br></pre></td></tr></table></figure><ul><li>添加一个后端控制台的提示信息<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sihai.actuatorserver.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> de.codecentric.boot.admin.server.domain.entities.Instance;</span><br><span class="line"><span class="keyword">import</span> de.codecentric.boot.admin.server.domain.entities.InstanceRepository;</span><br><span class="line"><span class="keyword">import</span> de.codecentric.boot.admin.server.domain.events.InstanceEvent;</span><br><span class="line"><span class="keyword">import</span> de.codecentric.boot.admin.server.domain.events.InstanceStatusChangedEvent;</span><br><span class="line"><span class="keyword">import</span> de.codecentric.boot.admin.server.notify.AbstractStatusChangeNotifier;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminNotifier</span> <span class="keyword">extends</span> <span class="title class_">AbstractStatusChangeNotifier</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(AdminNotifier.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息模板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">template</span> <span class="operator">=</span> <span class="string">&quot;&lt;&lt;&lt;%s&gt;&gt;&gt; \n 【服务名】: %s(%s) \n 【状态】: %s(%s) \n 【服务ip】: %s \n 【详情】: %s&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">titleAlarm</span> <span class="operator">=</span> <span class="string">&quot;系统告警&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">titleNotice</span> <span class="operator">=</span> <span class="string">&quot;系统通知&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] ignoreChanges = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;UNKNOWN:UP&quot;</span>,<span class="string">&quot;DOWN:UP&quot;</span>,<span class="string">&quot;OFFLINE:UP&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminNotifier</span><span class="params">(InstanceRepository repository)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(repository);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">shouldNotify</span><span class="params">(InstanceEvent event, Instance instance)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(event <span class="keyword">instanceof</span> InstanceStatusChangedEvent)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">InstanceStatusChangedEvent</span> <span class="variable">statusChange</span> <span class="operator">=</span> (InstanceStatusChangedEvent)event;</span><br><span class="line">            <span class="type">String</span> <span class="variable">from</span> <span class="operator">=</span> <span class="built_in">this</span>.getLastStatus(event.getInstance());</span><br><span class="line">            <span class="type">String</span> <span class="variable">to</span> <span class="operator">=</span> statusChange.getStatusInfo().getStatus();</span><br><span class="line">            <span class="keyword">return</span> Arrays.binarySearch(<span class="built_in">this</span>.ignoreChanges, from + <span class="string">&quot;:&quot;</span> + to) &lt; <span class="number">0</span> &amp;&amp; Arrays.binarySearch(<span class="built_in">this</span>.ignoreChanges, <span class="string">&quot;*:&quot;</span> + to) &lt; <span class="number">0</span> &amp;&amp; Arrays.binarySearch(<span class="built_in">this</span>.ignoreChanges, from + <span class="string">&quot;:*&quot;</span>) &lt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Mono&lt;Void&gt; <span class="title function_">doNotify</span><span class="params">(InstanceEvent event, Instance instance)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (event <span class="keyword">instanceof</span> InstanceStatusChangedEvent) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;Instance &#123;&#125; (&#123;&#125;) is &#123;&#125;&quot;</span>, instance.getRegistration().getName(),</span><br><span class="line">                        event.getInstance(),</span><br><span class="line">                        ((InstanceStatusChangedEvent) event).getStatusInfo().getStatus());</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> ((InstanceStatusChangedEvent) event).getStatusInfo().getStatus();</span><br><span class="line">                <span class="type">String</span> <span class="variable">messageText</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">                    <span class="comment">// 健康检查没通过</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;DOWN&quot;</span>:</span><br><span class="line">                        log.info(<span class="string">&quot;发送 健康检查没通过 的通知！&quot;</span>);</span><br><span class="line">                        messageText = String</span><br><span class="line">                                .format(template,titleAlarm, instance.getRegistration().getName(), event.getInstance(),</span><br><span class="line">                                        ((InstanceStatusChangedEvent) event).getStatusInfo().getStatus(), <span class="string">&quot;健康检查没通过通知&quot;</span>,</span><br><span class="line">                                        instance.getRegistration().getServiceUrl(), JSONObject.toJSONString(instance.getStatusInfo().getDetails()));</span><br><span class="line">                        log.info(messageText);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">// 服务离线</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;OFFLINE&quot;</span>:</span><br><span class="line">                        log.info(<span class="string">&quot;发送 服务离线 的通知！&quot;</span>);</span><br><span class="line">                        messageText = String</span><br><span class="line">                                .format(template,titleAlarm, instance.getRegistration().getName(), event.getInstance(),</span><br><span class="line">                                        ((InstanceStatusChangedEvent) event).getStatusInfo().getStatus(), <span class="string">&quot;服务离线通知&quot;</span>,</span><br><span class="line">                                        instance.getRegistration().getServiceUrl(), JSONObject.toJSONString(instance.getStatusInfo().getDetails()));</span><br><span class="line">                        log.info(messageText);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">//服务上线</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;UP&quot;</span>:</span><br><span class="line">                        log.info(<span class="string">&quot;发送 服务上线 的通知！&quot;</span>);</span><br><span class="line">                        messageText = String</span><br><span class="line">                                .format(template,titleNotice, instance.getRegistration().getName(), event.getInstance(),</span><br><span class="line">                                        ((InstanceStatusChangedEvent) event).getStatusInfo().getStatus(), <span class="string">&quot;服务上线通知&quot;</span>,</span><br><span class="line">                                        instance.getRegistration().getServiceUrl(), JSONObject.toJSONString(instance.getStatusInfo().getDetails()));</span><br><span class="line">                        log.info(messageText);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">// 服务未知异常</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;UNKNOWN&quot;</span>:</span><br><span class="line">                        log.info(<span class="string">&quot;发送 服务未知异常 的通知！&quot;</span>);</span><br><span class="line">                        messageText = String</span><br><span class="line">                                .format(template,titleAlarm, instance.getRegistration().getName(), event.getInstance(),</span><br><span class="line">                                        ((InstanceStatusChangedEvent) event).getStatusInfo().getStatus(), <span class="string">&quot;服务未知异常通知&quot;</span>,</span><br><span class="line">                                        instance.getRegistration().getServiceUrl(), JSONObject.toJSONString(instance.getStatusInfo().getDetails()));</span><br><span class="line">                        log.info(messageText);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;Instance &#123;&#125; (&#123;&#125;) &#123;&#125;&quot;</span>, instance.getRegistration().getName(), event.getInstance(),</span><br><span class="line">                        event.getType());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr/><h2 id="Actuator-Admin-nacos-Sentinel"><a href="#Actuator-Admin-nacos-Sentinel" class="headerlink" title="Actuator + Admin + nacos + Sentinel"></a>Actuator + Admin + nacos + Sentinel</h2><h3 id="Sentinel-安装"><a href="#Sentinel-安装" class="headerlink" title="Sentinel 安装"></a>Sentinel 安装</h3><ul><li>使用 Sentinel 把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</li></ul><p>首先下载控制台 jar，这是一个 Spring boot 工程，下载好了之后，直接使用 Spring boot 命令启动即可。</p><p>官方下载地址：<a href="https://github.com/alibaba/Sentinel/releases">https://github.com/alibaba/Sentinel/releases</a></p><p>执行启动命令：<code>nohup java -Dserver.port=9999 -Dproject.name=sentinel-dashboard -jar sentinel-dashboard-2.0.0-alpha-preview.jar >/dev/null &</code></p><p>访问浏览器：<a href="http://localhost:9999/#/dashboard/home">http://localhost:9999/#/dashboard/home</a> ，默认登陆用户名密码 sentinel&#x2F;sentinel。</p><h3 id="Admin-Client"><a href="#Admin-Client" class="headerlink" title="Admin Client"></a>Admin Client</h3><ul><li>创建一个 Spring Boot 模块。</li></ul><h4 id="依赖项"><a href="#依赖项" class="headerlink" title="依赖项"></a>依赖项</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring boot web --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- nacos discovery --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring boot admin client --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring boot security --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- redis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring boot actuator --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- junit5 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- sentinel --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.csp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sentinel-datasource-nacos<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- alibaba nacos config --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>build-info<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>pl.project13.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>git-commit-id-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 端口号</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8093</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment">## 应用程序名称</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-consumer</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="comment">## 自定义用户</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">sihai</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">roles:</span> <span class="string">ADMIN</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="comment">## nacos 访问地址</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line">      <span class="comment">## 开启注册</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">register-enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">sentinel:</span></span><br><span class="line">      <span class="attr">transport:</span></span><br><span class="line">        <span class="comment">## sentinel 控制台地址</span></span><br><span class="line">        <span class="attr">dashboard:</span> <span class="string">localhost:9999</span></span><br><span class="line">        <span class="comment">## sentinel 端口</span></span><br><span class="line">        <span class="attr">port:</span> <span class="number">8819</span></span><br><span class="line">      <span class="attr">log:</span></span><br><span class="line">        <span class="comment">#日志输出地址</span></span><br><span class="line">        <span class="attr">dir:</span> <span class="string">logs/sentinel</span></span><br><span class="line">      <span class="attr">datasource:</span></span><br><span class="line">        <span class="attr">ds:</span></span><br><span class="line">          <span class="attr">nacos:</span></span><br><span class="line">            <span class="attr">data-id:</span> <span class="string">sentinel-rule</span></span><br><span class="line">            <span class="attr">group-id:</span> <span class="string">DEFAULT_GROUP</span></span><br><span class="line">            <span class="attr">rule-type:</span> <span class="string">flow</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="comment">## admin 服务端地址</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">localhost:8091</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">info:</span></span><br><span class="line">    <span class="attr">git:</span></span><br><span class="line">      <span class="comment">## 默认 simple 简略信息</span></span><br><span class="line">      <span class="attr">mode:</span> <span class="string">full</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="comment">## 跨域请求</span></span><br><span class="line">      <span class="attr">cors:</span></span><br><span class="line">        <span class="attr">allowed-origins:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="comment">## 暴露 Actuator 全部可使用端点</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">      <span class="comment">## 修改请求前缀</span></span><br><span class="line">  <span class="comment">#      base-path: /</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="comment">## 显示信息</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">when_authorized</span></span><br><span class="line">      <span class="comment">## 所需角色</span></span><br><span class="line">      <span class="attr">roles:</span> <span class="string">ADMIN</span></span><br><span class="line">      <span class="comment">## 自定义健康指示器</span></span><br><span class="line">      <span class="attr">status:</span></span><br><span class="line">        <span class="attr">order:</span> <span class="string">FATAL,DOWN,OUT_OF_SERVER,UP,UNKNOWN</span></span><br><span class="line">        <span class="comment">## 自定义响应码</span></span><br><span class="line">        <span class="attr">http-mapping:</span></span><br><span class="line">          <span class="attr">FATAL:</span> <span class="number">503</span></span><br><span class="line">    <span class="attr">shutdown:</span></span><br><span class="line">      <span class="comment">## 打开远程暂停服务端点</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">encoding:</span> <span class="string">@project.build.sourceEncoding@</span></span><br><span class="line">    <span class="attr">java:</span></span><br><span class="line">      <span class="attr">source:</span> <span class="string">@java.version@</span></span><br><span class="line">      <span class="attr">target:</span> <span class="string">@java.version@</span></span><br><span class="line">  <span class="attr">author:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">sihai</span></span><br></pre></td></tr></table></figure><h4 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 应用信息配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppInfoConfig</span> <span class="keyword">implements</span> <span class="title class_">InfoContributor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contribute</span><span class="params">(Info.Builder builder)</span> &#123;</span><br><span class="line">        Map&lt;String, String&gt; link = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        link.put(<span class="string">&quot;site&quot;</span>, <span class="string">&quot;https://tsihai.github.io/&quot;</span>);</span><br><span class="line">        link.put(<span class="string">&quot;site-2&quot;</span>, <span class="string">&quot;https://github.com/Tsihai&quot;</span>);</span><br><span class="line">        builder.withDetail(<span class="string">&quot;link&quot;</span>, link);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 健康状态配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HealthConfig</span> <span class="keyword">implements</span> <span class="title class_">HealthIndicator</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Health <span class="title function_">health</span><span class="params">()</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> Health.up().withDetail(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;正常&quot;</span>).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 安全配置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 配置拦截请求，拦截所有端点</span></span><br><span class="line">        http.requestMatcher(EndpointRequest.toAnyEndpoint())</span><br><span class="line">                <span class="comment">// 授权请求</span></span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                <span class="comment">// 设置权限</span></span><br><span class="line">                .anyRequest().hasRole(<span class="string">&quot;ADMIN&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">// 登陆方式</span></span><br><span class="line">                .httpBasic()</span><br><span class="line">                .and()</span><br><span class="line">                <span class="comment">// 禁用 csrf</span></span><br><span class="line">                .csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NacosConsumerApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(NacosConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span>   <span class="comment">// 开启负载均衡</span></span><br><span class="line">    RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://nacos-server/hello&quot;</span>, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Admin-Server"><a href="#Admin-Server" class="headerlink" title="Admin Server"></a>Admin Server</h3><ul><li>创建一个 Spring Boot 模块。</li></ul><h4 id="依赖项-1"><a href="#依赖项-1" class="headerlink" title="依赖项"></a>依赖项</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>Hoxton.SR1<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- nacos --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring boot admin --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--监控--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 邮箱监控 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- json --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8091</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-server</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">instance-auth:</span></span><br><span class="line">        <span class="attr">default-user-name:</span> <span class="string">sihai</span></span><br><span class="line">        <span class="attr">default-password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">notify:</span></span><br><span class="line">        <span class="attr">mail:</span></span><br><span class="line">          <span class="attr">from:</span> <span class="number">1075991706</span><span class="string">@qq.com</span></span><br><span class="line">          <span class="attr">to:</span> <span class="number">13169186610</span><span class="string">@163.com</span></span><br><span class="line">          <span class="attr">ignore-changes:</span></span><br><span class="line">  <span class="comment">## 邮箱监控</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">465</span></span><br><span class="line">    <span class="attr">username:</span> <span class="number">1075991706</span><span class="string">@qq.com</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">iukjuhuybkrpfjcd</span></span><br><span class="line">    <span class="attr">default-encoding:</span> <span class="string">utf-8</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">socketFactory:</span></span><br><span class="line">            <span class="attr">class:</span> <span class="string">javax.net.ssl.SSLSocketFactory</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="string">localhost:8848</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line">      <span class="attr">cors:</span></span><br><span class="line">        <span class="attr">allowed-origins:</span> <span class="string">&#x27;*&#x27;</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">/home/java/admin.log</span></span><br></pre></td></tr></table></figure><h4 id="配置类-1"><a href="#配置类-1" class="headerlink" title="配置类"></a>配置类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sihai.nacosserver.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> de.codecentric.boot.admin.server.domain.entities.Instance;</span><br><span class="line"><span class="keyword">import</span> de.codecentric.boot.admin.server.domain.entities.InstanceRepository;</span><br><span class="line"><span class="keyword">import</span> de.codecentric.boot.admin.server.domain.events.InstanceEvent;</span><br><span class="line"><span class="keyword">import</span> de.codecentric.boot.admin.server.domain.events.InstanceStatusChangedEvent;</span><br><span class="line"><span class="keyword">import</span> de.codecentric.boot.admin.server.notify.AbstractStatusChangeNotifier;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AdminNotifier</span> <span class="keyword">extends</span> <span class="title class_">AbstractStatusChangeNotifier</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(AdminNotifier.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息模板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">template</span> <span class="operator">=</span> <span class="string">&quot;&lt;&lt;&lt;%s&gt;&gt;&gt; \n 【服务名】: %s(%s) \n 【状态】: %s(%s) \n 【服务ip】: %s \n 【详情】: %s&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">titleAlarm</span> <span class="operator">=</span> <span class="string">&quot;系统告警&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">titleNotice</span> <span class="operator">=</span> <span class="string">&quot;系统通知&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] ignoreChanges = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;UNKNOWN:UP&quot;</span>,<span class="string">&quot;DOWN:UP&quot;</span>,<span class="string">&quot;OFFLINE:UP&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AdminNotifier</span><span class="params">(InstanceRepository repository)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(repository);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">boolean</span> <span class="title function_">shouldNotify</span><span class="params">(InstanceEvent event, Instance instance)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(event <span class="keyword">instanceof</span> InstanceStatusChangedEvent)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">InstanceStatusChangedEvent</span> <span class="variable">statusChange</span> <span class="operator">=</span> (InstanceStatusChangedEvent)event;</span><br><span class="line">            <span class="type">String</span> <span class="variable">from</span> <span class="operator">=</span> <span class="built_in">this</span>.getLastStatus(event.getInstance());</span><br><span class="line">            <span class="type">String</span> <span class="variable">to</span> <span class="operator">=</span> statusChange.getStatusInfo().getStatus();</span><br><span class="line">            <span class="keyword">return</span> Arrays.binarySearch(<span class="built_in">this</span>.ignoreChanges, from + <span class="string">&quot;:&quot;</span> + to) &lt; <span class="number">0</span> &amp;&amp; Arrays.binarySearch(<span class="built_in">this</span>.ignoreChanges, <span class="string">&quot;*:&quot;</span> + to) &lt; <span class="number">0</span> &amp;&amp; Arrays.binarySearch(<span class="built_in">this</span>.ignoreChanges, from + <span class="string">&quot;:*&quot;</span>) &lt; <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Mono&lt;Void&gt; <span class="title function_">doNotify</span><span class="params">(InstanceEvent event, Instance instance)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (event <span class="keyword">instanceof</span> InstanceStatusChangedEvent) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;Instance &#123;&#125; (&#123;&#125;) is &#123;&#125;&quot;</span>, instance.getRegistration().getName(),</span><br><span class="line">                        event.getInstance(),</span><br><span class="line">                        ((InstanceStatusChangedEvent) event).getStatusInfo().getStatus());</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> ((InstanceStatusChangedEvent) event).getStatusInfo().getStatus();</span><br><span class="line">                <span class="type">String</span> <span class="variable">messageText</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">                    <span class="comment">// 健康检查没通过</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;DOWN&quot;</span>:</span><br><span class="line">                        log.info(<span class="string">&quot;发送 健康检查没通过 的通知！&quot;</span>);</span><br><span class="line">                        messageText = String</span><br><span class="line">                                .format(template,titleAlarm, instance.getRegistration().getName(), event.getInstance(),</span><br><span class="line">                                        ((InstanceStatusChangedEvent) event).getStatusInfo().getStatus(), <span class="string">&quot;健康检查没通过通知&quot;</span>,</span><br><span class="line">                                        instance.getRegistration().getServiceUrl(), JSONObject.toJSONString(instance.getStatusInfo().getDetails()));</span><br><span class="line">                        log.info(messageText);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">// 服务离线</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;OFFLINE&quot;</span>:</span><br><span class="line">                        log.info(<span class="string">&quot;发送 服务离线 的通知！&quot;</span>);</span><br><span class="line">                        messageText = String</span><br><span class="line">                                .format(template,titleAlarm, instance.getRegistration().getName(), event.getInstance(),</span><br><span class="line">                                        ((InstanceStatusChangedEvent) event).getStatusInfo().getStatus(), <span class="string">&quot;服务离线通知&quot;</span>,</span><br><span class="line">                                        instance.getRegistration().getServiceUrl(), JSONObject.toJSONString(instance.getStatusInfo().getDetails()));</span><br><span class="line">                        log.info(messageText);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">//服务上线</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;UP&quot;</span>:</span><br><span class="line">                        log.info(<span class="string">&quot;发送 服务上线 的通知！&quot;</span>);</span><br><span class="line">                        messageText = String</span><br><span class="line">                                .format(template,titleNotice, instance.getRegistration().getName(), event.getInstance(),</span><br><span class="line">                                        ((InstanceStatusChangedEvent) event).getStatusInfo().getStatus(), <span class="string">&quot;服务上线通知&quot;</span>,</span><br><span class="line">                                        instance.getRegistration().getServiceUrl(), JSONObject.toJSONString(instance.getStatusInfo().getDetails()));</span><br><span class="line">                        log.info(messageText);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="comment">// 服务未知异常</span></span><br><span class="line">                    <span class="keyword">case</span> <span class="string">&quot;UNKNOWN&quot;</span>:</span><br><span class="line">                        log.info(<span class="string">&quot;发送 服务未知异常 的通知！&quot;</span>);</span><br><span class="line">                        messageText = String</span><br><span class="line">                                .format(template,titleAlarm, instance.getRegistration().getName(), event.getInstance(),</span><br><span class="line">                                        ((InstanceStatusChangedEvent) event).getStatusInfo().getStatus(), <span class="string">&quot;服务未知异常通知&quot;</span>,</span><br><span class="line">                                        instance.getRegistration().getServiceUrl(), JSONObject.toJSONString(instance.getStatusInfo().getDetails()));</span><br><span class="line">                        log.info(messageText);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;Instance &#123;&#125; (&#123;&#125;) &#123;&#125;&quot;</span>, instance.getRegistration().getName(), event.getInstance(),</span><br><span class="line">                        event.getType());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ul><li>Nacos 访问地址 <a href="http://localhost:8848/">http://localhost:8848</a></li><li>Sentinel 访问地址 <a href="http://localhost:9999/">http://localhost:9999</a></li><li>Admin 访问地址 <a href="http://localhost:8091/">http://localhost:8091</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Nacos </tag>
            
            <tag> Spring Boot Actuator </tag>
            
            <tag> Security </tag>
            
            <tag> Sentinel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker 远程服务入侵挖矿病毒</title>
      <link href="/2023/06/17/2023.06.17/"/>
      <url>/2023/06/17/2023.06.17/</url>
      
        <content type="html"><![CDATA[<p>登陆服务器的时候，突然发现 cpu 利用率爆表。</p><h2 id="查看后台进程信息"><a href="#查看后台进程信息" class="headerlink" title="查看后台进程信息"></a>查看后台进程信息</h2><p>查看一下进程：</p><pre>top -c</pre><p>发现 &#x2F;tmp&#x2F;kdevtmpfsi 占据了 170% 的 CPU 资源。</p><p>百度一下之后，发现它是一个挖矿病毒。以及它还有一个叫 kinsing 的守护进程:</p><pre>## 查询病毒的PID及其文件路径ps -ef | grep kinsing## 查询病毒的PID及其文件路径ps -ef | grep kdevtmpfsi</pre><hr/><h2 id="隐藏进程侦查"><a href="#隐藏进程侦查" class="headerlink" title="隐藏进程侦查"></a>隐藏进程侦查</h2><p><b>使用 unhide 扫描</b><br>安装：</p><pre>yum -y install unhide</pre><p>暴力扫描隐藏进程：</p><pre>unhide checkbrute</pre><hr/><h2 id="查看文件权限"><a href="#查看文件权限" class="headerlink" title="查看文件权限"></a>查看文件权限</h2><p>使用 lsattr 查看文件权限：</p><pre>lsattr xmrigMiner</pre><h2 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h2><p>使用 chattr 更改文件权限：</p><pre>chattr xmrigMiner</pre><h2 id="删除文件："><a href="#删除文件：" class="headerlink" title="删除文件："></a>删除文件：</h2><pre>rm -rf xmrigMiner</pre><blockquote>chattr 权限 格式： charrt [+ - =] [ 选项 ] 文件或目录名<pre>+   增加权限-   删除权限=   赋予权限</pre>i ： 对文件设置 i 属性，那么不允许对文件进行删除、改名，也不能添加修改数据；对目录设置 i 属性，那么只能修改目录下文件的数据，但不能创建和删除文件<br>a ：对文件设置 a 属性，那么只能在文件中增加数据，但不能删除与修改数据；对目录设置 a 属性，那么只允许在目录中创建与修改文件，不允许删除文件<br>e ：Linux 中绝大多数文件默认拥有 e 属性，表示该文件使用 ext 文件系统进行存储，而且不能使用 chattr -e 取消 e 属性</blockquote><hr/><h2 id="登陆排查"><a href="#登陆排查" class="headerlink" title="登陆排查"></a>登陆排查</h2><p>登录成功的日期、用户名、IP:</p><pre>grep "Accepted " /var/log/secure | awk '{print $1,$2,$3,$9,$11}'</pre><p>登录失败的次数</p><pre>cat /var/log/secure | awk '/Failed/{print $(NF-3)}' | sort | uniq -c | awk '{print $2" = "$1;}'</pre><hr/><h2 id="ssh-私钥排查"><a href="#ssh-私钥排查" class="headerlink" title="ssh 私钥排查"></a>ssh 私钥排查</h2><p>进入 ssh 私钥存放路径</p><pre>cd /root/.ssh</pre><p>列出文件</p><pre>ls</pre><p>修改文件权限</p><pre>chattr -ia authorized_keys</pre><p>删除文件</p><pre>rm -rf authorized_keys</pre><hr/><h2 id="定时任务排查"><a href="#定时任务排查" class="headerlink" title="定时任务排查"></a>定时任务排查</h2><p>查看定时任务</p><pre>crontab -l</pre><p>删除定时任务</p><pre>crontab -r</pre><hr/><h2 id="GScan"><a href="#GScan" class="headerlink" title="GScan"></a>GScan</h2><p>GScan 旨在为安全应急响应人员对 Linux 系统排查时提供便利，实现主机侧 Checklist（检查表） 的自动全面化检测，根据检测结果自动数据聚合，进行黑客攻击路径溯源。</p><p>项目地址：<br><code><a href="https://github.com/grayddq/GScan">https://github.com/grayddq/GScan</a> </code></p><blockquote>1、主机信息获取 <br/>2、系统初始化alias检查<br/>3、文件类安全扫描<br/>3.1、系统重要文件完整行扫描<br/>3.2、系统可执行文件安全扫描<br/>3.3、临时目录文件安全扫描<br/>3.4、用户目录文件扫描<br/>3.5、可疑隐藏文件扫描<br/>4、各用户历史操作类<br/>4.1、境外ip操作类<br/>4.2、反弹shell类<br/>5、进程类安全检测<br/>5.1、CUP和内存使用异常进程排查<br/>5.2、隐藏进程安全扫描<br/>5.3、反弹shell类进程扫描<br/>5.4、恶意进程信息安全扫描<br/>5.5、进程对应可执行文件安全扫描<br/>6、网络类安全检测<br/>6.1、境外IP链接扫描<br/>6.2、恶意特征链接扫描<br/>6.3、网卡混杂模式检测<br/>7、后门类检测<br/>7.1、LD_PRELOAD后门检测<br/>7.2、LD_AOUT_PRELOAD后门检测<br/>7.3、LD_ELF_PRELOAD后门检测<br/>7.4、LD_LIBRARY_PATH后门检测<br/>7.5、ld.so.preload后门检测<br/>7.6、PROMPT_COMMAND后门检测<br/>7.7、Cron后门检测<br/>7.8、Alias后门<br/>7.9、SSH 后门检测<br/>7.10、SSH wrapper 后门检测<br/>7.11、inetd.conf 后门检测<br/>7.12、xinetd.conf 后门检测<br/>7.13、setUID 后门检测<br/>7.14、8种系统启动项后门检测<br/>8、账户类安全排查<br/>8.1、root权限账户检测<br/>8.2、空口令账户检测<br/>8.3、sudoers文件用户权限检测<br/>8.4、查看各账户下登录公钥<br/>8.5、账户密码文件权限检测<br/>9、日志类安全分析<br/>9.1、secure登陆日志<br/>9.2、wtmp登陆日志<br/>9.3、utmp登陆日志<br/>9.4、lastlog登陆日志<br/>10、安全配置类分析<br/>10.1、DNS配置检测<br/>10.2、Iptables防火墙配置检测<br/>10.3、hosts配置检测<br/>11、Rootkit分析<br/>11.1、检查已知rootkit文件类特征<br/>11.2、检查已知rootkit LKM类特征<br/>11.3、检查已知恶意软件类特征检测<br/>12、WebShell类文件扫描<br/>12.1、WebShell类文件扫描<br/></blockquote><h3 id="GScan-使用"><a href="#GScan-使用" class="headerlink" title="GScan 使用"></a>GScan 使用</h3><p>使用 git 命令拉取到服务器进行使用</p><pre>git clone https://github.com/grayddq/GScan.gitu</pre><p>运行命令</p><pre>python GScan.py</pre><hr/><h2 id="检查防火墙"><a href="#检查防火墙" class="headerlink" title="检查防火墙"></a>检查防火墙</h2><p>防火墙开启</p><pre>systemctl start firewalld</pre><p>防火墙关闭</p><pre>systemctl stop firewalld</pre><p>防火墙状态</p><pre>systemctl status firewalld</pre><hr/><h2 id="Docker-容器"><a href="#Docker-容器" class="headerlink" title="Docker 容器"></a>Docker 容器</h2><p>病毒是存在在 Docker 容器中。</p><pre>## 查看容器状态Docker stats## 进入到容器中docker exec -it 68825e3ec789 /bin/bash## 查看容器的进程top -c## 杀死进程kill -9 13786## 检查定时任务crontab -l## 删除定时任务crontab -r## 丢弃来自病毒下载IP的所有数据iptables -I INPUT -s <病毒下载的IP> -j DROP## 丢弃来自定时任务中IP的所有数据iptables -I INPUT -s <定时任务中的IP> -j DROP</pre><h3 id="删除-Docker-中的病毒镜像"><a href="#删除-Docker-中的病毒镜像" class="headerlink" title="删除 Docker 中的病毒镜像"></a>删除 Docker 中的病毒镜像</h3><pre>## 查找 docker 容器docker ps -a## 暂停容器docker stop c5607dd23d6bc5607dd23d6b## 删除容器docker rm c5607dd23d6bc5607dd23d6b## 查找 docker 镜像docker images## 删除 ubuntu 镜像docker rmi 4e5021d210f6## 检验是否删除docker images## 重启 Dockersystemctl restart docker.servicew</pre>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql8 Linux 安装</title>
      <link href="/2023/05/23/2023.05.23/"/>
      <url>/2023/05/23/2023.05.23/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux-卸载-Mysql"><a href="#Linux-卸载-Mysql" class="headerlink" title="Linux 卸载 Mysql"></a>Linux 卸载 Mysql</h2><h3 id="首先查询是否安装-Mysql"><a href="#首先查询是否安装-Mysql" class="headerlink" title="首先查询是否安装 Mysql"></a>首先查询是否安装 Mysql</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep -i mysql</span><br></pre></td></tr></table></figure><p><b>如果查询出有别的版本的话，使用命令将其删除。</b></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e mysql-community-common-8.0.31-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><hr/><h3 id="关闭-Mysql-服务"><a href="#关闭-Mysql-服务" class="headerlink" title="关闭 Mysql 服务"></a>关闭 Mysql 服务</h3><p>查看 MySQL 服务运行状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure><p>关闭 Mysql 服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop mysqld</span><br></pre></td></tr></table></figure><p>使用查找命令查看 Mysql 对应文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name mysql</span><br></pre></td></tr></table></figure><p><b>卸载并删除 Mysql 安装的全部组键服务:</b></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /var/lib/mysql/mysql</span><br></pre></td></tr></table></figure><p>卸载全部组件，清空 Mysql 相关的的所有目录以及文件。</p><hr/><h2 id="Linux-安装-Mysql"><a href="#Linux-安装-Mysql" class="headerlink" title="Linux 安装 Mysql"></a>Linux 安装 Mysql</h2><h3 id="首先下载-Mysql-的-rpm-包"><a href="#首先下载-Mysql-的-rpm-包" class="headerlink" title="首先下载 Mysql 的 rpm 包"></a>首先下载 Mysql 的 rpm 包</h3><p>官方下载地址：</p><pre>https://downloads.mysql.com/archives/community/</pre><p>选择下图中的版本：<br><img src="/../img/mysql/img_3.png" alt="img_3.png"><br>下载如下图中的四个包：<br><img src="/../img/mysql/img_1.png" alt="img_1.png"><br><img src="/../img/mysql/img_2.png" alt="img_2.png"><br>下载完成后你的本地就会拥有下面几个包：</p><blockquote>mysql-community-libs-8.0.31-1.el7.x86_64.rpm <br/>mysql-community-common-8.0.31-1.el7.x86_64.rpm <br/>mysql-community-client-8.0.31-1.el7.x86_64.rpm <br/>mysql-community-server-8.0.31-1.el7.x86_64.rpm</blockquote><h3 id="上传包到服务器"><a href="#上传包到服务器" class="headerlink" title="上传包到服务器"></a>上传包到服务器</h3><p>创建一个文件夹存储我们上传的包：</p><pre>mkdir /opt/mysql</pre><h3 id="检查是否自带-mariadb-数据库"><a href="#检查是否自带-mariadb-数据库" class="headerlink" title="检查是否自带 mariadb 数据库"></a>检查是否自带 mariadb 数据库</h3><pre>rpm -qa|grep mariadb</pre><p>删除 mariadb 数据库：</p><pre>rpm -e --nodeps mariadb-libs-5.5.68-1.el7.x86_64  //此处为你的版本号</pre><h3 id="安装-Mysql"><a href="#安装-Mysql" class="headerlink" title="安装 Mysql"></a>安装 Mysql</h3><p>进入 &#x2F;opt&#x2F;mysql 目录：</p><pre>cd /opt/mysql</pre><p>首先按照顺序使用 rpm -ivh 命令安装三个 rpm 包：</p><pre>rpm -ivh mysql-community-common-8.0.31-1.el7.x86_64.rpmrpm -ivh mysql-community-client-8.0.31-1.el7.x86_64.rpmrpm -ivh mysql-community-libs-8.0.31-1.el7.x86_64.rpm</pre><p>按照上述代码顺序，依次执行！！</p><p>每次执行后，如果看到了进度标志，则安装成功。</p><p>最后，需要再一次确认是否成功安装了三个 rpm 包:</p><pre>rpm -qa | grep mysql</pre><h3 id="安装-mysql-community-server"><a href="#安装-mysql-community-server" class="headerlink" title="安装 mysql-community-server"></a>安装 mysql-community-server</h3><pre>rpm -ivh mysql-community-server-8.0.31-1.el7.x86_64.rpm --force --nodeps</pre><hr/><h2 id="启动-Mysql"><a href="#启动-Mysql" class="headerlink" title="启动 Mysql"></a>启动 Mysql</h2><p>验证 Mysql 版本</p><pre>mysql --version</pre><p>启动 Mysql</p><pre>systemctl start mysqld</pre><hr/><h2 id="获取-Mysql-自动生成临时密码"><a href="#获取-Mysql-自动生成临时密码" class="headerlink" title="获取 Mysql 自动生成临时密码"></a>获取 Mysql 自动生成临时密码</h2><p><b>注意：此命令是 rpm 方式安装 Mysql 才有的【mysqld.log】文件。</b></p><pre>grep 'temporary password' /var/log/mysqld.log</pre><h2 id="登陆-Mysql-以及修改密码"><a href="#登陆-Mysql-以及修改密码" class="headerlink" title="登陆 Mysql 以及修改密码"></a>登陆 Mysql 以及修改密码</h2><p>登陆命令:</p><pre>mysql -u root -p</pre><p>看到所示的 password 标志，输入刚刚临时生成的密码（输入密码时不可见）。</p><p>使用数据库:</p><pre>use mysql;</pre><p>查看当下所允许的访问地址:</p><pre>select host, user plugin from user;</pre><p>修改所允许的访问地址，使得可以从其他主机登录：</p><pre>update user set host='%' where user='root';</pre><p>查看密码加密方式:</p><pre>select host, user,  plugin from user;</pre><p>设置密码等级变低，方便我们设置简单密码：</p><pre>set global validate_password.policy=0;</pre><p>设置密码最小长度:</p><pre>set global validate_password.length=4;</pre><p>修改密码：</p><pre>alter user 'root'@'localhost' identified with mysql_native_password by 'rootroot';</pre>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nacos</title>
      <link href="/2023/05/19/2023.05.19/"/>
      <url>/2023/05/19/2023.05.19/</url>
      
        <content type="html"><![CDATA[<h2 id="Nacos-简介"><a href="#Nacos-简介" class="headerlink" title="Nacos 简介"></a>Nacos 简介</h2><p>nacos 是 spring cloud alibaba 生态中非常重要的一个组件，作用：</p><ul><li>注册与发现中心</li><li>配置中心</li><li>服务管理</li></ul><p><b>基本特性：</b></p><ul><li>服务发现</li><li>动态配置</li><li>动态 DNS 服务</li><li>服务及元数据管理</li></ul><h3 id="cap-理论"><a href="#cap-理论" class="headerlink" title="cap 理论"></a>cap 理论</h3><p>在分布式系统中一致性 (consistency)，可用性 (availability)，分区容错性 (partition tolerance) 三者不可兼得</p><ul><li>C (consistency): 一致性，同一时刻的同一请求的实例返回结果相同，属于强一致性性，也就是说，在集群环境中，对外提供的服务信息是完全一致的，但是在效率上面可能会有一定的损耗；</li><li>A (availability): 可用性，所有实例的读写请求在一定的时间内可以得到正确的响应，它是弱一致性，可能在极短的时间内，不同实例获取到的信息是不一致的，但是服务可用并且最终数据是一致的；</li><li>P (Partition tolerance): 分区容错性，在网络异常的情况下，仍旧能够提供正常的响应，这是在微服务系统中必须要保证的；</li></ul><p>因为 P 是分布式服务中必须要保证的，那么现在就是 CP 和 AP 的组合。</p><p>nacos 在启动时，默认是 AP 模式，可以通过以下指令将 nacos 变为 CP 模式，在我们经常使用的微服务中，我们是选择使用 AP 模式的，此时的所有实例都属于临时实例。临时实例和持久实例最显著的区别就是在健康检查发现服务有问题时，持久实例被标注为不健康，而临时实例会直接剔除。<br><code>curl -X PUT 'IP:8848/nacos/v1/ns/operator/switches?entry=serverMode&value=CP'</code></p><hr/><h2 id="Nacos-安装"><a href="#Nacos-安装" class="headerlink" title="Nacos 安装"></a>Nacos 安装</h2><p>在 Linux 环境下搭建 Nacos：</p><p><b>注意：系统一定要配置好 jdk, 可以测试一下 java 和 javac 两个命令是否存在。</b></p><p>nacos 安装包地址: <a href="https://github.com/alibaba/nacos/releases/download/1.4.1/nacos-server-1.4.1.tar.gz">https://github.com/alibaba/nacos/releases/download/1.4.1/nacos-server-1.4.1.tar.gz</a></p><ol><li>下载到本地之后，上传到 Linux 上。 </li><li>进入压缩包所在的文件夹。 </li><li>把文件解压到 &#x2F;user&#x2F;local 目录下: tar -zxvf nacos-server-1.4.1.tar.gz -C &#x2F;usr&#x2F;local </li><li>进入 nacos 的 bin 包: cd &#x2F;usr&#x2F;local&#x2F;nacos&#x2F;bin </li><li>非集群模式启动: .&#x2F;startup.sh -m standalone </li><li>nacos 关闭命令: .&#x2F;shutdown.sh</li></ol><h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><p>需要修改配置文件： <code>vim /usr/local/nacos/conf/application.properties</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 使用数据库类型</span></span><br><span class="line"><span class="attr">spring.datasource.platform</span>=<span class="string">mysql</span></span><br><span class="line"><span class="comment">## 数据库数量</span></span><br><span class="line"><span class="attr">db.num</span>=<span class="string">1</span></span><br><span class="line"><span class="comment">## 数据库连接地址</span></span><br><span class="line"><span class="attr">db.url.0</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/nacos?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useUnicode=true&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line"><span class="comment">## 数据库用户名</span></span><br><span class="line"><span class="attr">db.user.0</span>=<span class="string">root</span></span><br><span class="line"><span class="comment">## 数据库密码</span></span><br><span class="line"><span class="attr">db.password.0</span>=<span class="string">rootroot</span></span><br></pre></td></tr></table></figure><h3 id="数据库初始化"><a href="#数据库初始化" class="headerlink" title="数据库初始化"></a>数据库初始化</h3><p>创建 nacos 数据库并导入 sql：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 1999-2018 Alibaba Group Holding Ltd.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `c_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_use` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `effect` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_schema` text,</span><br><span class="line">  `encrypted_data_key` text <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;秘钥&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_aggr   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_aggr` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `datum_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;datum_id&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;增加租户字段&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_beta   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_beta` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `beta_ips` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;betaIps&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `encrypted_data_key` text <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;秘钥&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_beta&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_info_tag   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_info_tag` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tag_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_tag&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = config_tags_relation   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `config_tags_relation` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `tag_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_name&#x27;</span>,</span><br><span class="line">  `tag_type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_type&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_tag_relation&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = group_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `group_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;集群、各Group容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = his_config_info   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `his_config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `src_user` text,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `op_type` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `encrypted_data_key` text <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;秘钥&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  KEY `idx_gmt_create` (`gmt_create`),</span><br><span class="line">  KEY `idx_gmt_modified` (`gmt_modified`),</span><br><span class="line">  KEY `idx_did` (`data_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;多租户改造&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="comment">/*   数据库全名 = nacos_config   */</span></span><br><span class="line"><span class="comment">/*   表名称 = tenant_capacity   */</span></span><br><span class="line"><span class="comment">/******************************************/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Tenant ID&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span>(<span class="number">10</span>) unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;租户容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tenant_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `kp` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;kp&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tenant_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">default</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_name&#x27;</span>,</span><br><span class="line">  `tenant_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tenant_desc&#x27;</span>,</span><br><span class="line">  `create_source` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;create_source&#x27;</span>,</span><br><span class="line">  `gmt_create` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;tenant_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `users` (</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY,</span><br><span class="line">`password` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`enabled` <span class="type">boolean</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `roles` (</span><br><span class="line">`username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">UNIQUE</span> INDEX `idx_user_role` (`username` <span class="keyword">ASC</span>, `role` <span class="keyword">ASC</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `permissions` (</span><br><span class="line">    `role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `resource` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `action` <span class="type">varchar</span>(<span class="number">8</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">UNIQUE</span> INDEX `uk_role_permission` (`role`,`resource`,`action`) <span class="keyword">USING</span> BTREE</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> users (username, password, enabled) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="literal">TRUE</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> roles (username, role) <span class="keyword">VALUES</span> (<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="启动-nacos"><a href="#启动-nacos" class="headerlink" title="启动 nacos"></a>启动 nacos</h3><p>浏览器访问：<a href="http://localhost:8848/nacos">http://localhost:8848/nacos</a> ，默认用户名 &#x2F; 密码为： nacos&#x2F;nacos ，如果可以访问启动页面的话，证明 nacos 安装成功。</p><hr/><h2 id="nacos-配置中心"><a href="#nacos-配置中心" class="headerlink" title="nacos 配置中心"></a>nacos 配置中心</h2><p>nacos 配置中心类似于 Spring Cloud Config。</p><ul><li>首先在服务端配置：配置管理 -&gt; 配置列表 -&gt; +</li><li>这里主要配置三个东西：DataID、Group 以及需要配置的内容。<br>格式：<code>$&#123;prefix&#125;-$&#123;spring.profile.active&#125;.$&#123;file-extension&#125;</code></li></ul><blockquote>- ${prefix}： 默认为 spring.application.name 的值 <br/>- ${spring.profile.active}： 表示项目当前所处的环境 <br/>- ${file-extension}： 表示配置文件的扩展名</blockquote><ol><li>配置完成后，新建 Spring Boot 项目，添加 Nacos 依赖。 </li><li>在 resources 下配置 bootstrap.properties 文件。 </li><li>创建一个 HelloController 进行测试，加入 @RefreshScope 进行动态刷新。 </li><li>可以直接在配置列表中修改配置文件，然后刷新查看效果。</li></ol><hr/><h2 id="nacos-注册中心"><a href="#nacos-注册中心" class="headerlink" title="nacos 注册中心"></a>nacos 注册中心</h2><ul><li>服务注册：服务实例将自身服务信息注册到注册中心</li><li>服务发现：服务实例通过注册中心，获取到注册到其中的服务实例的信息，通过这些信息去请求它们提供的服务</li><li>服务剔除：服务注册中心将出问题的服务自动剔除到可用列表之外，使其不会被调用到</li></ul><p>使用 Nacos 做注册中心的话，可以代替 Eureka。</p><h3 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h3><p>注册进入 nacos-server，对外暴露服务</p><ol><li>首先创建 Spring boot 项目，添加好依赖。 </li><li>配置一下 application.properties。 </li><li>创建一个测试接口 HelloController。 </li><li>然后打包项目，启动两个实例模拟集群。</li></ol><h3 id="服务消费者"><a href="#服务消费者" class="headerlink" title="服务消费者"></a>服务消费者</h3><p>注册进入 nacos-server，调用 nacos-server01 的服务</p><ol><li>创建一个 consumer (nacos-server02)，配置基本与 nacos-server01 一致。 </li><li>配置一下 application.yml 文件。 </li><li>在启动类中添加 restTemplate，同时开启负载均衡。</li><li>创建一个接口 HelloController，去请求 nacos 中的 nacos-server01 中的实例。 </li><li>访问浏览器: <a href="http://localhost:8093/hello">http://localhost:8093/hello</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Cloud Alibaba </tag>
            
            <tag> Nacos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Alibaba</title>
      <link href="/2023/05/03/2023.05.03/"/>
      <url>/2023/05/03/2023.05.03/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Cloud-Alibaba-介绍"><a href="#Spring-Cloud-Alibaba-介绍" class="headerlink" title="Spring Cloud Alibaba 介绍"></a>Spring Cloud Alibaba 介绍</h2><p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服 务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。</p><p>依托 Spring Cloud Alibaba ，您只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接 入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。</p><p><b>Spring Cloud Alibaba 优势：</b></p><ul><li>有中文文档</li><li>没有另起炉灶，可以更方便的集成到现有的项目中</li><li>阿里本身在高并发、高性能上面的经验，使我们有理由相信这些组件足够的可靠</li></ul><p>spring cloud 中的几乎所有的组件都使用 Netflix 公司的产品，然后在其基础上做了一层封装。然而 Netflix 的服务发现组件 Eureka 已经停止更新，在使用过程中也存在着细小的问题；由此他的替代产品，也就是 spring cloud alibaba，目前正处于蓬勃发展的态式。</p><hr/><h2 id="Spring-Cloud-Alibaba-主要功能"><a href="#Spring-Cloud-Alibaba-主要功能" class="headerlink" title="Spring Cloud Alibaba 主要功能"></a>Spring Cloud Alibaba 主要功能</h2><ul><li>服务限流降级：默认支持 WebServlet、WebFlux， OpenFeign、RestTemplate、Spring Cloud Gateway， Zuul， Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</li><li>服务注册与发现：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。</li><li>分布式配置管理：支持分布式系统中的外部化配置，配置更改时自动刷新。</li><li>消息驱动能力：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。</li><li>分布式事务：使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题。</li><li>阿里云对象存储：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li><li>分布式任务调度：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有 Worker（schedulerx-client）上执行。</li><li>阿里云短信服务：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</li></ul><hr/><h2 id="Spring-Cloud-Alibaba-组件"><a href="#Spring-Cloud-Alibaba-组件" class="headerlink" title="Spring Cloud Alibaba 组件"></a>Spring Cloud Alibaba 组件</h2><ul><li>Sentinel ：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳 定性。</li><li>Nacos ：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</li><li>RocketMQ ：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠 的消息发布与订阅服务。</li><li>Dubbo ： Apache Dubbo™ 是一款高性能 Java RPC 框架。</li><li>Seata ：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</li><li>Alibaba Cloud ACM ：一款在分布式架构环境中对应用配置进行集中管理和推送的应用配置中心 产品。</li><li>Alibaba Cloud OSS : 阿里云对象存储服务（ Object Storage Service ，简称 OSS ），是阿里云提 供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li><li>Alibaba Cloud SchedulerX : 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精 准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</li><li>Alibaba Cloud SMS : 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速 搭建客户触达通道。</li></ul><hr/><h2 id="Nacos-简介"><a href="#Nacos-简介" class="headerlink" title="Nacos 简介"></a>Nacos 简介</h2><p>nacos 是 spring cloud alibaba 生态中非常重要的一个组件，作用：</p><ul><li>注册与发现中心</li><li>配置中心</li><li>服务管理</li></ul><p><b>基本特性：</b></p><ul><li>服务发现</li><li>动态配置</li><li>动态 DNS 服务</li><li>服务及元数据管理</li></ul><h3 id="cap-理论"><a href="#cap-理论" class="headerlink" title="cap 理论"></a>cap 理论</h3><p>在分布式系统中一致性 (consistency)，可用性 (availability)，分区容错性 (partition tolerance) 三者不可兼得</p><ul><li>C (consistency): 一致性，同一时刻的同一请求的实例返回结果相同，属于强一致性性，也就是说，在集群环境中，对外提供的服务信息是完全一致的，但是在效率上面可能会有一定的损耗；</li><li>A (availability): 可用性，所有实例的读写请求在一定的时间内可以得到正确的响应，它是弱一致性，可能在极短的时间内，不同实例获取到的信息是不一致的，但是服务可用并且最终数据是一致的；</li><li>P (Partition tolerance): 分区容错性，在网络异常的情况下，仍旧能够提供正常的响应，这是在微服务系统中必须要保证的；</li></ul><p>因为 P 是分布式服务中必须要保证的，那么现在就是 CP 和 AP 的组合。</p><p>nacos 在启动时，默认是 AP 模式，可以通过以下指令将 nacos 变为 CP 模式，在我们经常使用的微服务中，我们是选择使用 AP 模式的，此时的所有实例都属于临时实例。临时实例和持久实例最显著的区别就是在健康检查发现服务有问题时，持久实例被标注为不健康，而临时实例会直接剔除。<br><code>curl -X PUT 'IP:8848/nacos/v1/ns/operator/switches?entry=serverMode&value=CP'</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> Nanos </tag>
            
            <tag> Spring Cloud Alibaba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Stream</title>
      <link href="/2023/04/23/2023.04.23/"/>
      <url>/2023/04/23/2023.04.23/</url>
      
        <content type="html"><![CDATA[<h2 id="Spring-Cloud-Stream-概念"><a href="#Spring-Cloud-Stream-概念" class="headerlink" title="Spring Cloud Stream 概念"></a>Spring Cloud Stream 概念</h2><p>Spring Cloud Stream 作为用来构建消息驱动的微服务。</p><p>Spring Cloud Stream 中，提供了一个微服务和消息中间件之间的一个粘合剂，这个粘合剂叫做 Binder，Binder 负责与消息中间件进行交互。而我们开发者则通过 inputs 或者 outputs 这样的消息通道与 Binder 进行交互。</p><hr/><h2 id="默认消息通道：Hello，stream。"><a href="#默认消息通道：Hello，stream。" class="headerlink" title="默认消息通道：Hello，stream。"></a>默认消息通道：Hello，stream。</h2><ol><li>首先创建一个 Spring Cloud Stream 项目，在其中添加三个依赖：web、rabbitmq、cloud stream。 </li><li>项目创建成功后，添加 RabbitMQ 的基本配置信息。 </li><li>接下来，创建一个简单的消息接收器 MsgReceiver。 </li><li>单启动 stream 项目，然后在 rabbitmq 后台管理页面发送一条测试消息。 <pre><a href="http://localhost:15672/">http://localhost:15672/</a> </pre> <b>Queues -&gt; Queue input.anonymous.cgUOBnM6Qc-Ek7paO3zPKA -&gt; Publish message -&gt; Payload -&gt; published Message。</b></li><li>后台会返回信息：Received:hello,sihai。</li></ol><hr/><h2 id="自定义消息通道"><a href="#自定义消息通道" class="headerlink" title="自定义消息通道"></a>自定义消息通道</h2><ol><li>首先创建一个名为 MyChannel 的接口，注意：从 F 版开始，默认使用通道的名称作为实例命令，所以现在这里的两个消息通道的名称不可以一致 (在早起版本中可以相同)，这样的话，为了能够正常的收发消息，需要我们做一些额外的配置。 </li><li>因为现在这两个输入输出通道名称不一样，为了使消息输入输出通道对接上，所以我们需要在 application.yml 中配置。 </li><li>自定义一个消息接收器，用来接收自己的消息通道里的消息。 </li><li>定义一个 HelloController 作为测试。 </li><li>最后启动项目，访问一下 “<a href="http://localhost:8080/hello&quot;">http://localhost:8080/hello&quot;</a> ，查看一下后台是否有返回消息。</li></ol><hr/><h2 id="Spring-Cloud-Stream-消息分组"><a href="#Spring-Cloud-Stream-消息分组" class="headerlink" title="Spring Cloud Stream 消息分组"></a>Spring Cloud Stream 消息分组</h2><p>默认情况下，如果消费者是一个集群的话，那么此时一条消息会被多次消费。那么我们可以通过消息分组来解决这个问题。</p><ol><li>在 application.yml 中配置信息分组，分组之后，即使使用了集群，消息也只会被消费一次。 </li><li>我们可以将 stream 项目打包，同时启动多个实例来模拟集群，可以发现，在集群下，消息也只会被一个实例消费，至于是哪一个这个不可控，因为暂时配置了一个分组。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> Nanos </tag>
            
            <tag> Spring Cloud Stream </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Config</title>
      <link href="/2023/04/12/2023.04.12/"/>
      <url>/2023/04/12/2023.04.12/</url>
      
        <content type="html"><![CDATA[<h2 id="分布式配置中心解决方案"><a href="#分布式配置中心解决方案" class="headerlink" title="分布式配置中心解决方案"></a>分布式配置中心解决方案</h2><p>国内:</p><ul><li>360: QConf </li><li>淘宝：diamond </li><li>百度：disconf</li></ul><hr/><p>国外:</p><ul><li>Apache Commons Configuration </li><li>owner </li><li>cfg4j</li></ul><p><b>但是都不如 Spring Cloud Config 强大，因为它与 Spring 家族融合最好。</b></p><hr/><h2 id="Spring-Cloud-Config-简介"><a href="#Spring-Cloud-Config-简介" class="headerlink" title="Spring Cloud Config 简介"></a>Spring Cloud Config 简介</h2><p>Spring Cloud Config 是一个分布式系统配置管理的解决方案。它包含了 Client 和 Server。配置文件放在 Server 端，通过接口的形式提供给 Client。</p><p>Spring Cloud Config 主要功能：</p><ul><li>集中管理各个环境、各个微服务的配置文件 </li><li>提供服务端和客户端的支持 </li><li>配置文件修改后，可以快速生效 </li><li>配置文件通过 Git&#x2F;SVn 进行管理，天然支持版本回退功能 </li><li>支持高并发查询、同时支持多种开发语言</li></ul><hr/><h2 id="Spring-Cloud-Config-学习"><a href="#Spring-Cloud-Config-学习" class="headerlink" title="Spring Cloud Config 学习"></a>Spring Cloud Config 学习</h2><h3 id="Spring-Cloud-Config-准备工作"><a href="#Spring-Cloud-Config-准备工作" class="headerlink" title="Spring Cloud Config 准备工作"></a>Spring Cloud Config 准备工作</h3><p>准备工作主要是给 Github 上提交数据。</p><ol><li>首先在本地创建好相应的配置文件，我们在本地新建了一个 configRepo 文件夹，里面的单个文件夹代表一个服微务，服务文件夹里面是测试上传的 .properties 文件。 </li><li>提交到 Github 上</li></ol><h3 id="ConfigServer-搭建"><a href="#ConfigServer-搭建" class="headerlink" title="ConfigServer 搭建"></a>ConfigServer 搭建</h3><p>ConfigServer 从 GitHub 上加载数据的配置文件，加载到配置文件之后，以接口的形式提供给 ConfigClient。</p><ol><li>首先创建一个 ConfigServer 工程，创建时添加 ConfigServer 依赖。 </li><li>在启动类上添加 @EnableConfigServer 注解，开启配置服务器功能。 </li><li>配置 application.yml，配置仓库的基本信息。 </li><li>访问测试： <a href="http://localhost:8081/client1/dev/main">http://localhost:8081/client1/dev/main</a> 或者 <a href="http://localhost:8081/client1-dev.yml">http://localhost:8081/client1-dev.yml</a> 或者 <a href="http://localhost:8081/client1-dev.properties">http://localhost:8081/client1-dev.properties</a> ，控制台中会显示，在 github 中会克隆一份文件到本地的临时目录中。 </li><li>启动项目后，就可以访问配置文件了。</li></ol><p><b>访问地址有规则：</b></p><ul><li>&#x2F;{application}&#x2F;{profile}&#x2F;[{label}]</li><li>&#x2F;{application}-{profile}.yml</li><li>&#x2F;{application}-{profile}.properties</li><li>&#x2F;{label}&#x2F;{application}-{profile}.yml</li><li>&#x2F;{label}&#x2F;{application}-{profile}.properties</li></ul><blockquote>application 表示配置文件名<br/>profile 表示配置文件 profile，例如 dev、test、prod<br/>label 表示 git 分支，参数可选，默认是 master</blockquote><p>接下来可以修改配置文件，并且重新提交到 Github，此时，刷新 ConfigServer 接口，就可以及时看到最新的配置内容。</p><hr/><h3 id="ConfigClient-搭建"><a href="#ConfigClient-搭建" class="headerlink" title="ConfigClient 搭建"></a>ConfigClient 搭建</h3><ul><li>首先创建一个 spring boot 项目，添加 ConfigClient 依赖。</li><li>创建成功后，在 resources 目录下，添加 bootstrap.yml 配置文件。</li><li>配置 bootstrap.yml。</li><li>接下来创建一个 HelloController 进行测试。</li></ul><hr/><h3 id="ConfigServer-简单配置"><a href="#ConfigServer-简单配置" class="headerlink" title="ConfigServer 简单配置"></a>ConfigServer 简单配置</h3><p>使用占位符灵活控制查询目录：</p><ul><li>修改 config-server 配置文件，将写死的 client1 改为 {application}。这里的 {application} 占位符，表示链接上来的 client1 的 spring.application.name 属性的值。</li><li>可以使用 {profile} 表示 client 的 spring.cloud.config.profile，也可以使用 {label} 表示 client 的 spring.cloud.config.label</li></ul><p>虽然在实际开发中，配置文件一般都是放在 git 仓库中，但是 config-server 也支持将配置文件放在 classpath 下。<b>(仅作为了解，实际开发不推荐)</b></p><ul><li>将配置好的文件复制到 resources 目录下。</li><li>在 application.yml 下添加配置 spring.profiles.active&#x3D;native，表示让 config-server 从 classpath 下查找配置，而不是去 Git 仓库上查找。</li><li>随便修改一下配置文件，然后重启 config-client、config-server 服务，重新访问测试接口返回。</li></ul><hr/><h3 id="Config-配置文件加密和解密"><a href="#Config-配置文件加密和解密" class="headerlink" title="Config 配置文件加密和解密"></a>Config 配置文件加密和解密</h3><h4 id="常见的加密方案"><a href="#常见的加密方案" class="headerlink" title="常见的加密方案"></a>常见的加密方案</h4><h5 id="不可逆加密"><a href="#不可逆加密" class="headerlink" title="不可逆加密"></a>不可逆加密</h5><p>不可逆加密就是理论上无法根据加密后的密文推算出明文，像加密的框架 Shiro（MD5、SHA） 、Spring Security 都是采用这种方式，一般使用在密码加密上，常见的算法：</p><ul><li>MD5 消息摘要算法</li><li>SHA 安全散列算法</li></ul><hr/><h5 id="可逆加密"><a href="#可逆加密" class="headerlink" title="可逆加密"></a>可逆加密</h5><p>可逆加密就是可以根据加密后的密文推断出明文的加密方式，可逆加密一般又分为两种：</p><p><b>对称加密</b><br>对称加密指的是加密的密钥和解密的密钥是一样的，常见的算法并随顺序强度逐渐升级：</p><ul><li>des</li><li>3des</li><li>aes</li></ul><p>首先下载不限长度的 JCE：<a href="https://www.oracle.com/java/technologies/javase-jce8-downloads.html">https://www.oracle.com/java/technologies/javase-jce8-downloads.html</a> <br/><br>macOS 中 Java 安装包地址：&#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk1.8.0_361.jdk&#x2F;Contents&#x2F;Home&#x2F;jre&#x2F;lib&#x2F;security&#x2F;policy</p><ul><li>将两个.jar 包复制到 jre 目录下。</li><li>然后在 config-server&#x2F;resources 目录下，添加 bootstrap.yml 配置文件，并且配置密钥。</li><li>启动 config-server 后，访问 <a href="http://localhost:8081/encrypt/status">http://localhost:8081/encrypt/status</a> , 查看密钥配置是否成功，返回 200 即为成功。</li><li>然后使用测试工具 Apifox 中 POST 请求 <a href="http://localhost:8081/encrypt">http://localhost:8081/encrypt</a> ，这个接口请求的方式是 post，请求的 body 应该以 json 的形式写到 raw 里面，可以对一段明文进行加密，把加密后的明文存储到 Git 仓库。</li><li>存储时候注意需要在密文前添加 {cipher} 前缀，表示这一段数据是密文，而不是一段普通的字符串。</li></ul><p><b>非对称加密</b><br>非对称加密指的是加密的密钥和解密的密钥不一样，加密的称之为公钥，可以告诉任何人，解密的称之为私钥，只能自己知道，比如 Github 的验证、支付宝的支付开发，一对多的场景一般都使用用非对称加密。常见的算法：</p><ul><li>RSA</li></ul><blockquote>1. 非对称加密我们首先需要生成一个密钥对。 <br/>2. 在命令行执行命令，生成 keystore：keytool -genkeypair -alias "config-server" -keyalg RSA -keystore "/Users/sihai/Object/Spring Cloud/Eureka/config-server.keystore"3. 命令执行完成后，拷贝生成的 keystore 文件到 config-server 的 resources 目录下。 <br/>4. 然后在 config-server 的 bootstrap.yml 中添加非对称加密配置。 <br/>5. 注意，还需要在 pom.xml 的 build 节点中，添加配置，防止 keystore 被过滤掉。 <br/>6. 启动 config-server 后，访问 http://localhost:8081/encrypt/status , 查看密钥配置是否成功，返回 200 即为成功。 <br/>7. 然后使用测试工具 Apifox 中 POST 请求 http://localhost:8081/encrypt ，这个接口请求的方式是 post，请求的 body 应该以 json 的形式写到 raw 里面，可以对一段明文进行加密，把加密后的明文存储到 Git 仓库。 <br/>8. 存储时候注意需要在密文前添加 {cipher} 前缀，表示这一段数据是密文，而不是一段普通的字符串。</blockquote><hr/><h2 id="configServer-安全管理"><a href="#configServer-安全管理" class="headerlink" title="configServer 安全管理"></a>configServer 安全管理</h2><p>防止用户可以直接访问 config-server 看到配置文件内容，我们可以用 spring security 来保护 config-server 接口。</p><ol><li>既然我们需要使用 spring security，那么就需要先在 config-server 中添加其依赖。只要添加了依赖，你的接口就已经会被保护。</li><li>由于 security 的用户名密码不好记，所以我们可以分别在 config-server、config-client 配置文件中自定义，固定用户名密码。</li></ol><hr/><h2 id="Config-配置服务化"><a href="#Config-配置服务化" class="headerlink" title="Config 配置服务化"></a>Config 配置服务化</h2><p>前面的配置都是直接在 config-client 中写死了 config-server 的地址，我们需要注册到 eureka 中，相互调用地址。</p><ul><li>启动 Eureka。</li><li>在 client、server 中添加 Eureka 依赖。</li><li>在 application.yml 配置文件中配置注册信息，为了 config-client 不再直接写死 config-server 的地址，同时注释掉 client 中 config.uri 的地址。<br><b>注意：加入了 eureka client 之后，启动 config-server 可能会报错，这个时候，我们可以重新生成另一个 jks 格式的密钥。</b></li></ul><pre>keytool -genkeypair -alias "mytestkey" -keyalg RSA -keypass 111 -keystore "/Users/sihai/Object/Spring Cloud/Eureka/config-server.jks" -storepass 111</pre><p>然后复制到 config-server 下的 resources 目录下，修改配置文件，修改 location、alias 配置。同时需要修改 pom.xml 过滤条件。</p><hr/><h2 id="config-配置动态刷新"><a href="#config-配置动态刷新" class="headerlink" title="config 配置动态刷新"></a>config 配置动态刷新</h2><p>当配置文件发生了改变之后，config-server 可以及时的感知到了变化，但是 config-client 不可以及时的感知到，在默认情况下，config-client 只有重启才能加载到最新的配置文件，很不方便，我们需要做到不重启 config-client 也可以重新加载到配置文件。</p><ol><li>首先给 config-client 添加 actuator 依赖。</li><li>添加配置，使 refresh 端点暴露出来。</li><li>再给 config-client 使用了配置文件的地方加上 @RefreshScope 注解，这样的话，当配置发生了改变之后，只需要调用 refresh 端点，config-client 中的配置就可以实现自动刷新。</li><li>重启 config-client，只要配置文件发生改变，访问 POST 请求的 <a href="http://localhost:8082/actuator/refresh">http://localhost:8082/actuator/refresh</a> ，调用一下这个端点后，重新请求 <a href="http://localhost:8082/hello">http://localhost:8082/hello</a> ，就会自动刷新过来。</li></ol><hr/><h2 id="Config-解决请求发送失败重试"><a href="#Config-解决请求发送失败重试" class="headerlink" title="Config 解决请求发送失败重试"></a>Config 解决请求发送失败重试</h2><p>config-client 在调用 config-server 时，也一样有可能会发生请求失败的问题。这个时候，我们可以配置一个请求重试的功能。</p><ol><li>需要给 config-client 添加重试功能，只需要添加 retry、aop 即可。</li><li>添加了 retry 之后，这个服务就已经具备了重试功能。 </li><li>然后需要修改配置，开启失败快速响应。 </li><li>如果注释掉配置文件中的 security 用户名密码，重启 config-client，此时加载配置的失败，就会自动重试。 </li><li>也可以通过 config.retry 中的配置，来保证服务的可用性。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> Spring Cloud Config </tag>
            
            <tag> Nanos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud Gateway</title>
      <link href="/2023/03/20/2023.03.20/"/>
      <url>/2023/03/20/2023.03.20/</url>
      
        <content type="html"><![CDATA[<h3 id="Spring-Cloud-Gateway-特点"><a href="#Spring-Cloud-Gateway-特点" class="headerlink" title="Spring Cloud Gateway 特点"></a>Spring Cloud Gateway 特点</h3><ul><li>限流 </li><li>路径重写 </li><li>动态路由 </li><li>集成 Spring Cloud DiscoveryClient </li><li>集成 Hystrix 断路器</li></ul><hr/><h3 id="Spring-Cloud-Gateway-和-Zuul-对比"><a href="#Spring-Cloud-Gateway-和-Zuul-对比" class="headerlink" title="Spring Cloud Gateway 和 Zuul 对比"></a>Spring Cloud Gateway 和 Zuul 对比</h3><ol><li>Zuul 是 Netflix 公司的开源产品，而 Spring Cloud Gateway 是 Spring 家族中的产品，可以和 Spring 家族中的其他组件更好的融合。 </li><li>Zuul1 不支持长连接，而 Spring Cloud Gateway 支持。例如 websocket。（Zuul 通常指的是 Zuul1 版本)</li><li>Spring Cloud Gateway 支持限流。而 zuul 中没有自带限流。 </li><li>Zuul1 是基于 servlet 框架构建的，采用阻塞、多线程的方式，一个线程处理一次连接请求，这种请求方式在内部延迟严重，如果在故障较多的情况下，会引起存活的连接增多和线程增加，处理效率会低一些。 </li><li>而 Spring Cloud Gateway 是基于 Netty 来开发，实现异步和非阻塞，占用资源更小，性能方面更加有优势，强于 zuul。</li></ol><hr/><h3 id="Spring-Cloud-Gateway-基本用法"><a href="#Spring-Cloud-Gateway-基本用法" class="headerlink" title="Spring Cloud Gateway 基本用法"></a>Spring Cloud Gateway 基本用法</h3><h4 id="编码式"><a href="#编码式" class="headerlink" title="编码式"></a>编码式</h4><ol><li>首先创建一个 spring boot 项目，添加 spring cloud gateway 模块。 </li><li>项目创建成功后，直接在启动类中配置一个 RouteLocator 这样一个 Bean，就可以实现请求转发。 </li><li>测试接口：httpbin.org&#x2F;get </li><li>配置完成后，访问 <a href="http://localhost:8090/get">http://localhost:8090/get</a> 会自动转发到 <a href="http://httpbin.org/">http://httpbin.org</a></li></ol><h4 id="yml-配置式"><a href="#yml-配置式" class="headerlink" title="yml 配置式"></a>yml 配置式</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">sihai_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">http://httpbin.org</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/get</span></span><br></pre></td></tr></table></figure><hr/><h4 id="Spring-Cloud-Gateway-服务化，整合微服务"><a href="#Spring-Cloud-Gateway-服务化，整合微服务" class="headerlink" title="Spring Cloud Gateway 服务化，整合微服务"></a>Spring Cloud Gateway 服务化，整合微服务</h4><ol><li>首先给 Gateway 添加依赖，将其注册到 Eureka 上。 </li><li>配置 yml，将请求转发注释掉。 </li><li>配置路由转发。 </li><li>接下来就可以通过 gateway 访问到其他注册在 Eureka 上的服务了，访问方式和 zuul 一样，可以代理访问任何注册到 Eureka 上的服务。</li><li><a href="http://localhost:8090/PROVIDER/hello">http://localhost:8090/PROVIDER/hello</a> 注意 provider 需要大写，与注册到 Eureka 上的服务名一致。</li></ol><hr/><h4 id="Spring-Cloud-Gateway-中的-Predicate"><a href="#Spring-Cloud-Gateway-中的-Predicate" class="headerlink" title="Spring Cloud Gateway 中的 Predicate"></a>Spring Cloud Gateway 中的 Predicate</h4><p>参考文章：<a href="https://blog.csdn.net/qq_45627009/article/details/122135727">https://blog.csdn.net/qq_45627009/article/details/122135727</a></p><p>通过时间配置：</p><ul><li>After：在某个时间点 (ZonedDateTime) 之后的请求会命中该 Route</li><li>Before：在某个时间点 (ZonedDateTime) 之前的请求会命中该 Route</li><li>Between：在某时间之间的请求会命中该 Route</li></ul><hr/>其他类型配置：<ul><li>Method：匹配请求的类型 </li><li>Path：匹配请求的 Path（Uri） </li><li>Query：匹配 GET 请求的参数 </li><li>Weight ：分组匹配权重 </li><li>RemoteAddr：匹配 IP 地址 </li><li>Header：匹配请求的 Header 参数 </li><li>Cookie：匹配请求中 Cookie 内容</li></ul><hr/><h4 id="Spring-Cloud-Gateway-中的-Filter"><a href="#Spring-Cloud-Gateway-中的-Filter" class="headerlink" title="Spring Cloud Gateway 中的 Filter"></a>Spring Cloud Gateway 中的 Filter</h4><p>Spring Cloud Gateway 中的过滤器分为两大类：</p><ul><li>GatewayFilter 局部</li><li>GlobalFilter 全局</li></ul><h4 id="AddRequestParameter-过滤器使用"><a href="#AddRequestParameter-过滤器使用" class="headerlink" title="AddRequestParameter 过滤器使用"></a>AddRequestParameter 过滤器使用</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">gateway</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">sihai_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://provider</span></span><br><span class="line">          <span class="comment">## 过滤器配置</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="comment">## 添加请求参数</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">AddRequestParameter=name,sihai</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Method=Get</span></span><br><span class="line">      <span class="comment">## 对client端请求起到路由功能，是否开启通过注册中心进行路由转发的功能</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="comment">## 开启自动代理</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Cloud </tag>
            
            <tag> Spring Cloud Gateway </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zuul</title>
      <link href="/2023/02/19/2023.02.19/"/>
      <url>/2023/02/19/2023.02.19/</url>
      
        <content type="html"><![CDATA[<p>Zuul 是 Netflix 公司提供的一种网关服务。</p><h3 id="zuul-的功能："><a href="#zuul-的功能：" class="headerlink" title="zuul 的功能："></a>zuul 的功能：</h3><ol><li>权限控制，可以做认证和授权 </li><li>监控 </li><li>动态路由 </li><li>负载均衡 </li><li>静态资源处理</li></ol><p><b> Zuul 中的功能基本上都是基于过滤器来实现的，它的过滤器有几种不同的类型：</b></p><ul><li>PRE </li><li>ROUTING </li><li>POST </li><li>ERROR</li></ul><hr/><h3 id="Hello，Zuul"><a href="#Hello，Zuul" class="headerlink" title="Hello，Zuul"></a>Hello，Zuul</h3><ul><li>首先创建一个 spring boot 项目，添加 zuul 依赖。 </li><li>在 application.yml 中配置，注册到 eureka 中。 </li><li>在启动类上添加启动注解 @EnableZuulProxy &#x2F;&#x2F; 开启网关代理。 </li><li>启动 eureka，provider，zuul 服务 </li><li>请求代理测试访问：localhost:2020&#x2F;provider&#x2F;hello，在这个地址中，provider 就是要访问的服务名称，&#x2F;hello 就是访问的服务接口。</li></ul><hr/><h3 id="zuul-路由规则自定义"><a href="#zuul-路由规则自定义" class="headerlink" title="zuul 路由规则自定义"></a>zuul 路由规则自定义</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 自定义 zuul 路由规则</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="attr">sihai-a:</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/sihai-a/**</span></span><br><span class="line">      <span class="attr">service-id:</span> <span class="string">provider</span></span><br></pre></td></tr></table></figure><p>上面这个配置，表示 &#x2F;sihai-a&#x2F;**，满足这个匹配规则的请求，将被转发到 provider 实例上。</p><p><b>简化配置方案：</b></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 自定义 zuul 路由规则</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="comment">## 简化访问规则</span></span><br><span class="line">    <span class="attr">provider:</span> <span class="string">/sihai-a/**</span></span><br></pre></td></tr></table></figure><hr/><h3 id="zuul-请求过滤"><a href="#zuul-请求过滤" class="headerlink" title="zuul 请求过滤"></a>zuul 请求过滤</h3><p>对于来自客户端的请求，我们可以在 zuul 中进行预处理，例如权限判断等。</p><p>定义一个简单的权限过滤器 &#x2F;PermissFilter</p><p>重启项目后，接下来发送请求必须带上 username 和 password 参数，否则请求会被过滤器拦截，参数必须要和定义的相同才可以访问。</p><blockquote>    <p>正常访问： localhost:2020/sihai-a/hello?username=sihai&password=root</p>    <p>非法访问： localhost:2020/sihai-a/hello?username=sihaisihai&password=rootroot</p></blockquote><hr/><h3 id="zuul-的其他配置"><a href="#zuul-的其他配置" class="headerlink" title="zuul 的其他配置"></a>zuul 的其他配置</h3><h4 id="匹配规则"><a href="#匹配规则" class="headerlink" title="匹配规则"></a>匹配规则</h4><p>例如有两个服务，一个叫 consumer，另外一个叫 consumer-hello，同时在做路由规则设置的时候，如果出现了如下配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 自定义 zuul 路由规则</span></span><br><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">routes:</span></span><br><span class="line">    <span class="comment">## 简化访问规则</span></span><br><span class="line">    <span class="attr">consumer:</span> <span class="string">/consumer/**</span></span><br><span class="line">    <span class="attr">consumer-hello:</span> <span class="string">/consumer/hello/**</span></span><br></pre></td></tr></table></figure><p>那么此刻如果访问如下地址：<a href="http://localhost:2020/consumer/hello/123">http://localhost:2020/consumer/hello/123</a> ，会出现冲突情况。实际上，这个地址是希望和 consumer-hello 这个服务匹配上的，那么这个时候，只需要将配置文件改为 yml 格式就可以了。因为 properties 格式是无序的，而 yml 格式是有序的。</p><hr/><h4 id="忽略路径"><a href="#忽略路径" class="headerlink" title="忽略路径"></a>忽略路径</h4><p>默认情况下，zuul 注册到 eureka 上之后，eureka 上的所有注册服务都会被自动代理。如果不希望给某一个服务做代理，可以忽略该服务。配置如下:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="comment">## 忽略路径</span></span><br><span class="line">  <span class="attr">ignored-services:</span> <span class="string">provider</span></span><br></pre></td></tr></table></figure><p>上面这个配置表示忽略 provider 服务，此时就不会自动代理 provider 服务了。</p><p><b>也可以忽略某一类地址：</b></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="comment">## 忽略包含 hello 的地址</span></span><br><span class="line">  <span class="attr">ignored-patterns:</span> <span class="string">/**/hello/**</span></span><br></pre></td></tr></table></figure><p>上面配置表示请求路径中如果包含 hello，则不做代理。</p><hr/><h4 id="请求前缀"><a href="#请求前缀" class="headerlink" title="请求前缀"></a>请求前缀</h4><p>也可以给路由添加请求前缀</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">zuul:</span></span><br><span class="line">  <span class="attr">prefix:</span> <span class="string">/sihai</span></span><br></pre></td></tr></table></figure><p>这样，以后所有的请求地址自动多了前缀 &#x2F;sihai</p>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Zuul </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分布式全局ID生成策略</title>
      <link href="/2023/01/15/2023.01.15/"/>
      <url>/2023/01/15/2023.01.15/</url>
      
        <content type="html"><![CDATA[<h2 id="Java生成主键ID"><a href="#Java生成主键ID" class="headerlink" title="Java生成主键ID"></a>Java生成主键ID</h2><p>当数据库进行分库分表的时候, 原有的主键自增就会不方便继续使用了, 这个时候我们就可以用Java代码来处理主键, 然后插入到数据库中</p><h3 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h3><p>最容易让人想到的就是UUID(Universally Unique Identifier)通用唯一标识符.<br>UUID的标准型式包括了32个16进制的数字, 以连字号分为五段, 形式为8-4-4-4-12的36个字符, 这个是Java自带的, 使用方便简单.<br>UUID(Universally Unique Identifier)全局唯一标识符,是指在一台机器上生成的数字，它保证对在同一时空中的所有机器都是唯一的.<br>当前日期和时间(UUID的第一个部分与时间有关，如果你在生成一个UUID之后，过几秒又生成一个UUID，则第一个部分不同，其余相同)，时钟序列，全局唯一的IEEE机器识别号(如果有网卡，从网卡获得，没有网卡以其他方式获得).</p><p><strong>优点:</strong>本地生成, 没有网络消耗</p><p><strong>缺点</strong></p><li>字符串太长, mysql官方明确建议主键要尽量越短越好</li><li>UUID的随机性对于 I/O密集型的应用非常不友好, <strong>它会使得聚簇索引的插入变得完全随机, 使得数据没有任何聚集特征</strong></li><li>信息不安全: UUID基于MAC地址生成UUID的算法可能会造成MAC地址泄露, 这个漏洞曾被用于寻找梅丽莎病毒的制作者位置</li><li>对mysql索引不好: 如果作为数据库主键, 在InnoDB引擎下, UUID的无序性有可能会引起数据位置频繁变动, 严重影响性能</li>因此UUID并非最佳方案<h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>如果使用的JDK为1.5的话, 那么可以直接调用java.util.UUID 即可<br>生成uuid数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">uuidID</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// uuid生成32位数</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    System.out.println(uuid);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 截取前面或者后面16位</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> uuid.substring(<span class="number">0</span>, <span class="number">16</span>);</span><br><span class="line">    System.out.println(substring);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LEAF"><a href="#LEAF" class="headerlink" title="LEAF"></a>LEAF</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot整合Thymeleaf</title>
      <link href="/2022/12/27/2022.12.27/"/>
      <url>/2022/12/27/2022.12.27/</url>
      
        <content type="html"><![CDATA[<p>虽然现在慢慢在流行前后端分离开发, 但是也有公司在做前后端不分离的开发, 而在前后端不分离的开发中, 我们就会需要用到后端页面模板, 可实际上, 即使是前后端分离开发, 也会有一些场景下需要使用页面模板, 例如邮件发送模板.<br>现在的SpringBoot页面模板主要支持Thymeleaf和Freemarker.</p><h2 id="Thymeleaf简介"><a href="#Thymeleaf简介" class="headerlink" title="Thymeleaf简介"></a>Thymeleaf简介</h2><p>Thymeleaf是新一代Java模板引擎, 它类似于Velocity、FreeMarker等传统Java模板引擎, 但是与传统Java模板引擎不同的是, Thymeleaf支持Html原型.<br>它既可以让前端在浏览器中直接打开查看样式, 也可以让后端结合真实数据查看显示效果, 同时 Spring Boot提供了 Thymeleaf自动化配置解决方案, 因此在Spring Boot中使用 Thymeleaf非常方便.<br>Thymeleaf除了展示基本的 HTML进行页面渲染之外, 还可以作为一个 HTML片段进行渲染, 例如做邮件发送时, 可以使用 Thymeleaf作为邮件发送模板.<br>另外, Thymeleaf模板后缀为 .html, 可以直接被浏览器打开, 浏览非常方便.</p><h2 id="Thymeleaf实现"><a href="#Thymeleaf实现" class="headerlink" title="Thymeleaf实现"></a>Thymeleaf实现</h2><p><strong>Thymeleaf依赖</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Thymeleaf配置类属性</strong><br>Thymeleaf不仅仅能在Spring Boot中使用, 也可用在别的地方, 不同的是Spring Boot针对 Thymeleaf提供了一整套的自动化配置方案, 这一套配置类的属性在org.springframework.boot.autoconfigure.thymeleaf.ThymeleafProperties中, 部分源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.thymeleaf&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThymeleafProperties</span> &#123;</span><br><span class="line">        <span class="comment">// 默认编码</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Charset</span> <span class="variable">DEFAULT_ENCODING</span> <span class="operator">=</span> StandardCharsets.UTF_8;</span><br><span class="line">        <span class="comment">// 默认路径</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;classpath:/templates/&quot;</span>;</span><br><span class="line">        <span class="comment">// 默认后缀</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DEFAULT_SUFFIX</span> <span class="operator">=</span> <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">checkTemplate</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">checkTemplateLocation</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> DEFAULT_PREFIX;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> DEFAULT_SUFFIX;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">String</span> <span class="variable">mode</span> <span class="operator">=</span> <span class="string">&quot;HTML&quot;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">Charset</span> <span class="variable">encoding</span> <span class="operator">=</span> DEFAULT_ENCODING;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">cache</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先通过@ConfigurationProperties注解, 将application.properties前缀为spring.thymeleaf的配置和这个类中的属性绑定.</li><li>前三个static变量定义了默认的编码格式、试图解析器的前缀和后缀等</li><li>从前三行的配置中, 可以看出 Thymeleaf模板的默认位置为 resources/templates目录下, 默认的后缀是html</li><li>这些配置如果开发者不自己提供, 则使用默认配置, 如果自己提供, 则在application.properties中以spring.thymeleaf开始配置</li></ul><p><strong>Thymeleaf自动化配置类</strong><br>org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration部分源码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(ThymeleafProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123; TemplateMode.class, SpringTemplateEngine.class &#125;)</span></span><br><span class="line"><span class="meta">@AutoConfigureAfter(&#123; WebMvcAutoConfiguration.class, WebFluxAutoConfiguration.class &#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThymeleafAutoConfiguration</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@EnableConfigurationProperties(ThymeleafProperties.class): 首先导入ThymeleafProperties</li><li>@ConditionalOnClass({ TemplateMode.class, SpringTemplateEngine.class }): 表示当当前系统中存在 TemplateMode 和 SpringTemplateEngine 类时, 当前自动化配置类才会生效, 即是只要项目中引入了 Thymeleaf相关的依赖, 这个配置便会生效</li><li>这些默认的配置我们几乎不需要做任何修改就可以直接使用</li></ul><p><strong>Thymeleaf 实现</strong></p><h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IndexController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            u.setId((<span class="type">long</span>) i);</span><br><span class="line">            u.setName(<span class="string">&quot;javaboy:&quot;</span> + i);</span><br><span class="line">            u.setAddress(<span class="string">&quot;深圳:&quot;</span> + i);</span><br><span class="line">            users.add(u);</span><br><span class="line">        &#125;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;users&quot;</span>, users);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="model"><a href="#model" class="headerlink" title="model"></a>model</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">//省略 getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在IndexController中返回逻辑视图名+数据, 逻辑视图名为index, 意思就是我们需要在resources&#x2F;templates目录下提供一个名为index.html的Thymeleaf的模板文件.</p><h3 id="Thymeleaf模板"><a href="#Thymeleaf模板" class="headerlink" title="Thymeleaf模板"></a>Thymeleaf模板</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table border=&quot;1&quot;&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;编号&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;用户名&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;地址&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;tr th:each=&quot;user : $&#123;users&#125;&quot;&gt;</span><br><span class="line">        &lt;td th:text=&quot;$&#123;user.id&#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td th:text=&quot;$&#123;user.name&#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">        &lt;td th:text=&quot;$&#123;user.address&#125;&quot;&gt;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>在Thymeleaf中, 通过th:each指令来遍历一个集合, 通过th:text指令来实现数据的展示<br>注意index.html的最上面要引入thymeleaf名称空间<br>配置完成启动项目后, 访问 &#x2F;index接口, 就能看见集合中的数据</p><h3 id="手动渲染"><a href="#手动渲染" class="headerlink" title="手动渲染"></a>手动渲染</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> Thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Security连接数据库</title>
      <link href="/2022/12/10/2022.12.10/"/>
      <url>/2022/12/10/2022.12.10/</url>
      
        <content type="html"><![CDATA[<h2 id="UserDetailService"><a href="#UserDetailService" class="headerlink" title="UserDetailService"></a>UserDetailService</h2><p>Spring Security支持多种不同的数据源, 这些不同的数据源最终都将被封装成UserDetailService的实例, 我们可以自己创建一个类来实现UserDetailService实例<br>先来看一下UserDetailService有哪一些实现类：<br><img src="https://xingqiu-tuchuang-1256524210.cos.ap-shanghai.myqcloud.com/4239/640.png" /><br>可以看到, 在几个能直接使用的实现类中, 除了 InMemoryUserDetailsManager之外, 还有一个 JdbcUserDetailsManager, 使用JdbcUserDetailsManager可以让我们通过JDBC的方式去将数据库和Spring Security连接起来.</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot中通过CORS解决跨越问题</title>
      <link href="/2022/12/03/2022.12.03/"/>
      <url>/2022/12/03/2022.12.03/</url>
      
        <content type="html"><![CDATA[<h2 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h2><p>很多人对跨域有一种误解，以为这是前端的事，和后端没关系，其实不是这样的，说到跨域，就不得不说说浏览器的同源策略。<br/><br>同源策略是由Netscape提出来的一个著名的安全策略, 它是浏览器中最核心也是最基本的安全功能, 现在所有支持JavaScript的浏览器都会使用这个策略. 所谓的同源是指协议、域名以及端口都必须要一致相同. <br/><br>同源策略是基于安全方面的考虑提出来的, 这个策略本身是没有问题, 但是我们在实际的开发中, 由于各种原因又经常有跨域的需求, 传统的跨域方案是JSONP, JSONP虽然能够解决跨域, 但是也有一个很大的局限性, 那便是只支持GET请求, 不支持其他类型的请求,<br>而今天要说的CORS(跨域源资源共享 CORS, Cross-origin resource sharing)是一个W3C标准, 它是一份浏览器技术的规范, 提供了Web服务从不同网域传过来沙盒脚本的方法, 以避开浏览器的同源策略, 这是JSONP模式的现代版.<br/><br>在Spring框架中, 对于CORS也提供了相应的解决方案.</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>使用CORS可以在前端代码不做任何改变的情况下, 实现跨域<br><strong>方法一：</strong><br>可以通过@CrossOrigin注解配置某一个方法接受某一个域的请求, 该注解可以用在类或者方法上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@CrossOrigin(value = &quot;http://localhost:8081&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="comment">// @CrossOrigin(value = &quot;http://localhost:8081&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该注解表示这个接口接受来自<a href="http://localhost:8081&quot;地址的请求">http://localhost:8081&quot;地址的请求</a>, 配置完成后, 重启provider, 再次发送请求, 浏览器控制台便不会报错, consumer也可以拿到数据.<br>观察浏览器控制台请求网络中, 可以看见请求头里多了Access-Control-Allow-Origin: <a href="http://localhost:8081/">http://localhost:8081</a><br><strong>方法二：</strong><br>在provider上, 如果每一个方法或者类上都去添加注解未免太过麻烦, 在SpringBoot中, 还可以通过全局配置一次性解决这个问题, 全局配置只需要在配置类中重写addCorsMappings方法即可, 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 跨越请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 设置允许跨域的路径, 表示本应用的所有方法都会去处理跨域请求</span></span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置允许跨域请求的域名</span></span><br><span class="line">                <span class="comment">// 当**Credentials为true时，**Origin不能为星号，需为具体的ip地址【如果接口不带cookie,ip无需设成具体ip】</span></span><br><span class="line">                .allowedOriginPatterns(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 是否允许证书 不再默认开启</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">                <span class="comment">// 设置允许的方法, 允许通过的请求数</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 设置允许的请求头</span></span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                <span class="comment">// 跨域允许时间</span></span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过这样的配置后, 便不用在每一个方法或者类上单独配置跨域了.</p><h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><p>了解完整个CORS的工作过程之后, 我们在通过Ajax发送跨域请求, 虽然用户体验提高了, 但是随即而来的也有潜在的威胁存在, 常见的就是CSRF(Cross-site request forgery)跨站请求伪造.<br>跨站请求伪造也被称为one-click attack 或者 session riding, 通常缩写为CSRF或者XSRF, 是一种挟持用户在当前已经登录的Web应用程序上执行非本意的操作的攻击方法, 例如：</p><blockquote>假如一家银行用以运行转账操作的URL地址如下：<code>http://icbc.com/aa?bb=cc</code>，那么，一个恶意攻击者可以在另一个网站上放置如下代码：<code>&ltimg src="http://icbc.com/aa?bb=cc"&gt</code>，如果用户访问了恶意站点，而她之前刚访问过银行不久，登录信息尚未过期，那么她就会遭受损失。</blockquote>基于这个问题, 浏览器会在实际的操作中, 会对请求进行分类, 分为简单请求, 预先请求, 带凭证的请求等等, 预先请求会首先发送一个options探测请求, 和浏览器进行协商是否接受请求.默认的情况下跨域请求是不需要携带凭证的, 但是服务端可以配置要求客户端提供凭证, 这样一来就可以有效的避免csrf攻击.]]></content>
      
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> CORS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在Spring Security中整合 JWT</title>
      <link href="/2022/11/21/2022.11.21/"/>
      <url>/2022/11/21/2022.11.21/</url>
      
        <content type="html"><![CDATA[<p>前后端分离项目中, JWT算是比较流行的基于登录策略的解决方案, 下面就在SpringSecurity中整合JWT在一起使用, 实现前后端分离时登录解决方案</p><h2 id="无状态登录"><a href="#无状态登录" class="headerlink" title="无状态登录"></a>无状态登录</h2><h3 id="有状态"><a href="#有状态" class="headerlink" title="有状态"></a>有状态</h3><p>有状态服务, 即是服务端需要记录每次会话的客户端信息, 从而识别客户端身份, 根据用户身份进行请求的处理, 典型的设计比如Tomcat中的Session.<br/><br>例如登录：用户登录之后, 我们将用户的信息保存在服务端session中, 并且给用户返回一个cookie值, 记录对应的session, 然后在下一次请求时, <br/><br>用户携带cookie值进行访问(浏览器自动完成携带), 我们就会识别到对应的session, 从而找到用户的信息. <br/><br>这种方法使用方便, 但也有对应的缺点, 如下：</p><blockquote>1. 服务端保存了大量的数据, 增加了服务端压力<br/>2. 服务端保存了用户状态, 不支持集群化部署</blockquote><h3 id="无状态"><a href="#无状态" class="headerlink" title="无状态"></a>无状态</h3><p>微服务集群中的每个服务, 对外提供的都使用RESTful风格的接口. 而RESTful风格的一个最重要的规范便是：服务的无状态性, 也就是：</p><blockquote>1. 服务端不保存任何客户端请求者的信息<br/>2. 客户端的每次请求必须要具备自描述信息, 通过这些信息来识别客户端身份</blockquote><p>无状态性的好处：</p><blockquote>1. 客户端请求不依赖服务端的信息, 多次请求不用一定要访问到同一台服务器<br/>2. 服务端的集群和状态对客户端透明<br/>3. 服务端可以任意的迁移和伸缩, 可以更方便的进行集群化部署<br/>4. 减少了服务端的存储压力</blockquote><h3 id="如何实现无状态"><a href="#如何实现无状态" class="headerlink" title="如何实现无状态"></a>如何实现无状态</h3><p>无状态登录流程：</p><blockquote>1. 首先客户端发送账户名/密码到服务端进行验证<br/>2. 认证通过之后, 服务端将用户信息加密并且编码成一个token, 返回至客户端<br/>3. 以后每一次客户端进行发送请求, 都需要携带上认证的token<br/>4. 服务端对客户端按发送过来的token进行解密, 判断是否有效后, 获取用户登录信息</blockquote><h2 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h2><h3 id="JWT简介"><a href="#JWT简介" class="headerlink" title="JWT简介"></a>JWT简介</h3><p>JWT, 全称为Json Web Token, 是一种JSON风格的轻量级授权和身份认证规范, 可以实现无状态、分布式的Web应用授权：<br/><br>JWT作为一种规范, 并没有和其他语言绑定, 常用的java实现是开源jjwt, GitHub地址：<a href="https://github.com/jwtk/jjwt">https://github.com/jwtk/jjwt</a></p><h3 id="JWT数据格式"><a href="#JWT数据格式" class="headerlink" title="JWT数据格式"></a>JWT数据格式</h3><p>JWT包含了三部分数据：</p><ol><li>Header： 头部, 通常头部有两部分信息：<br/></li></ol><blockquote><ul><li>声明类型为JWT</li><li>加密算法为自定义</li></ul></blockquote><ol start="2"><li>Payload: 载荷, 就是有效数据, 在官方文档中(RFC7519), 有7个实例信息：</li></ol><blockquote><ul><li>iss(isser): 表示签发人</li><li>exp(epiration time): 表示token过期时间</li><li>sub(subject): 主题</li><li>aud(audience): 受众</li><li>nbf(Not Before): 生效时间</li><li>iat(Issued At): 签发时间</li><li>jti(JWT ID): 编号</li>这一部分也会采用Base64Url编码, 得到第二部分数据.</ul></blockquote><ol start="3"><li>Signature: 签名, 是整个数据的认证信息, 一般根据前两步的数据, <br/><br>再添加上服务的密钥secret(密钥保存在服务端内, 不能泄露给客户端),<br/><br>通过Header中配置的加密算法生成. 用于验证整个数据的完整性和可靠性.</li></ol><blockquote>eyJhbGciOiJIUzUxMiJ9.eyJhdXRob3JpdGllcyI6IlJPTEVfdXNlciwiLCJzdWIiOiJzaWhhaSIsImV4cCI6MTY2ODc0NDg0N30.iHJGpI8ySVWgXoFr6NSc0V9NRDZIo0RkGIwOUsTxszif9ClT-ZSweImdiMpRfNlHtFFxO7sCiLEZN1zlCjXKtQ</blockquote><p><strong>生成的数据结构会通过<code>.</code>隔开成三个部分, 分别对应上方的三部分, <br/><br>另外需要注意的是, 这里的数据是不换行的</strong></p><h3 id="JWT交互教程"><a href="#JWT交互教程" class="headerlink" title="JWT交互教程"></a>JWT交互教程</h3><p>流程图：<br><img src="http://www.javaboy.org/images/sb/20-3.png" /><br>步骤：</p><blockquote>1. 应用程序或者客户端向授权服务器请求授权<br/>2. 获取到授权之后, 授权服务器会向应用程序返回访问令牌<br/>3. 应用程序使用访问令牌来访问受保护的资源 (例如：API)<br/></blockquote><p><strong>因为JWT签发的token中已经包含了用户的身份信息, 并且每一次请求都会携带上, <br/><br>这样服务就不需要保存用户信息, 甚至不需要到数据库中查询, 这样便完全符合了RESTful的无状态规范</strong></p><h3 id="JWT缺点"><a href="#JWT缺点" class="headerlink" title="JWT缺点"></a>JWT缺点</h3><p>JWT也不是天衣无缝, 由于客户端维护登录状态带来的问题依然存在, 例如：</p><blockquote>1. 续签问题: 这也是被很多人诟病的问题之一, 传统的cookie+session的方案天然的支持续签, 但是jwt由于服务端上不保存用户状态<br/>因此很难完美解决续签问题, 如果引入redis缓存, 虽然可以解决问题, 但是jwt也变的不纯粹了<br/>2. 注销问题: 由于服务端不再保存用户信息, 所以一般可以通过修改secret来实现注销, 服务端的secret修改之后, 已经颁发的未过期的token就会认证失败, 进而实现注销, 不过没有传统的注销方便<br/>3. 密码重置: 密码重置之后, 原本的token依旧可以访问系统, 这个时候也需要强制修改secret<br/>4. 基于注销问题和密码重置, 一般建议不同的用户取不同的secret</blockquote><h2 id="整合实现"><a href="#整合实现" class="headerlink" title="整合实现"></a>整合实现</h2><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>首先创建一个Spring Boot项目, 创建时候需要添加Spring Security依赖, 创建后添加<code>jjwt</code>依赖, 完整的 pom.xml 如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在项目中创建简单的User对象并且实现UserDetails接口, 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">UserDetails</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> List&lt;GrantedAuthority&gt; authorities;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAccountNonLocked</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isCredentialsNonExpired</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEnabled</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; getAuthorities() &#123;</span><br><span class="line">        <span class="keyword">return</span> authorities;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPassword</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPassword</span><span class="params">(String password)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAuthorities</span><span class="params">(List&lt;GrantedAuthority&gt; authorities)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.authorities = authorities;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再创建一个HelloController, 如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello jwt !&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/admin&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">admin</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello admin !&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的HelloController很简单, 两个接口, <code>/hello</code>接口可以被具有 user 角色的用户访问，而 <code>/admin</code> 接口则可以被具有 admin 角色的用户访问。</p><h3 id="JWT过滤器配置"><a href="#JWT过滤器配置" class="headerlink" title="JWT过滤器配置"></a>JWT过滤器配置</h3><p>首先提供两个和JWT相关的过滤器配置:</p><ol><li>第一个是用户登录的过滤器, 在用户登录的过滤器中校验用户是否登录成功, 如果登录成功, 则会生成一个token返回给客户端, 登录失败则给前端返回一个登录失败的提示.</li><li>第二个过滤器则是当其他请求发送过来时, 校验token是否有效的过滤器, 如果校验成功, 则让请求继续执行.</li></ol><h4 id="用户登录过滤器-JwtLoginFilter"><a href="#用户登录过滤器-JwtLoginFilter" class="headerlink" title="用户登录过滤器 JwtLoginFilter"></a><strong>用户登录过滤器 JwtLoginFilter</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtLoginFilter</span> <span class="keyword">extends</span> <span class="title class_">AbstractAuthenticationProcessingFilter</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JwtLoginFilter</span><span class="params">(String defaultFilterProcessesUrl, AuthenticationManager authenticationManager)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="keyword">new</span> <span class="title class_">AntPathRequestMatcher</span>(defaultFilterProcessesUrl));</span><br><span class="line">        setAuthenticationManager(authenticationManager);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Authentication <span class="title function_">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException, IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// 将用户传过来的json数据转为 user Bean</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().readValue(request.getInputStream(), User.class);</span><br><span class="line">        <span class="keyword">return</span> getAuthenticationManager().authenticate(<span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(user.getUsername(), user.getPassword()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录成功回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">successfulAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">// 获取登陆用户的角色</span></span><br><span class="line">        Collection&lt;? <span class="keyword">extends</span> <span class="title class_">GrantedAuthority</span>&gt; authorities = authResult.getAuthorities();</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (GrantedAuthority authority : authorities) &#123;</span><br><span class="line">            stringBuffer.append(authority.getAuthority()).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 生成jwt</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwt</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                <span class="comment">// 用户角色</span></span><br><span class="line">                <span class="comment">// 配置用户角色</span></span><br><span class="line">                .claim(<span class="string">&quot;authorities&quot;</span>, stringBuffer)</span><br><span class="line">                <span class="comment">// 用户名</span></span><br><span class="line">                .setSubject(authResult.getName())</span><br><span class="line">                <span class="comment">// 过期时间</span></span><br><span class="line">                .setExpiration(<span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() + <span class="number">60</span>*<span class="number">60</span>*<span class="number">1000</span>))</span><br><span class="line">                <span class="comment">// 签名算法加密</span></span><br><span class="line">                .signWith(SignatureAlgorithm.HS512, <span class="string">&quot;sihai@123&quot;</span>)</span><br><span class="line">                .compact();</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;token&quot;</span>, jwt);</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;登录成功!&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        <span class="comment">// 将传入的对象序列化为json，返回给调用者</span></span><br><span class="line">        out.write(<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(map));</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录失败回调, 实现认证失败逻辑</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">unsuccessfulAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;登录失败!&quot;</span>);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        out.write(<span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(map));</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JwtLoginFilter这个类有三点需要注意:</p><blockquote><ul><li>自定义JwtLoginFilter类继承自 AbstractAuthenticationProcessingFilter类, 并且实现其中的三个默认方法</li><li>attemptAuthentication方法中, 从登录参数中提取出用户名密码, 然后调用AuthenticationManager.authenticate()方法进行自动校验</li><li>如果第二步校验成功, 就会进入successfulAuthentication回调中, 在successfulAuthentication方法中, 将用户角色遍历之后用<code>,</code>连接起来, 然后再利用Jwts生成token, 按照代码顺序, 生成的过程中一共配置了四个参数, 分别为用户角色、主题、过期时间、以及加密算法和密钥, 最后将生成的token写出到客户端</li><li>如果第二部校验失败, 就会进入unsuccessfulAuthentication方法中, 在这个方法中只需要返回一个错误提示给客户端即可</li></ul></blockquote><h4 id="用户登录过滤器-JwtFilter"><a href="#用户登录过滤器-JwtFilter" class="headerlink" title="用户登录过滤器 JwtFilter"></a><strong>用户登录过滤器 JwtFilter</strong></h4><p>第二个token校验过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtFilter</span> <span class="keyword">extends</span> <span class="title class_">GenericFilterBean</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) servletRequest;</span><br><span class="line">        <span class="comment">// 将cookie放在请求头里</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jwtToken</span> <span class="operator">=</span> req.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="comment">// 解析签名</span></span><br><span class="line">        Jws&lt;Claims&gt; jws = Jwts.parser().setSigningKey(<span class="string">&quot;sihai@123&quot;</span>)</span><br><span class="line">                .parseClaimsJws(jwtToken.replace(<span class="string">&quot;Bearer&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">        <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> jws.getBody();</span><br><span class="line">        <span class="comment">// 获取用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> claims.getSubject();</span><br><span class="line">        <span class="comment">// 当前用户角色</span></span><br><span class="line">        List&lt;GrantedAuthority&gt; authorities = AuthorityUtils.commaSeparatedStringToAuthorityList(((String) claims.get(<span class="string">&quot;authorities&quot;</span>)));</span><br><span class="line">        <span class="comment">// 创建token, 密码为空即可</span></span><br><span class="line">        <span class="type">UsernamePasswordAuthenticationToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UsernamePasswordAuthenticationToken</span>(username, <span class="literal">null</span>, authorities);</span><br><span class="line">        <span class="comment">// 设置令牌</span></span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(token);</span><br><span class="line">        filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JwtFilter这个类有两点需要注意:</p><blockquote><ul><li>首先从请求头中提取出anthorization字段, 这个字段对应的value为用户的token</li><li>第二, 将提取出来的token字符串转换为一个Claims对象, 再从Claims对象中提取出当前用户名和用户角色, 创建一个UsernamePasswordAuthenticationToken放到当前的Context中, 然后执行过滤链使请求继续执行下去</li></ul></blockquote><h3 id="Spring-Security配置"><a href="#Spring-Security配置" class="headerlink" title="Spring Security配置"></a>Spring Security配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecurityConfig</span> <span class="keyword">extends</span> <span class="title class_">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    PasswordEncoder <span class="title function_">passwordEncoder</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 数据加密接口,用于返回user对象里面密码的加密</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BCryptPasswordEncoder</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(AuthenticationManagerBuilder auth)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 在内存中配置用户</span></span><br><span class="line">        auth.inMemoryAuthentication()</span><br><span class="line">                .withUser(<span class="string">&quot;sihai&quot;</span>)</span><br><span class="line">                .password(<span class="string">&quot;$2a$10$Zph4wvfYiLJ58zQxPialb.eOu.ChlV6/roabVTTbQCmCrEv9Z45gy&quot;</span>)</span><br><span class="line">                .roles(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">                .and()</span><br><span class="line">                .withUser(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .password(<span class="string">&quot;$2a$10$Zph4wvfYiLJ58zQxPialb.eOu.ChlV6/roabVTTbQCmCrEv9Z45gy&quot;</span>)</span><br><span class="line">                .roles(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        http.authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">&quot;/hello&quot;</span>)</span><br><span class="line">                .hasRole(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">                .antMatchers(<span class="string">&quot;/admin&quot;</span>)</span><br><span class="line">                .hasRole(<span class="string">&quot;admin&quot;</span>)</span><br><span class="line">                .antMatchers(HttpMethod.POST, <span class="string">&quot;/login&quot;</span>)</span><br><span class="line">                .permitAll()</span><br><span class="line">                .anyRequest().authenticated()</span><br><span class="line">                .and()</span><br><span class="line">                .addFilterBefore(<span class="keyword">new</span> <span class="title class_">JwtLoginFilter</span>(<span class="string">&quot;/login&quot;</span>, authenticationManager()), UsernamePasswordAuthenticationFilter.class)</span><br><span class="line">                .addFilterBefore(<span class="keyword">new</span> <span class="title class_">JwtFilter</span>(), UsernamePasswordAuthenticationFilter.class)</span><br><span class="line">                .csrf().disable();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ul><li>如果不想对密码进行加密, 可以在passwordEncoder()中配置NoOpPasswordEncoder.getInstance()无操作密码编译器实例</li><li>上面并未采取连接数据库, 而是直接在内存中配置了两个用户, 两个用户分别具备user、admin两个角色</li><li>配置路径规则时, <code>/hello</code>接口必须要具备user角色才可以访问, <code>/admin</code>接口必须要具备admin角色才可以访问, POST请求并且是<code>/login</code>接口则可以直接通过, 访问其他接口必须要认证后才可访问</li><li>最后添加上两个自定义的过滤器并且关闭掉csrf保护</li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Spring Security </tag>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch</title>
      <link href="/2022/11/04/2022.11.04/"/>
      <url>/2022/11/04/2022.11.04/</url>
      
        <content type="html"><![CDATA[<h1 id="1-ElasticSearch-简介"><a href="#1-ElasticSearch-简介" class="headerlink" title="1.ElasticSearch 简介"></a>1.ElasticSearch 简介</h1><h2 id="1-1-Lucene"><a href="#1-1-Lucene" class="headerlink" title="1.1 Lucene"></a>1.1 Lucene</h2><p>Lucene 是一个开源、免费、高性能、纯Java编写的全文检索工具包(非检索引擎)，Lucene可以算是开源领域最好的全文检索工具包。</p>]]></content>
      
      
      
        <tags>
            
            <tag> ElasticSearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySql8 Docker下配置主从复制环境（Windows）</title>
      <link href="/2022/10/23/2022.10.23/"/>
      <url>/2022/10/23/2022.10.23/</url>
      
        <content type="html"><![CDATA[<h2 id="从-Docker-下拉取最新的-Mysql-运行配置"><a href="#从-Docker-下拉取最新的-Mysql-运行配置" class="headerlink" title="从 Docker 下拉取最新的 Mysql, 运行配置"></a>从 Docker 下拉取最新的 Mysql, 运行配置</h2><h3 id="1-打开命令符-拉取镜像文件"><a href="#1-打开命令符-拉取镜像文件" class="headerlink" title="1. 打开命令符, 拉取镜像文件"></a>1. 打开命令符, 拉取镜像文件</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql</span><br></pre></td></tr></table></figure><h3 id="2-运行镜像创建两个数据库："><a href="#2-运行镜像创建两个数据库：" class="headerlink" title="2. 运行镜像创建两个数据库："></a>2. 运行镜像创建两个数据库：</h3><p><strong>mysql-1为主库(33061)<br>mysql-2为从库(33062)</strong></p><blockquote>   –name 后面跟着的是容器的名字,自己可以自定义</br>   -p 指的是端口映射 本机端口:容器端口,本人选用的本机端口是3306,可以根据自己情况选择端口</br>   -e 指的是启动参数,这个MYSQL_ROOT_PASSWORD参数必须要传,否则等下登录不了MySQL, MYSQL_ROOT_PASSWORD意思是root用户的密码,大家可以自定义</br>   -d 代表后台启动 后面跟的就是镜像的名字,因为之前拉取的时候就是docker pull mysql,所以这个写mysql,如果是 docker pull mysql:5.7 那么这里就是 -d msyql:5.7</br></blockquote><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mysql-<span class="number">1</span> -p <span class="number">33061</span>:<span class="number">3306</span> -e MYSQL_ROOT_PASSWORD=root -d mysql:<span class="number">8</span>.<span class="number">0</span> </span><br><span class="line">--character-<span class="built_in">set</span>-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br><span class="line"></span><br><span class="line">docker run --name mysql-<span class="number">2</span> -p <span class="number">33062</span>:<span class="number">3306</span> -e MYSQL_ROOT_PASSWORD=root -d mysql:<span class="number">8</span>.<span class="number">0</span> </span><br><span class="line">--character-<span class="built_in">set</span>-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure><h3 id="3-查看-Docker-镜像是否运行成功"><a href="#3-查看-Docker-镜像是否运行成功" class="headerlink" title="3. 查看 Docker 镜像是否运行成功"></a>3. 查看 Docker 镜像是否运行成功</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><h3 id="4-在数据库连接上mysql"><a href="#4-在数据库连接上mysql" class="headerlink" title="4. 在数据库连接上mysql"></a>4. 在数据库连接上mysql</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 连接名</span><br><span class="line"><span class="attr">name</span>: mysql-<span class="number">1</span></span><br><span class="line"># 主机</span><br><span class="line"><span class="attr">localhost</span>: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line"># 端口号</span><br><span class="line"><span class="attr">port</span>: <span class="number">33061</span></span><br><span class="line"># 用户名</span><br><span class="line"><span class="attr">username</span>: root</span><br><span class="line"># 密码</span><br><span class="line"><span class="attr">password</span>: root</span><br></pre></td></tr></table></figure><h2 id="主机配置"><a href="#主机配置" class="headerlink" title="主机配置"></a>主机配置</h2><h3 id="1-在主机下配置用户-授权给从机服务器"><a href="#1-在主机下配置用户-授权给从机服务器" class="headerlink" title="1. 在主机下配置用户, 授权给从机服务器"></a>1. 在主机下配置用户, 授权给从机服务器</h3><p><strong>创建用户</strong><br>打开mysql-1 console, ‘rep1’为从机登录用户名, 密码为 root, ‘%’代表不需要限制登录地址(也可另外设置)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE USER &#x27;rep1&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;root&#x27;;</span><br></pre></td></tr></table></figure><p><strong>用户授权</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GRANT Replication Slave ON *.* TO &#x27;rep1&#x27;@&#x27;%&#x27;;</span><br></pre></td></tr></table></figure><h3 id="2-修改主库配置文件"><a href="#2-修改主库配置文件" class="headerlink" title="2. 修改主库配置文件"></a>2. 修改主库配置文件</h3><p>桌面新建一个文件 <strong>“mysqld.cnf”</strong></p><blockquote>    [mysqld]<br/>    log-bin=/var/lib/mysql/binlog<br/>    server-id=1<br/>    binlog-do-db = testdb<br/>    pid-file= /var/run/mysqld/mysqld.pid<br/>    socket= /var/run/mysqld/mysqld.sock<br/>    datadir= /var/lib/mysql<br/>    #log-error= /var/log/mysql/error.log<br/>    # By default we only accept connections from localhost<br/>    #bind-address= 127.0.0.1<br/>    # Disabling symbolic-links is recommended to prevent assorted security risks<br/>    symbolic-links=0<br/></blockquote>命令符中进入桌面, 把文件上传到 Docker配置里<figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp ./mysqld.cnf mysql-<span class="number">1</span>:/etc/mysql/mysql.conf.d/</span><br></pre></td></tr></table></figure><p>重新启动 Mysql-1 服务端：</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart mysql-<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="3-确认主库配置是否成功"><a href="#3-确认主库配置是否成功" class="headerlink" title="3. 确认主库配置是否成功"></a>3. 确认主库配置是否成功</h3><p>打开Nacvicat Premium, mysql-1服务端中：<br>console查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> master status;</span><br></pre></td></tr></table></figure><blockquote>binlog.000001<br/>154<br/>testdb<br/></blockquote><h2 id="从机配置"><a href="#从机配置" class="headerlink" title="从机配置"></a>从机配置</h2><h3 id="1-修改从库配置文件"><a href="#1-修改从库配置文件" class="headerlink" title="1. 修改从库配置文件"></a>1. 修改从库配置文件</h3><p>桌面新建一个文件 <strong>“mysqld.cnf”</strong><br><strong>注意从机这里只需要配置一下 server-id 即可。</strong></p><blockquote>    [mysqld]<br/>    server-id=2<br/>    pid-file= /var/run/mysqld/mysqld.pid<br/>    socket= /var/run/mysqld/mysqld.sock<br/>    datadir= /var/lib/mysql<br/>    #log-error= /var/log/mysql/error.log<br/>    # By default we only accept connections from localhost<br/>    #bind-address= 127.0.0.1<br/>    # Disabling symbolic-links is recommended to prevent assorted security risks<br/>    symbolic-links=0<br/></blockquote><h3 id="2-命令符中进入桌面-把文件上传到-Docker配置里"><a href="#2-命令符中进入桌面-把文件上传到-Docker配置里" class="headerlink" title="2. 命令符中进入桌面, 把文件上传到 Docker配置里"></a>2. 命令符中进入桌面, 把文件上传到 Docker配置里</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp ./mysqld.cnf mysql-<span class="number">2</span>:/etc/mysql/mysql.conf.d/</span><br></pre></td></tr></table></figure><p>重新启动 Mysql-2 服务端：</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart mysql-<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="3-进入-Mysql-2容器"><a href="#3-进入-Mysql-2容器" class="headerlink" title="3. 进入 Mysql-2容器"></a>3. 进入 Mysql-2容器</h3><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql-<span class="number">2</span> /bin/bash</span><br></pre></td></tr></table></figure><h3 id="4-登录-Mysql"><a href="#4-登录-Mysql" class="headerlink" title="4. 登录 Mysql"></a>4. 登录 Mysql</h3><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p><strong>登陆密码Enter password: root</strong></p><h3 id="5-使用命令配置从机"><a href="#5-使用命令配置从机" class="headerlink" title="5. 使用命令配置从机"></a>5. 使用命令配置从机</h3><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">change master to master_host=<span class="string">&#x27;192.168.101.218&#x27;</span>,master_port=<span class="number">33061</span>,master_user=<span class="string">&#x27;rep1&#x27;</span>,master_password=<span class="string">&#x27;root&#x27;</span>,master_log_file=<span class="string">&#x27;binlog.000001&#x27;</span>,master_log_pos=<span class="number">154</span>,get_master_public_key=<span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>这里配置主机地址、端口以及从机登录主机的用户名和密码，注意最后两个参数要和 master 中的保持一致。</p><h3 id="6-启动slave进程"><a href="#6-启动slave进程" class="headerlink" title="6. 启动slave进程"></a>6. 启动slave进程</h3><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start slave;</span><br></pre></td></tr></table></figure><p>查看从机状态：</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure><p>下面两项值都要为 YES，则表示配置正确：</p><blockquote><p><strong>Slave_IO_Running: Yes</strong><br/><br><strong>Slave_SQL_Running: Yes</strong></p></blockquote><p>至此，配置完成，主机创建库，添加数据，从机会自动同步。<br>如果这两个有一个不为 YES ，表示主从环境搭建失败，此时可以阅读日志，查看出错的原因，再具体问题具体解决。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySql </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3 中自定义插件</title>
      <link href="/2022/10/09/2022.10.09/"/>
      <url>/2022/10/09/2022.10.09/</url>
      
        <content type="html"><![CDATA[<h3 id="自定义全局方法"><a href="#自定义全局方法" class="headerlink" title="自定义全局方法"></a>自定义全局方法</h3><h4 id="Vue2-中定义全局方法"><a href="#Vue2-中定义全局方法" class="headerlink" title="Vue2 中定义全局方法"></a>Vue2 中定义全局方法</h4><p>在 Vue2 中，自定义全局方法的思路如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">postRequest</span> = postRequest;</span><br></pre></td></tr></table></figure><p>通过 Vue.prototype 将一个方法挂载为全局方法，这样，在具体的 .vue 文件中，我们就可以通过 this 来引用这个全局方法了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">this.postRequest(&#x27;/doLogin&#x27;, this.loginForm).then(resp =&gt; &#123;</span><br><span class="line">    this.loading = false;</span><br><span class="line">    if (resp) &#123;</span><br><span class="line">        this.$store.commit(&#x27;INIT_CURRENTHR&#x27;, resp.obj);</span><br><span class="line">        window.sessionStorage.setItem(&quot;user&quot;, JSON.stringify(resp.obj));</span><br><span class="line">        let path = this.$route.query.redirect;</span><br><span class="line">        this.$router.replace((path == &#x27;/&#x27; || path == undefined) ? &#x27;/home&#x27; : path);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        this.vcUrl = &#x27;/verifyCode?time=&#x27;+new Date();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在 Vue2 中，我们可以将一个方法挂载为全局方法。<br>Vue3 这个写法则完全变了：</p><ol><li>定义的方式变了，不再是 Vue.prototype。</li><li>引用的方式变了，因为在 Vue3 中，没法直接通过 this 去引用全局方法了。</li></ol><h4 id="Vue3-中定义全局方法"><a href="#Vue3-中定义全局方法" class="headerlink" title="Vue3 中定义全局方法"></a>Vue3 中定义全局方法</h4><p>方法定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Vue3 中定义全局方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">sayHello</span>=<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello wourld!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义好之后，需要引用，方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;age&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;aa.name&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;aa.author&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;div&gt;&#123;&#123;author&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;button @click=&quot;updateInfo&quot;&gt;更新信息&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;btnClick&quot;&gt;ClickMe&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--直接在 script 节点中定义 setup 属性，然后，script 节点就像以前 jquery 写法一样--&gt;</span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">    //getCurrentInstance 方法可以获取到当前的 Vue 对象</span><br><span class="line">    import &#123;ref, reactive, toRefs, onMounted, getCurrentInstance&#125; from &#x27;vue&#x27;;</span><br><span class="line"></span><br><span class="line">    //来自该方法的 proxy 对象则相当于之前的 this</span><br><span class="line">    const &#123;proxy&#125; = getCurrentInstance();</span><br><span class="line"></span><br><span class="line">    const age = ref(99);</span><br><span class="line">    const aa = reactive(&#123;</span><br><span class="line">        name: &quot;1111&quot;,</span><br><span class="line">        author: &#x27;sihai&#x27;</span><br><span class="line">    &#125;);</span><br><span class="line">    const updateInfo = () =&gt; &#123;</span><br><span class="line">        //修改，注意，在 vue3 中，现在方法中访问变量，不再需要 this</span><br><span class="line">        aa.name = &#x27;111123&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">    //展开的变量</span><br><span class="line">    const &#123;name, author&#125; = toRefs(book);</span><br><span class="line">    onMounted(() =&gt; &#123;</span><br><span class="line">        console.log(this);</span><br><span class="line">    &#125;)</span><br><span class="line">    const btnClick = () =&gt; &#123;</span><br><span class="line">        //想在这里调用全局方法</span><br><span class="line">        proxy.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><ol><li>首先需要导入 getCurrentInstance() 方法。</li><li>从第一步导入的方法中，提取出 proxy 对象，这个 proxy 对象就类似于之前在 Vue2 中用的 this。</li><li>接下来，通过 proxy 对象就可以去引用全局方法了。<br/><br>其他一些曾经在 Vue2 中使用 this 的地方，现在都可以通过 proxy 来代替了。</li></ol><br/><h3 id="自定义插件"><a href="#自定义插件" class="headerlink" title="自定义插件"></a>自定义插件</h3><p>一些工具方法可以定义为全局方法，如果这个全局的工具，不仅仅是一个工具方法，里边还包含了一些页面等，<br/><br>那么此时，全局方法就不适用了。这个时候我们需要定义插件。<br/><br>上面的全局方法定义，可以理解成为一个简单的插件<br/><br>Vue2 和 Vue3 中自定义插件的流程基本上都差不多，但是，插件内部的钩子函数不一样。</p><h4 id="注册全局组件"><a href="#注册全局组件" class="headerlink" title="注册全局组件"></a>注册全局组件</h4><p>首先定义一个组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;a href=&quot;https://github.com/Tsihai&quot;&gt;github&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;a href=&quot;https://www.baidu.com&quot;&gt;baidu&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;MyBanner&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>接下来，就可以在插件中导入组件并注册：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在这里定义插件</span></span><br><span class="line"><span class="comment">//在插件中，可以引入 vue 组件，并注册（这里的注册，就相当于全局注册）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyBanner</span> <span class="keyword">from</span> <span class="string">&quot;@/components/MyBanner&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> app 这个就是 Vue 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> options 这是一个可选参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 当项目启动的时候，插件方法就会自动执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">install</span>: <span class="function">(<span class="params">app, options</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一个插件&quot;</span>)</span><br><span class="line">        <span class="comment">//在这里完成组件的注册，注意，这是一个全局注册</span></span><br><span class="line">        app.<span class="title function_">component</span>(<span class="string">&#x27;my-banner&#x27;</span>, <span class="title class_">MyBanner</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，就可以在项目的任意位置使用这个组件了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;nav&gt;</span><br><span class="line">    &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt; |</span><br><span class="line">    &lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br><span class="line">  &lt;/nav&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!--这里就可以直接使用插件中注册的全局组件了--&gt;</span><br><span class="line">    &lt;my-banner&gt;&lt;/my-banner&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;router-view/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: Avenir, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nav &#123;</span><br><span class="line">  padding: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nav a &#123;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">nav a.router-link-exact-active &#123;</span><br><span class="line">  color: #42b983;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="注册全局指令"><a href="#注册全局指令" class="headerlink" title="注册全局指令"></a>注册全局指令</h4><p>首先注册全局指令：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在这里定义插件</span></span><br><span class="line"><span class="comment">//在插件中，可以引入 vue 组件，并注册（这里的注册，就相当于全局注册）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyBanner</span> <span class="keyword">from</span> <span class="string">&quot;@/components/MyBanner&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> app 这个就是 Vue 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> options 这是一个可选参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 当项目启动的时候，插件方法就会自动执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">install</span>: <span class="function">(<span class="params">app, options</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一个插件&quot;</span>)</span><br><span class="line">        <span class="comment">//在这里完成组件的注册，注意，这是一个全局注册</span></span><br><span class="line">        app.<span class="title function_">component</span>(<span class="string">&#x27;my-banner&#x27;</span>, <span class="title class_">MyBanner</span>);</span><br><span class="line">        <span class="comment">//自定义指令，第一个参数是自定义指令的名称，第二个参数自定义指令的逻辑</span></span><br><span class="line">        <span class="comment">//el 表示添加这个自定义指令的节点</span></span><br><span class="line">        <span class="comment">//binding 中包含了自定义指令的参数</span></span><br><span class="line">        app.<span class="title function_">directive</span>(<span class="string">&#x27;font-size&#x27;</span>, <span class="function">(<span class="params">el, binding, vnode</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> size = <span class="number">18</span>;</span><br><span class="line">            <span class="comment">//binding.arg 获取到的就是 small 或者 large</span></span><br><span class="line">            <span class="keyword">switch</span> (binding.<span class="property">arg</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;small&quot;</span>:</span><br><span class="line">                    size = <span class="number">14</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;large&quot;</span>:</span><br><span class="line">                    size = <span class="number">36</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="attr">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//为使用了 v-font-size 指令的标签设置 font-size 的大小</span></span><br><span class="line">            el.<span class="property">style</span>.<span class="property">fontSize</span> = size + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以在任意地方去使用这个全局指令了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;a href=&quot;https://github.com/Tsihai&quot; v-font-size:large&gt;github&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;!--使用自定义指令，去指定文本的大小，指令的名字就是 font-size--&gt;</span><br><span class="line">            &lt;a href=&quot;https://www.baidu.com&quot; v-font-size:small&gt;baidu&lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        name: &quot;MyBanner&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h4><p>自定义插件的时候，可以通过 options 传递参数到插件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在这里定义插件</span></span><br><span class="line"><span class="comment">//在插件中，可以引入 vue 组件，并注册（这里的注册，就相当于全局注册）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyBanner</span> <span class="keyword">from</span> <span class="string">&quot;@/components/MyBanner&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> app 这个就是 Vue 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> options 这是一个可选参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 当项目启动的时候，插件方法就会自动执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">install</span>: <span class="function">(<span class="params">app, options</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一个插件&quot;</span>)</span><br><span class="line">        <span class="comment">//在这里完成组件的注册，注意，这是一个全局注册</span></span><br><span class="line">        app.<span class="title function_">component</span>(<span class="string">&#x27;my-banner&#x27;</span>, <span class="title class_">MyBanner</span>);</span><br><span class="line">        <span class="comment">//自定义指令，第一个参数是自定义指令的名称，第二个参数自定义指令的逻辑</span></span><br><span class="line">        <span class="comment">//el 表示添加这个自定义指令的节点</span></span><br><span class="line">        <span class="comment">//binding 中包含了自定义指令的参数</span></span><br><span class="line">        app.<span class="title function_">directive</span>(<span class="string">&#x27;font-size&#x27;</span>, <span class="function">(<span class="params">el, binding, vnode</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> size = <span class="number">18</span>;</span><br><span class="line">            <span class="comment">//binding.arg 获取到的就是 small 或者 large</span></span><br><span class="line">            <span class="keyword">switch</span> (binding.<span class="property">arg</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;small&quot;</span>:</span><br><span class="line">                    size = options.<span class="property">fontSize</span>.<span class="property">small</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;large&quot;</span>:</span><br><span class="line">                    size = options.<span class="property">fontSize</span>.<span class="property">large</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="attr">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//为使用了 v-font-size 指令的标签设置 font-size 的大小</span></span><br><span class="line">            el.<span class="property">style</span>.<span class="property">fontSize</span> = size + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>options.fontSize.small 就是插件在引用的时候传入的参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">    <span class="comment">//安装插件</span></span><br><span class="line">    .<span class="title function_">use</span>(plugins,&#123;</span><br><span class="line">        <span class="attr">fontSize</span>:&#123;</span><br><span class="line">            <span class="attr">small</span>: <span class="number">6</span>,</span><br><span class="line">            <span class="attr">large</span>: <span class="number">64</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">use</span>(store)</span><br><span class="line">    .<span class="title function_">use</span>(router)</span><br><span class="line">    .<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="provide-和-inject"><a href="#provide-和-inject" class="headerlink" title="provide 和 inject"></a>provide 和 inject</h4><p>可以通过 provide 去定义一个方法，然后在需要使用的使用，通过 inject 去注入这个方法然后使用。<br>方法定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在这里定义插件</span></span><br><span class="line"><span class="comment">//在插件中，可以引入 vue 组件，并注册（这里的注册，就相当于全局注册）</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyBanner</span> <span class="keyword">from</span> <span class="string">&quot;@/components/MyBanner&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> app 这个就是 Vue 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> options 这是一个可选参数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 当项目启动的时候，插件方法就会自动执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">install</span>: <span class="function">(<span class="params">app, options</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一个插件&quot;</span>)</span><br><span class="line">        <span class="comment">//在这里完成组件的注册，注意，这是一个全局注册</span></span><br><span class="line">        app.<span class="title function_">component</span>(<span class="string">&#x27;my-banner&#x27;</span>, <span class="title class_">MyBanner</span>);</span><br><span class="line">        <span class="comment">//自定义指令，第一个参数是自定义指令的名称，第二个参数自定义指令的逻辑</span></span><br><span class="line">        <span class="comment">//el 表示添加这个自定义指令的节点</span></span><br><span class="line">        <span class="comment">//binding 中包含了自定义指令的参数</span></span><br><span class="line">        app.<span class="title function_">directive</span>(<span class="string">&#x27;font-size&#x27;</span>, <span class="function">(<span class="params">el, binding, vnode</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> size = <span class="number">18</span>;</span><br><span class="line">            <span class="comment">//binding.arg 获取到的就是 small 或者 large</span></span><br><span class="line">            <span class="keyword">switch</span> (binding.<span class="property">arg</span>) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;small&quot;</span>:</span><br><span class="line">                    size = options.<span class="property">fontSize</span>.<span class="property">small</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">&quot;large&quot;</span>:</span><br><span class="line">                    size = options.<span class="property">fontSize</span>.<span class="property">large</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="attr">default</span>:</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//为使用了 v-font-size 指令的标签设置 font-size 的大小</span></span><br><span class="line">            el.<span class="property">style</span>.<span class="property">fontSize</span> = size + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">clickMe</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;========clickMe========&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//这里相当于是注册方法</span></span><br><span class="line">        app.<span class="title function_">provide</span>(<span class="string">&#x27;clickMe&#x27;</span>, clickMe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意定义的时候，方法要写在 install 中。<br>方法使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://github.com/Tsihai&quot;</span> <span class="attr">v-font-size:large</span>&gt;</span>github<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="comment">&lt;!--使用自定义指令，去指定文本的大小，指令的名字就是 font-size--&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> <span class="attr">v-font-size:small</span>&gt;</span>baidu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>ClickMe<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">import</span> &#123;inject&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">name</span>: <span class="string">&quot;MyBanner&quot;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="comment">//注入 clickMe 函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">const</span> clickMe = <span class="title function_">inject</span>(<span class="string">&#x27;clickMe&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">clickMe</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">btnClick</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>建议，最好是利用 Vue3 中的 setup 一起来使用。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决maven依赖导入失败问题</title>
      <link href="/2022/10/02/2022.10.02/"/>
      <url>/2022/10/02/2022.10.02/</url>
      
        <content type="html"><![CDATA[<p>由于网络问题，maven依赖经常会导入失败，私服上的以来导入失败概率低一些，<br/><br>maven中央仓库上的依赖导入失败的概率则相对较高，在依赖导入失败，进而导致项目无法正常运行时还不知道是项目依赖导入失败<br/></p><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>首先，一般安装好maven后，网上都会有教程将maven镜像站换为aliyun的镜像站，具体是在setting.xml文件的mirrors节点中添加如下配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果本地没有setting.xml文件，则可以自行创建一个该文件，相关节点要和官方的一致。</p><p>但是这个方案也不是百分百有效的，我之前就遇到这样的情况，依赖死活下载不下来，镜像站已经改成aliyun的了，<br/><br>还是不行，后来尝试把这段配置注释掉，换回默认的下载源，就成功了，因此，当遇到下载失败的情况时，可以在官方镜像站和aliyun之间进行切换。</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>有的时候，依赖虽然下载失败了，但是相关文件夹中却多了以 .lastUpdated为后缀的文件，<br/><br>此时，如果开发者在开发工具中反复导入，会发现始终无法导入成功，这个时候就需要删除本地仓库中相关的 .lastUpdated文件，可以通过文件搜索找到本地仓库(.m2文件夹)中所有的以 .lastUpdated为后缀的文件，找到后全部删除，再在开发工具中重新导入依赖。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>以上两种方案都试过之后，还是有可能导入失败，此时，只需要重复上面的步骤即可，我个人目前依赖下载失败的问题，都是通过以上两步解决的，屡试不爽。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯云服务器下 安装fastdfs文件服务器</title>
      <link href="/2022/09/16/2022.09.16/"/>
      <url>/2022/09/16/2022.09.16/</url>
      
        <content type="html"><![CDATA[<h2 id="FastDFS-安装"><a href="#FastDFS-安装" class="headerlink" title="FastDFS 安装"></a>FastDFS 安装</h2><p>在腾讯云服务器上搭建fastdfs分布式文件存储服务器，并整合nginx实现浏览器访问<br/><br>系统环境：云服务器系统：CentOS 7.9 64位</p><h3 id="一、搭配编译环境"><a href="#一、搭配编译环境" class="headerlink" title="一、搭配编译环境"></a>一、搭配编译环境</h3><ol><li><strong>安装 gcc</strong><br/><br>由于 FastDFS 采用 C 语言开发，所以在安装之前，如果没有 gcc 环境，需要先安装<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y gcc gcc-c++</span><br></pre></td></tr></table></figure></li><li><strong>安装 libevent</strong><br/><br>由于 FastDFS 依赖 libevent 库，也需要安装<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install libevent</span><br></pre></td></tr></table></figure><strong>注：如果出现</strong><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc-c++: Nothing to do Package gcc-c++ already installed and latest</span><br></pre></td></tr></table></figure>则需要：yum remove gcc-4.8.5-39.el7.x86_64（根据提醒的版本，修改）<br/><br>然后重新执行 yum -y install gcc-c++</li></ol><h3 id="二、下载压缩包"><a href="#二、下载压缩包" class="headerlink" title="二、下载压缩包"></a>二、下载压缩包</h3><p><strong>创建文件夹：</strong></p><ol><li>进入文件夹: cd &#x2F;usr&#x2F;local</li><li>创建文件夹: mkdir fastdfs<br/></li></ol><p><strong>默认文件位置： cd &#x2F;usr&#x2F;local&#x2F;fastdfs</strong></p><h4 id="libfastcommon-安装"><a href="#libfastcommon-安装" class="headerlink" title="libfastcommon 安装"></a>libfastcommon 安装<br/></h4><p>libfastcommon 也是一个库，是由 FastDFS 官方提供的，包含了一些 fastdfs 运行所需要的基础库。<br/></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">下载命令： wget https://github.com/happyfish100/libfastcommon/archive/V1.0.43.tar.gz</span><br><span class="line">解压： tar -zxvf V1.0.43.tar.gz</span><br><span class="line">进入文件夹： cd libfastcommon-1.0.43/</span><br><span class="line">编译： ./make.sh</span><br><span class="line">安装： ./make.sh install</span><br></pre></td></tr></table></figure><h4 id="fastDFS-tracker-storage-安装"><a href="#fastDFS-tracker-storage-安装" class="headerlink" title="fastDFS (tracker+storage) 安装"></a>fastDFS (tracker+storage) 安装<br/></h4><p>Tracker 和 Storage 是相同的安装包，无需重复下载</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">下载命令： wget https://github.com/happyfish100/fastdfs/archive/V6.06.tar.gz</span><br><span class="line">解压： tar -zxvf V6.06.tar.gz</span><br><span class="line">进入文件夹： cd fastdfs-6.06/</span><br><span class="line">编译： ./make.sh</span><br><span class="line">安装： ./make.sh install</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 如果需要安装最新版本的 libfastcommon 和 fastDFS 的话，一定要注意版本之间的关系。否则可能报错!</p><h4 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a>Nginx 安装</h4><h2 id="FastDFS-架构"><a href="#FastDFS-架构" class="headerlink" title="FastDFS 架构"></a>FastDFS 架构</h2><p>在互联网应用中，我们必须考虑解决文件大容量存储和高性能访问的问题。常见的图片存储、视频存储、文档存储我们都可以采用 fastdsf 来实现。<br/><br>fastdfs是一款分布式文件管理系统，主要包括了四个方面的功能：<br/></p><ol><li>文件存储</li><li>文件同步</li><li>文件上传</li><li>文件下载</li></ol><p>FastDFS 架构包括了 Tracker 和 Storage 两部分， Tracker 用来追踪文件，相当于是文件的索引，而 Storage 则是用来保存文件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> FastDFS </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于作者</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/sihai.css"/>
      <url>/css/sihai.css</url>
      
        <content type="html"><![CDATA[#footer {    background: transparent;}.nav-fixed #nav{    transform: translateY(58px)!important;    -webkit-transform: translateY(58px)!important;    -moz-transform: translateY(58px)!important;    -ms-transform: translateY(58px)!important;    -o-transform: translateY(58px)!important;}#nav{    transition: none!important;    -webkit-transition: none!important;    -moz-transition: none!important;    -ms-transition: none!important;    -o-transition: none!important;    background: transparent;}/*导航栏居中*/#nav-right{    flex:1 1 auto;    justify-content: flex-end;    margin-left: auto;    display: flex;    flex-wrap:nowrap;}#page-header {    /* 其他样式属性 */    background-color: transparent;}/* 主页所有文章页面背景 */#aside_content .card-widget,#recent-posts>.recent-post-item,.layout_page>div:first-child:not(.recent-posts),.layout_post>#page,.layout_post>#post,.read-mode .layout_post>#post {    /* 以下代表透明度为0.5 */    background: rgba(255, 255, 255, .8);}#web_bg {    background-image: url("../img/index_img.jpg")}#aside-content .card-widget {    background: rgba(255, 255, 255, .8);}#aside-content .aside-list > .aside-list-item:not(:last-child) {    border-bottom: 1px dashed rgba(255, 255, 255, 0);}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>friends</title>
      <link href="/friends/index.html"/>
      <url>/friends/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="友链交换"><a href="#友链交换" class="headerlink" title="友链交换"></a>友链交换</h1><p>想要交换友链的小伙伴，欢迎在留言板留言，留言格式：</p><ul><li><strong>名称：</strong>你的博客名称</li><li><strong>地址：</strong>你的博客地址</li><li><strong>简介：</strong>一句话简介</li><li><strong>头像：</strong>你的头像地址</li></ul><p>例如我的博客友链，大家可以加到自己博客里哦：</p><ul><li><strong>名称：</strong>余白</li><li><strong>地址：</strong><a href="https://heiyushaoye.github.io/">https://heiyushaoye.github.io</a></li><li><strong>简介：</strong>无处不在</li><li><strong>头像：</strong>头像地址</li></ul>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友情链接</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/live2d-widget/README.html"/>
      <url>/live2d-widget/README.html</url>
      
        <content type="html"><![CDATA[<h1 id="Live2D-Widget"><a href="#Live2D-Widget" class="headerlink" title="Live2D Widget"></a>Live2D Widget</h1><p><img src="https://forthebadge.com/images/badges/built-with-love.svg"><br><img src="https://forthebadge.com/images/badges/uses-html.svg"><br><img src="https://forthebadge.com/images/badges/made-with-javascript.svg"><br><img src="https://forthebadge.com/images/badges/contains-cat-gifs.svg"><br><img src="https://forthebadge.com/images/badges/powered-by-electricity.svg"><br><img src="https://forthebadge.com/images/badges/makes-people-smile.svg"></p><h2 id="特性-Feature"><a href="#特性-Feature" class="headerlink" title="特性 Feature"></a>特性 Feature</h2><p>在网页中添加 Live2D 看板娘。兼容 PJAX，支持无刷新加载。<br>Add Live2D widget to web page. Compatible with PJAX.</p><p><img src="assets/screenshot-2.png" width="280"><img src="assets/screenshot-3.png" width="280"><img src="assets/screenshot-1.png" width="270"></p><p>（注：以上人物模型仅供展示之用，本仓库并不包含任何模型。）</p><p>你也可以查看示例网页：</p><ul><li>在 <a href="https://zhangshuqiao.org/">米米的博客</a> 的左下角可查看效果</li><li><a href="https://mi.js.org/live2d-widget/demo/demo.html">demo.html</a>，展现基础功能</li><li><a href="https://mi.js.org/live2d-widget/demo/login.html">login.html</a>，仿 NPM 的登陆界面</li></ul><h2 id="使用-Usage"><a href="#使用-Usage" class="headerlink" title="使用 Usage"></a>使用 Usage</h2><p>如果你是小白，或者只需要最基础的功能，那么只用将这一行代码加入 html 页面的 <code>head</code> 或 <code>body</code> 中，即可加载看板娘：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://fastly.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/autoload.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加代码的位置取决于你的网站的构建方式。例如，如果你使用的是 <a href="https://hexo.io/">Hexo</a>，那么需要在主题的模版文件中添加以上代码。对于用各种模版引擎生成的页面，修改方法类似。<br>如果网站启用了 PJAX，由于看板娘不必每页刷新，需要注意将该脚本放到 PJAX 刷新区域之外。</p><p><strong>但是！我们强烈推荐自己进行配置，让看板娘更加适合你的网站！</strong><br>如果你有兴趣自己折腾的话，请看下面的详细说明。</p><h2 id="配置-Configuration"><a href="#配置-Configuration" class="headerlink" title="配置 Configuration"></a>配置 Configuration</h2><p>你可以对照 <code>autoload.js</code> 的源码查看可选的配置项目。<code>autoload.js</code> 会自动加载三个文件：<code>waifu.css</code>，<code>live2d.min.js</code> 和 <code>waifu-tips.js</code>。<code>waifu-tips.js</code> 会创建 <code>initWidget</code> 函数，这就是加载看板娘的主函数。<code>initWidget</code> 函数接收一个 Object 类型的参数，作为看板娘的配置。以下是配置选项：</p><table><thead><tr><th>选项</th><th>类型</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td><code>waifuPath</code></td><td><code>string</code></td><td><code>https://fastly.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/waifu-tips.json</code></td><td>看板娘资源路径，可自行修改</td></tr><tr><td><code>apiPath</code></td><td><code>string</code></td><td><code>https://live2d.fghrsh.net/api/</code></td><td>API 路径，可选参数</td></tr><tr><td><code>cdnPath</code></td><td><code>string</code></td><td><code>https://fastly.jsdelivr.net/gh/fghrsh/live2d_api/</code></td><td>CDN 路径，可选参数</td></tr><tr><td><code>tools</code></td><td><code>string[]</code></td><td>见 <code>autoload.js</code></td><td>加载的小工具按钮，可选参数</td></tr></tbody></table><p>其中，<code>apiPath</code> 和 <code>cdnPath</code> 两个参数设置其中一项即可。<code>apiPath</code> 是后端 API 的 URL，可以自行搭建，并增加模型（需要修改的内容比较多，此处不再赘述），可以参考 <a href="https://github.com/fghrsh/live2d_api">live2d_api</a>。而 <code>cdnPath</code> 则是通过 jsDelivr 这样的 CDN 服务加载资源，更加稳定。</p><h2 id="自定义-Customization"><a href="#自定义-Customization" class="headerlink" title="自定义 Customization"></a>自定义 Customization</h2><p>如果以上「配置」部分提供的选项还不足以满足你的需求，那么你可以自己进行修改。本仓库的目录结构如下：</p><ul><li><code>src/waifu-tips.js</code> 包含了按钮和对话框的逻辑；</li><li><code>waifu-tips.js</code> 是由 <code>src/waifu-tips.js</code> 自动打包生成的，不建议直接修改；</li><li><code>waifu-tips.json</code> 中定义了触发条件（<code>selector</code>，CSS 选择器）和触发时显示的文字（<code>text</code>）；</li><li><code>waifu.css</code> 是看板娘的样式表。</li></ul><p><code>waifu-tips.json</code> 中默认的 CSS 选择器规则是对 Hexo 的 <a href="http://github.com/next-theme/hexo-theme-next">NexT 主题</a> 有效的，为了适用于你自己的网页，可能需要自行修改，或增加新内容。<br><strong>警告：<code>waifu-tips.json</code> 中的内容可能不适合所有年龄段，或不宜在工作期间访问。在使用时，请自行确保它们是合适的。</strong></p><p>要在本地部署本项目的开发测试环境，你需要安装 Node.js 和 npm，然后执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/stevenjoezhang/live2d-widget.git</span><br><span class="line">npm install</span><br><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>如果有任何疑问，欢迎提 Issue。如果有任何修改建议，欢迎提 Pull Request。</p><h2 id="部署-Deploy"><a href="#部署-Deploy" class="headerlink" title="部署 Deploy"></a>部署 Deploy</h2><p>在本地完成了修改后，你可以将修改后的项目部署在服务器上，或者通过 CDN 加载，以便在网页中使用。</p><h3 id="Using-CDN"><a href="#Using-CDN" class="headerlink" title="Using CDN"></a>Using CDN</h3><p>要自定义有关内容，可以把这个仓库 Fork 一份，然后把修改后的内容通过 git push 到你的仓库中。这时，使用方法对应地变为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://fastly.jsdelivr.net/gh/username/live2d-widget@latest/autoload.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>将此处的 <code>username</code> 替换为你的 GitHub 用户名。为了使 CDN 的内容正常刷新，需要创建新的 git tag 并推送至 GitHub 仓库中，否则此处的 <code>@latest</code> 仍然指向更新前的文件。此外 CDN 本身存在缓存，因此改动可能需要一定的时间生效。相关文档：</p><ul><li><a href="https://git-scm.com/book/en/v2/Git-Basics-Tagging">Git Basics - Tagging</a></li><li><a href="https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository">Managing releases in a repository</a></li></ul><h3 id="Self-host"><a href="#Self-host" class="headerlink" title="Self-host"></a>Self-host</h3><p>你也可以直接把这些文件放到服务器上，而不是通过 CDN 加载。</p><ul><li>如果你能够通过 <code>ssh</code> 连接你的主机，请把 Fork 并修改后的代码仓库克隆到服务器上。</li><li>如果你的主机无法用 <code>ssh</code> 连接（例如一般的虚拟主机），请在本地修改好代码后，通过 <code>ftp</code> 等方式将文件上传到主机的网站的目录下。</li><li>如果你是通过 Hexo 等工具部署的静态博客，请把本项目的代码放在博客源文件目录下（例如 <code>source</code> 目录）。重新部署博客时，相关文件就会自动上传到对应的路径下。为了避免这些文件被 Hexo 插件错误地修改，可能需要设置 <code>skip_render</code>。</li></ul><p>这样，整个项目就可以通过你的域名访问了。不妨试试能否正常地通过浏览器打开 <code>autoload.js</code> 和 <code>live2d.min.js</code> 等文件，并确认这些文件的内容是完整和正确的。<br>一切正常的话，接下来修改 <code>autoload.js</code> 中的常量 <code>live2d_path</code> 为 <code>live2d-widget</code> 这一目录的 URL 即可。比如说，如果你能够通过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://example.com/path/to/live2d-widget/live2d.min.js</span><br></pre></td></tr></table></figure><p>访问到 <code>live2d.min.js</code>，那么就把 <code>live2d_path</code> 的值修改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://example.com/path/to/live2d-widget/</span><br></pre></td></tr></table></figure><p>路径末尾的 <code>/</code> 一定要加上。<br>完成后，在你要添加看板娘的界面加入</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://example.com/path/to/live2d-widget/autoload.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>就可以加载了。</p><h2 id="鸣谢-Thanks"><a href="#鸣谢-Thanks" class="headerlink" title="鸣谢 Thanks"></a>鸣谢 Thanks</h2><a href="https://www.browserstack.com/">  <picture>    <source media="(prefers-color-scheme: dark)" height="80" srcset="https://d98b8t1nnulk5.cloudfront.net/production/images/layout/logo-header.png?1469004780">    <source media="(prefers-color-scheme: light)" height="80" srcset="https://live.browserstack.com/images/opensource/browserstack-logo.svg">    <img alt="BrowserStack Logo" height="80" src="https://live.browserstack.com/images/opensource/browserstack-logo.svg">  </picture></a><blockquote><p>感谢 BrowserStack 容许我们在真实的浏览器中测试此项目。<br>Thanks to <a href="https://www.browserstack.com/">BrowserStack</a> for providing the infrastructure that allows us to test in real browsers!</p></blockquote><a href="https://www.jsdelivr.com">  <picture>    <source media="(prefers-color-scheme: dark)" height="80" srcset="https://raw.githubusercontent.com/jsdelivr/jsdelivr-media/master/white/svg/jsdelivr-logo-horizontal.svg">    <source media="(prefers-color-scheme: light)" height="80" srcset="https://raw.githubusercontent.com/jsdelivr/jsdelivr-media/master/default/svg/jsdelivr-logo-horizontal.svg">    <img alt="jsDelivr Logo" height="80" src="https://raw.githubusercontent.com/jsdelivr/jsdelivr-media/master/default/svg/jsdelivr-logo-horizontal.svg">  </picture></a><blockquote><p>感谢 jsDelivr 提供的 CDN 服务。<br>Thanks jsDelivr for providing public CDN service.</p></blockquote><p>代码自这篇博文魔改而来：<br><a href="https://www.fghrsh.net/post/123.html">https://www.fghrsh.net/post/123.html</a></p><p>感谢 <a href="https://hitokoto.cn/">一言</a> 提供的语句接口。</p><p>点击看板娘的纸飞机按钮时，会出现一个彩蛋，这来自于 <a href="http://www.websiteasteroids.com/">WebsiteAsteroids</a>。</p><h2 id="更多-More"><a href="#更多-More" class="headerlink" title="更多 More"></a>更多 More</h2><p>更多内容可以参考：<br><a href="https://nocilol.me/archives/lab/add-dynamic-poster-girl-with-live2d-to-your-blog-02">https://nocilol.me/archives/lab/add-dynamic-poster-girl-with-live2d-to-your-blog-02</a><br><a href="https://github.com/xiazeyu/live2d-widget.js">https://github.com/xiazeyu/live2d-widget.js</a><br><a href="https://github.com/summerscar/live2dDemo">https://github.com/summerscar/live2dDemo</a></p><p>关于后端 API 模型：<br><a href="https://github.com/xiazeyu/live2d-widget-models">https://github.com/xiazeyu/live2d-widget-models</a><br><a href="https://github.com/xiaoski/live2d_models_collection">https://github.com/xiaoski/live2d_models_collection</a></p><p>除此之外，还有桌面版本：<br><a href="https://github.com/amorist/platelet">https://github.com/amorist/platelet</a><br><a href="https://github.com/akiroz/Live2D-Widget">https://github.com/akiroz/Live2D-Widget</a><br><a href="https://github.com/zenghongtu/PPet">https://github.com/zenghongtu/PPet</a><br><a href="https://github.com/LikeNeko/L2dPetForMac">https://github.com/LikeNeko/L2dPetForMac</a></p><p>以及 Wallpaper Engine：<br><a href="https://github.com/guansss/nep-live2d">https://github.com/guansss/nep-live2d</a></p><h2 id="许可证-License"><a href="#许可证-License" class="headerlink" title="许可证 License"></a>许可证 License</h2><p>Released under the GNU General Public License v3<br><a href="http://www.gnu.org/licenses/gpl-3.0.html">http://www.gnu.org/licenses/gpl-3.0.html</a></p><p>本仓库并不包含任何模型，用作展示的所有 Live2D 模型、图片、动作数据等版权均属于其原作者，仅供研究学习，不得用于商业用途。</p><p>Live2D 官方网站：<br><a href="https://www.live2d.com/en/">https://www.live2d.com/en/</a><br><a href="https://live2d.github.io/">https://live2d.github.io</a></p><p>Live2D Cubism Core は Live2D Proprietary Software License で提供しています。<br><a href="https://www.live2d.com/eula/live2d-proprietary-software-license-agreement_en.html">https://www.live2d.com/eula/live2d-proprietary-software-license-agreement_en.html</a><br>Live2D Cubism Components は Live2D Open Software License で提供しています。<br><a href="http://www.live2d.com/eula/live2d-open-software-license-agreement_en.html">http://www.live2d.com/eula/live2d-open-software-license-agreement_en.html</a></p><blockquote><p>The terms and conditions do prohibit modification, but obfuscating in <code>live2d.min.js</code> would not be considered illegal modification.</p></blockquote><p><a href="https://community.live2d.com/discussion/140/webgl-developer-licence-and-javascript-question">https://community.live2d.com/discussion/140/webgl-developer-licence-and-javascript-question</a></p><h2 id="更新-Update"><a href="#更新-Update" class="headerlink" title="更新 Update"></a>更新 Update</h2><p>2018年10月31日，由 fghrsh 提供的原 API 停用，请更新至新地址。参考文章：<br><a href="https://www.fghrsh.net/post/170.html">https://www.fghrsh.net/post/170.html</a></p><p>2020年1月1日起，本项目不再依赖于 jQuery。</p><p>2022年11月1日起，本项目不再需要用户单独加载 Font Awesome。</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/live2d-widget/autoload.js"/>
      <url>/live2d-widget/autoload.js</url>
      
        <content type="html"><![CDATA[// live2d_path 参数建议使用绝对路径const live2d_path = "https://fastly.jsdelivr.net/gh/stevenjoezhang/live2d-widget@latest/";//const live2d_path = "/live2d-widget/";// 封装异步加载资源的方法function loadExternalResource(url, type) {return new Promise((resolve, reject) => {let tag;if (type === "css") {tag = document.createElement("link");tag.rel = "stylesheet";tag.href = url;}else if (type === "js") {tag = document.createElement("script");tag.src = url;}if (tag) {tag.onload = () => resolve(url);tag.onerror = () => reject(url);document.head.appendChild(tag);}});}// 加载 waifu.css live2d.min.js waifu-tips.jsif (screen.width >= 768) {Promise.all([loadExternalResource(live2d_path + "waifu.css", "css"),loadExternalResource(live2d_path + "live2d.min.js", "js"),loadExternalResource(live2d_path + "waifu-tips.js", "js")]).then(() => {// 配置选项的具体用法见 README.mdinitWidget({waifuPath: live2d_path + "waifu-tips.json",//apiPath: "https://live2d.fghrsh.net/api/",cdnPath: "https://fastly.jsdelivr.net/gh/fghrsh/live2d_api/",tools: ["hitokoto", "asteroids", "switch-model", "switch-texture", "photo", "info", "quit"]});});}console.log(`  く__,.ヘヽ.        /  ,ー､ 〉           ＼ ', !-─‐-i  /  /´           ／｀ｰ'       L/／｀ヽ､         /   ／,   /|   ,   ,       ',       ｲ   / /-‐/  ｉ  L_ ﾊ ヽ!   i        ﾚ ﾍ 7ｲ｀ﾄ   ﾚ'ｧ-ﾄ､!ハ|   |          !,/7 '0'     ´0iソ|    |          |.从"    _     ,,,, / |./    |          ﾚ'| i＞.､,,__  _,.イ /   .i   |            ﾚ'| | / k_７_/ﾚ'ヽ,  ﾊ.  |              | |/i 〈|/   i  ,.ﾍ |  i  |             .|/ /  ｉ：    ﾍ!    ＼  |              kヽ>､ﾊ    _,.ﾍ､    /､!              !'〈//｀Ｔ´', ＼ ｀'7'ｰr'              ﾚ'ヽL__|___i,___,ンﾚ|ノ                  ﾄ-,/  |___./                  'ｰ'    !_,.:`);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/live2d-widget/package.json"/>
      <url>/live2d-widget/package.json</url>
      
        <content type="html"><![CDATA[{"name":"live2d-widget","version":"0.9.0","description":"Live2D widget for web pages","main":"autoload.js","type":"module","scripts":{"build":"rollup -c rollup.config.js -f iife | terser -c -m > waifu-tips.js","build-dev":"rollup -c rollup.config.js -f iife -o waifu-tips.js -w"},"repository":{"type":"git","url":"git+https://github.com/stevenjoezhang/live2d-widget.git"},"keywords":["Live2d"],"author":"stevenjoezhang <stevenjoezhang@gmail.com>","license":"GPL-3.0-or-later","bugs":{"url":"https://github.com/stevenjoezhang/live2d-widget/issues"},"homepage":"https://github.com/stevenjoezhang/live2d-widget#readme","devDependencies":{"@fortawesome/fontawesome-free":"^6.2.0","@rollup/plugin-node-resolve":"^15.0.0","@rollup/pluginutils":"^5.0.1","rollup":"^3.2.3","terser":"^5.15.1"}}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/live2d-widget/live2d.min.js"/>
      <url>/live2d-widget/live2d.min.js</url>
      
        <content type="html"><![CDATA[!function(t){function i(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,i),o.l=!0,o.exports}var e={};i.m=t,i.c=e,i.d=function(t,e,r){i.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:r})},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},i.p="",i(i.s=4)}([function(t,i,e){"use strict";function r(){this.live2DModel=null,this.modelMatrix=null,this.eyeBlink=null,this.physics=null,this.pose=null,this.debugMode=!1,this.initialized=!1,this.updating=!1,this.alpha=1,this.accAlpha=0,this.lipSync=!1,this.lipSyncValue=0,this.accelX=0,this.accelY=0,this.accelZ=0,this.dragX=0,this.dragY=0,this.startTimeMSec=null,this.mainMotionManager=new h,this.expressionManager=new h,this.motions={},this.expressions={},this.isTexLoaded=!1}function o(){AMotion.prototype.constructor.call(this),this.paramList=new Array}function n(){this.id="",this.type=-1,this.value=null}function s(){this.nextBlinkTime=null,this.stateStartTime=null,this.blinkIntervalMsec=null,this.eyeState=g.STATE_FIRST,this.blinkIntervalMsec=4e3,this.closingMotionMsec=100,this.closedMotionMsec=50,this.openingMotionMsec=150,this.closeIfZero=!0,this.eyeID_L="PARAM_EYE_L_OPEN",this.eyeID_R="PARAM_EYE_R_OPEN"}function _(){this.tr=new Float32Array(16),this.identity()}function a(t,i){_.prototype.constructor.call(this),this.width=t,this.height=i}function h(){MotionQueueManager.prototype.constructor.call(this),this.currentPriority=null,this.reservePriority=null,this.super=MotionQueueManager.prototype}function l(){this.physicsList=new Array,this.startTimeMSec=UtSystem.getUserTimeMSec()}function $(){this.lastTime=0,this.lastModel=null,this.partsGroups=new Array}function u(t){this.paramIndex=-1,this.partsIndex=-1,this.link=null,this.id=t}function p(){this.EPSILON=.01,this.faceTargetX=0,this.faceTargetY=0,this.faceX=0,this.faceY=0,this.faceVX=0,this.faceVY=0,this.lastTimeSec=0}function f(){_.prototype.constructor.call(this),this.screenLeft=null,this.screenRight=null,this.screenTop=null,this.screenBottom=null,this.maxLeft=null,this.maxRight=null,this.maxTop=null,this.maxBottom=null,this.max=Number.MAX_VALUE,this.min=0}function c(){}var d=0;r.prototype.getModelMatrix=function(){return this.modelMatrix},r.prototype.setAlpha=function(t){t>.999&&(t=1),t<.001&&(t=0),this.alpha=t},r.prototype.getAlpha=function(){return this.alpha},r.prototype.isInitialized=function(){return this.initialized},r.prototype.setInitialized=function(t){this.initialized=t},r.prototype.isUpdating=function(){return this.updating},r.prototype.setUpdating=function(t){this.updating=t},r.prototype.getLive2DModel=function(){return this.live2DModel},r.prototype.setLipSync=function(t){this.lipSync=t},r.prototype.setLipSyncValue=function(t){this.lipSyncValue=t},r.prototype.setAccel=function(t,i,e){this.accelX=t,this.accelY=i,this.accelZ=e},r.prototype.setDrag=function(t,i){this.dragX=t,this.dragY=i},r.prototype.getMainMotionManager=function(){return this.mainMotionManager},r.prototype.getExpressionManager=function(){return this.expressionManager},r.prototype.loadModelData=function(t,i){var e=c.getPlatformManager();this.debugMode&&e.log("Load model : "+t);var r=this;e.loadLive2DModel(t,function(t){if(r.live2DModel=t,r.live2DModel.saveParam(),0!=Live2D.getError())return void console.error("Error : Failed to loadModelData().");r.modelMatrix=new a(r.live2DModel.getCanvasWidth(),r.live2DModel.getCanvasHeight()),r.modelMatrix.setWidth(2),r.modelMatrix.setCenterPosition(0,0),i(r.live2DModel)})},r.prototype.loadTexture=function(t,i,e){d++;var r=c.getPlatformManager();this.debugMode&&r.log("Load Texture : "+i);var o=this;r.loadTexture(this.live2DModel,t,i,function(){d--,0==d&&(o.isTexLoaded=!0),"function"==typeof e&&e()})},r.prototype.loadMotion=function(t,i,e){var r=c.getPlatformManager();this.debugMode&&r.log("Load Motion : "+i);var o=null,n=this;r.loadBytes(i,function(i){o=Live2DMotion.loadMotion(i),null!=t&&(n.motions[t]=o),e(o)})},r.prototype.loadExpression=function(t,i,e){var r=c.getPlatformManager();this.debugMode&&r.log("Load Expression : "+i);var n=this;r.loadBytes(i,function(i){null!=t&&(n.expressions[t]=o.loadJson(i)),"function"==typeof e&&e()})},r.prototype.loadPose=function(t,i){var e=c.getPlatformManager();this.debugMode&&e.log("Load Pose : "+t);var r=this;try{e.loadBytes(t,function(t){r.pose=$.load(t),"function"==typeof i&&i()})}catch(t){console.warn(t)}},r.prototype.loadPhysics=function(t){var i=c.getPlatformManager();this.debugMode&&i.log("Load Physics : "+t);var e=this;try{i.loadBytes(t,function(t){e.physics=l.load(t)})}catch(t){console.warn(t)}},r.prototype.hitTestSimple=function(t,i,e){if(null===this.live2DModel)return!1;var r=this.live2DModel.getDrawDataIndex(t);if(r<0)return!1;for(var o=this.live2DModel.getTransformedPoints(r),n=this.live2DModel.getCanvasWidth(),s=0,_=this.live2DModel.getCanvasHeight(),a=0,h=0;h<o.length;h+=2){var l=o[h],$=o[h+1];l<n&&(n=l),l>s&&(s=l),$<_&&(_=$),$>a&&(a=$)}var u=this.modelMatrix.invertTransformX(i),p=this.modelMatrix.invertTransformY(e);return n<=u&&u<=s&&_<=p&&p<=a},r.prototype.hitTestSimpleCustom=function(t,i,e,r){return null!==this.live2DModel&&(e>=t[0]&&e<=i[0]&&r<=t[1]&&r>=i[1])},o.prototype=new AMotion,o.EXPRESSION_DEFAULT="DEFAULT",o.TYPE_SET=0,o.TYPE_ADD=1,o.TYPE_MULT=2,o.loadJson=function(t){var i=new o,e=c.getPlatformManager(),r=e.jsonParseFromBytes(t);if(i.setFadeIn(parseInt(r.fade_in)>0?parseInt(r.fade_in):1e3),i.setFadeOut(parseInt(r.fade_out)>0?parseInt(r.fade_out):1e3),null==r.params)return i;var s=r.params,_=s.length;i.paramList=[];for(var a=0;a<_;a++){var h=s[a],l=h.id.toString(),$=parseFloat(h.val),u=o.TYPE_ADD,p=null!=h.calc?h.calc.toString():"add";if((u="add"===p?o.TYPE_ADD:"mult"===p?o.TYPE_MULT:"set"===p?o.TYPE_SET:o.TYPE_ADD)==o.TYPE_ADD){var f=null==h.def?0:parseFloat(h.def);$-=f}else if(u==o.TYPE_MULT){var f=null==h.def?1:parseFloat(h.def);0==f&&(f=1),$/=f}var d=new n;d.id=l,d.type=u,d.value=$,i.paramList.push(d)}return i},o.prototype.updateParamExe=function(t,i,e,r){for(var n=this.paramList.length-1;n>=0;--n){var s=this.paramList[n];s.type==o.TYPE_ADD?t.addToParamFloat(s.id,s.value,e):s.type==o.TYPE_MULT?t.multParamFloat(s.id,s.value,e):s.type==o.TYPE_SET&&t.setParamFloat(s.id,s.value,e)}},s.prototype.calcNextBlink=function(){return UtSystem.getUserTimeMSec()+Math.random()*(2*this.blinkIntervalMsec-1)},s.prototype.setInterval=function(t){this.blinkIntervalMsec=t},s.prototype.setEyeMotion=function(t,i,e){this.closingMotionMsec=t,this.closedMotionMsec=i,this.openingMotionMsec=e},s.prototype.updateParam=function(t){var i,e=UtSystem.getUserTimeMSec(),r=0;switch(this.eyeState){case g.STATE_CLOSING:r=(e-this.stateStartTime)/this.closingMotionMsec,r>=1&&(r=1,this.eyeState=g.STATE_CLOSED,this.stateStartTime=e),i=1-r;break;case g.STATE_CLOSED:r=(e-this.stateStartTime)/this.closedMotionMsec,r>=1&&(this.eyeState=g.STATE_OPENING,this.stateStartTime=e),i=0;break;case g.STATE_OPENING:r=(e-this.stateStartTime)/this.openingMotionMsec,r>=1&&(r=1,this.eyeState=g.STATE_INTERVAL,this.nextBlinkTime=this.calcNextBlink()),i=r;break;case g.STATE_INTERVAL:this.nextBlinkTime<e&&(this.eyeState=g.STATE_CLOSING,this.stateStartTime=e),i=1;break;case g.STATE_FIRST:default:this.eyeState=g.STATE_INTERVAL,this.nextBlinkTime=this.calcNextBlink(),i=1}this.closeIfZero||(i=-i),t.setParamFloat(this.eyeID_L,i),t.setParamFloat(this.eyeID_R,i)};var g=function(){};g.STATE_FIRST="STATE_FIRST",g.STATE_INTERVAL="STATE_INTERVAL",g.STATE_CLOSING="STATE_CLOSING",g.STATE_CLOSED="STATE_CLOSED",g.STATE_OPENING="STATE_OPENING",_.mul=function(t,i,e){var r,o,n,s=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];for(r=0;r<4;r++)for(o=0;o<4;o++)for(n=0;n<4;n++)s[r+4*o]+=t[r+4*n]*i[n+4*o];for(r=0;r<16;r++)e[r]=s[r]},_.prototype.identity=function(){for(var t=0;t<16;t++)this.tr[t]=t%5==0?1:0},_.prototype.getArray=function(){return this.tr},_.prototype.getCopyMatrix=function(){return new Float32Array(this.tr)},_.prototype.setMatrix=function(t){if(null!=this.tr&&this.tr.length==this.tr.length)for(var i=0;i<16;i++)this.tr[i]=t[i]},_.prototype.getScaleX=function(){return this.tr[0]},_.prototype.getScaleY=function(){return this.tr[5]},_.prototype.transformX=function(t){return this.tr[0]*t*8/3+this.tr[12]},_.prototype.transformY=function(t){return this.tr[5]*t*8/3+this.tr[13]},_.prototype.invertTransformX=function(t){return(t-this.tr[12])/this.tr[0]},_.prototype.invertTransformY=function(t){return(t-this.tr[13])/this.tr[5]},_.prototype.multTranslate=function(t,i){var e=[1,0,0,0,0,1,0,0,0,0,1,0,t,i,0,1];_.mul(e,this.tr,this.tr)},_.prototype.translate=function(t,i){this.tr[12]=t,this.tr[13]=i},_.prototype.translateX=function(t){this.tr[12]=t},_.prototype.translateY=function(t){this.tr[13]=t},_.prototype.multScale=function(t,i){var e=[t,0,0,0,0,i,0,0,0,0,1,0,0,0,0,1];_.mul(e,this.tr,this.tr)},_.prototype.scale=function(t,i){this.tr[0]=t,this.tr[5]=i},a.prototype=new _,a.prototype.setPosition=function(t,i){this.translate(t,i)},a.prototype.setCenterPosition=function(t,i){var e=this.width*this.getScaleX(),r=this.height*this.getScaleY();this.translate(t-e/2,i-r/2)},a.prototype.top=function(t){this.setY(t)},a.prototype.bottom=function(t){var i=this.height*this.getScaleY();this.translateY(t-i)},a.prototype.left=function(t){this.setX(t)},a.prototype.right=function(t){var i=this.width*this.getScaleX();this.translateX(t-i)},a.prototype.centerX=function(t){var i=this.width*this.getScaleX();this.translateX(t-i/2)},a.prototype.centerY=function(t){var i=this.height*this.getScaleY();this.translateY(t-i/2)},a.prototype.setX=function(t){this.translateX(t)},a.prototype.setY=function(t){this.translateY(t)},a.prototype.setHeight=function(t){var i=t/this.height,e=-i;this.scale(i,e)},a.prototype.setWidth=function(t){var i=t/this.width,e=-i;this.scale(i,e)},h.prototype=new MotionQueueManager,h.prototype.getCurrentPriority=function(){return this.currentPriority},h.prototype.getReservePriority=function(){return this.reservePriority},h.prototype.reserveMotion=function(t){return!(this.reservePriority>=t)&&(!(this.currentPriority>=t)&&(this.reservePriority=t,!0))},h.prototype.setReservePriority=function(t){this.reservePriority=t},h.prototype.updateParam=function(t){var i=MotionQueueManager.prototype.updateParam.call(this,t);return this.isFinished()&&(this.currentPriority=0),i},h.prototype.startMotionPrio=function(t,i){return i==this.reservePriority&&(this.reservePriority=0),this.currentPriority=i,this.startMotion(t,!1)},l.load=function(t){for(var i=new l,e=c.getPlatformManager(),r=e.jsonParseFromBytes(t),o=r.physics_hair,n=o.length,s=0;s<n;s++){var _=o[s],a=new PhysicsHair,h=_.setup,$=parseFloat(h.length),u=parseFloat(h.regist),p=parseFloat(h.mass);a.setup($,u,p);for(var f=_.src,d=f.length,g=0;g<d;g++){var y=f[g],m=y.id,T=PhysicsHair.Src.SRC_TO_X,P=y.ptype;"x"===P?T=PhysicsHair.Src.SRC_TO_X:"y"===P?T=PhysicsHair.Src.SRC_TO_Y:"angle"===P?T=PhysicsHair.Src.SRC_TO_G_ANGLE:UtDebug.error("live2d","Invalid parameter:PhysicsHair.Src");var S=parseFloat(y.scale),v=parseFloat(y.weight);a.addSrcParam(T,m,S,v)}for(var L=_.targets,M=L.length,g=0;g<M;g++){var E=L[g],m=E.id,T=PhysicsHair.Target.TARGET_FROM_ANGLE,P=E.ptype;"angle"===P?T=PhysicsHair.Target.TARGET_FROM_ANGLE:"angle_v"===P?T=PhysicsHair.Target.TARGET_FROM_ANGLE_V:UtDebug.error("live2d","Invalid parameter:PhysicsHair.Target");var S=parseFloat(E.scale),v=parseFloat(E.weight);a.addTargetParam(T,m,S,v)}i.physicsList.push(a)}return i},l.prototype.updateParam=function(t){for(var i=UtSystem.getUserTimeMSec()-this.startTimeMSec,e=0;e<this.physicsList.length;e++)this.physicsList[e].update(t,i)},$.load=function(t){for(var i=new $,e=c.getPlatformManager(),r=e.jsonParseFromBytes(t),o=r.parts_visible,n=o.length,s=0;s<n;s++){for(var _=o[s],a=_.group,h=a.length,l=new Array,p=0;p<h;p++){var f=a[p],d=new u(f.id);if(l[p]=d,null!=f.link){var g=f.link,y=g.length;d.link=new Array;for(var m=0;m<y;m++){var T=new u(g[m]);d.link.push(T)}}}i.partsGroups.push(l)}return i},$.prototype.updateParam=function(t){if(null!=t){t!=this.lastModel&&this.initParam(t),this.lastModel=t;var i=UtSystem.getUserTimeMSec(),e=0==this.lastTime?0:(i-this.lastTime)/1e3;this.lastTime=i,e<0&&(e=0);for(var r=0;r<this.partsGroups.length;r++)this.normalizePartsOpacityGroup(t,this.partsGroups[r],e),this.copyOpacityOtherParts(t,this.partsGroups[r])}},$.prototype.initParam=function(t){if(null!=t)for(var i=0;i<this.partsGroups.length;i++)for(var e=this.partsGroups[i],r=0;r<e.length;r++){e[r].initIndex(t);var o=e[r].partsIndex,n=e[r].paramIndex;if(!(o<0)){var s=0!=t.getParamFloat(n);if(t.setPartsOpacity(o,s?1:0),t.setParamFloat(n,s?1:0),null!=e[r].link)for(var _=0;_<e[r].link.length;_++)e[r].link[_].initIndex(t)}}},$.prototype.normalizePartsOpacityGroup=function(t,i,e){for(var r=-1,o=1,n=0;n<i.length;n++){var s=i[n].partsIndex,_=i[n].paramIndex;if(!(s<0)&&0!=t.getParamFloat(_)){if(r>=0)break;r=n,o=t.getPartsOpacity(s),o+=e/.5,o>1&&(o=1)}}r<0&&(r=0,o=1);for(var n=0;n<i.length;n++){var s=i[n].partsIndex;if(!(s<0))if(r==n)t.setPartsOpacity(s,o);else{var a,h=t.getPartsOpacity(s);a=o<.5?-.5*o/.5+1:.5*(1-o)/.5;var l=(1-a)*(1-o);l>.15&&(a=1-.15/(1-o)),h>a&&(h=a),t.setPartsOpacity(s,h)}}},$.prototype.copyOpacityOtherParts=function(t,i){for(var e=0;e<i.length;e++){var r=i[e];if(null!=r.link&&!(r.partsIndex<0))for(var o=t.getPartsOpacity(r.partsIndex),n=0;n<r.link.length;n++){var s=r.link[n];s.partsIndex<0||t.setPartsOpacity(s.partsIndex,o)}}},u.prototype.initIndex=function(t){this.paramIndex=t.getParamIndex("VISIBLE:"+this.id),this.partsIndex=t.getPartsDataIndex(PartsDataID.getID(this.id)),t.setParamFloat(this.paramIndex,1)},p.FRAME_RATE=30,p.prototype.setPoint=function(t,i){this.faceTargetX=t,this.faceTargetY=i},p.prototype.getX=function(){return this.faceX},p.prototype.getY=function(){return this.faceY},p.prototype.update=function(){var t=40/7.5/p.FRAME_RATE;if(0==this.lastTimeSec)return void(this.lastTimeSec=UtSystem.getUserTimeMSec());var i=UtSystem.getUserTimeMSec(),e=(i-this.lastTimeSec)*p.FRAME_RATE/1e3;this.lastTimeSec=i;var r=.15*p.FRAME_RATE,o=e*t/r,n=this.faceTargetX-this.faceX,s=this.faceTargetY-this.faceY;if(!(Math.abs(n)<=this.EPSILON&&Math.abs(s)<=this.EPSILON)){var _=Math.sqrt(n*n+s*s),a=t*n/_,h=t*s/_,l=a-this.faceVX,$=h-this.faceVY,u=Math.sqrt(l*l+$*$);(u<-o||u>o)&&(l*=o/u,$*=o/u,u=o),this.faceVX+=l,this.faceVY+=$;var f=.5*(Math.sqrt(o*o+16*o*_-8*o*_)-o),c=Math.sqrt(this.faceVX*this.faceVX+this.faceVY*this.faceVY);c>f&&(this.faceVX*=f/c,this.faceVY*=f/c),this.faceX+=this.faceVX,this.faceY+=this.faceVY}},f.prototype=new _,f.prototype.getMaxScale=function(){return this.max},f.prototype.getMinScale=function(){return this.min},f.prototype.setMaxScale=function(t){this.max=t},f.prototype.setMinScale=function(t){this.min=t},f.prototype.isMaxScale=function(){return this.getScaleX()==this.max},f.prototype.isMinScale=function(){return this.getScaleX()==this.min},f.prototype.adjustTranslate=function(t,i){this.tr[0]*this.maxLeft+(this.tr[12]+t)>this.screenLeft&&(t=this.screenLeft-this.tr[0]*this.maxLeft-this.tr[12]),this.tr[0]*this.maxRight+(this.tr[12]+t)<this.screenRight&&(t=this.screenRight-this.tr[0]*this.maxRight-this.tr[12]),this.tr[5]*this.maxTop+(this.tr[13]+i)<this.screenTop&&(i=this.screenTop-this.tr[5]*this.maxTop-this.tr[13]),this.tr[5]*this.maxBottom+(this.tr[13]+i)>this.screenBottom&&(i=this.screenBottom-this.tr[5]*this.maxBottom-this.tr[13]);var e=[1,0,0,0,0,1,0,0,0,0,1,0,t,i,0,1];_.mul(e,this.tr,this.tr)},f.prototype.adjustScale=function(t,i,e){var r=e*this.tr[0];r<this.min?this.tr[0]>0&&(e=this.min/this.tr[0]):r>this.max&&this.tr[0]>0&&(e=this.max/this.tr[0]);var o=[1,0,0,0,0,1,0,0,0,0,1,0,t,i,0,1],n=[e,0,0,0,0,e,0,0,0,0,1,0,0,0,0,1],s=[1,0,0,0,0,1,0,0,0,0,1,0,-t,-i,0,1];_.mul(s,this.tr,this.tr),_.mul(n,this.tr,this.tr),_.mul(o,this.tr,this.tr)},f.prototype.setScreenRect=function(t,i,e,r){this.screenLeft=t,this.screenRight=i,this.screenTop=r,this.screenBottom=e},f.prototype.setMaxScreenRect=function(t,i,e,r){this.maxLeft=t,this.maxRight=i,this.maxTop=r,this.maxBottom=e},f.prototype.getScreenLeft=function(){return this.screenLeft},f.prototype.getScreenRight=function(){return this.screenRight},f.prototype.getScreenBottom=function(){return this.screenBottom},f.prototype.getScreenTop=function(){return this.screenTop},f.prototype.getMaxLeft=function(){return this.maxLeft},f.prototype.getMaxRight=function(){return this.maxRight},f.prototype.getMaxBottom=function(){return this.maxBottom},f.prototype.getMaxTop=function(){return this.maxTop},c.platformManager=null,c.getPlatformManager=function(){return c.platformManager},c.setPlatformManager=function(t){c.platformManager=t},t.exports={L2DTargetPoint:p,Live2DFramework:c,L2DViewMatrix:f,L2DPose:$,L2DPartsParam:u,L2DPhysics:l,L2DMotionManager:h,L2DModelMatrix:a,L2DMatrix44:_,EYE_STATE:g,L2DEyeBlink:s,L2DExpressionParam:n,L2DExpressionMotion:o,L2DBaseModel:r}},function(t,i,e){"use strict";var r={DEBUG_LOG:!1,DEBUG_MOUSE_LOG:!1,DEBUG_DRAW_HIT_AREA:!1,DEBUG_DRAW_ALPHA_MODEL:!1,VIEW_MAX_SCALE:2,VIEW_MIN_SCALE:.8,VIEW_LOGICAL_LEFT:-1,VIEW_LOGICAL_RIGHT:1,VIEW_LOGICAL_MAX_LEFT:-2,VIEW_LOGICAL_MAX_RIGHT:2,VIEW_LOGICAL_MAX_BOTTOM:-2,VIEW_LOGICAL_MAX_TOP:2,PRIORITY_NONE:0,PRIORITY_IDLE:1,PRIORITY_SLEEPY:2,PRIORITY_NORMAL:3,PRIORITY_FORCE:4,MOTION_GROUP_IDLE:"idle",MOTION_GROUP_SLEEPY:"sleepy",MOTION_GROUP_TAP_BODY:"tap_body",MOTION_GROUP_FLICK_HEAD:"flick_head",MOTION_GROUP_PINCH_IN:"pinch_in",MOTION_GROUP_PINCH_OUT:"pinch_out",MOTION_GROUP_SHAKE:"shake",HIT_AREA_HEAD:"head",HIT_AREA_BODY:"body"};t.exports=r},function(t,i,e){"use strict";function r(t){n=t}function o(){return n}Object.defineProperty(i,"__esModule",{value:!0}),i.setContext=r,i.getContext=o;var n=void 0},function(t,i,e){"use strict";function r(){}r.matrixStack=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],r.depth=0,r.currentMatrix=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],r.tmp=new Array(16),r.reset=function(){this.depth=0},r.loadIdentity=function(){for(var t=0;t<16;t++)this.currentMatrix[t]=t%5==0?1:0},r.push=function(){var t=(this.depth,16*(this.depth+1));this.matrixStack.length<t+16&&(this.matrixStack.length=t+16);for(var i=0;i<16;i++)this.matrixStack[t+i]=this.currentMatrix[i];this.depth++},r.pop=function(){--this.depth<0&&(myError("Invalid matrix stack."),this.depth=0);for(var t=16*this.depth,i=0;i<16;i++)this.currentMatrix[i]=this.matrixStack[t+i]},r.getMatrix=function(){return this.currentMatrix},r.multMatrix=function(t){var i,e,r;for(i=0;i<16;i++)this.tmp[i]=0;for(i=0;i<4;i++)for(e=0;e<4;e++)for(r=0;r<4;r++)this.tmp[i+4*e]+=this.currentMatrix[i+4*r]*t[r+4*e];for(i=0;i<16;i++)this.currentMatrix[i]=this.tmp[i]},t.exports=r},function(t,i,e){t.exports=e(5)},function(t,i,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t){C=document.getElementById(t),C.addEventListener&&(window.addEventListener("click",g),window.addEventListener("mousedown",g),window.addEventListener("mousemove",g),window.addEventListener("mouseup",g),document.addEventListener("mouseout",g),window.addEventListener("touchstart",y),window.addEventListener("touchend",y),window.addEventListener("touchmove",y))}function n(t){var i=C.width,e=C.height;N=new M.L2DTargetPoint;var r=e/i,o=w.default.VIEW_LOGICAL_LEFT,n=w.default.VIEW_LOGICAL_RIGHT,_=-r,h=r;if(window.Live2D.captureFrame=!1,B=new M.L2DViewMatrix,B.setScreenRect(o,n,_,h),B.setMaxScreenRect(w.default.VIEW_LOGICAL_MAX_LEFT,w.default.VIEW_LOGICAL_MAX_RIGHT,w.default.VIEW_LOGICAL_MAX_BOTTOM,w.default.VIEW_LOGICAL_MAX_TOP),B.setMaxScale(w.default.VIEW_MAX_SCALE),B.setMinScale(w.default.VIEW_MIN_SCALE),U=new M.L2DMatrix44,U.multScale(1,i/e),G=new M.L2DMatrix44,G.multTranslate(-i/2,-e/2),G.multScale(2/i,-2/i),F=v(),(0,D.setContext)(F),!F)return console.error("Failed to create WebGL context."),void(window.WebGLRenderingContext&&console.error("Your browser don't support WebGL, check https://get.webgl.org/ for futher information."));window.Live2D.setGL(F),F.clearColor(0,0,0,0),a(t),s()}function s(){b||(b=!0,function t(){_();var i=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;if(window.Live2D.captureFrame){window.Live2D.captureFrame=!1;var e=document.createElement("a");document.body.appendChild(e),e.setAttribute("type","hidden"),e.href=C.toDataURL(),e.download=window.Live2D.captureName||"live2d.png",e.click()}i(t,C)}())}function _(){O.default.reset(),O.default.loadIdentity(),N.update(),R.setDrag(N.getX(),N.getY()),F.clear(F.COLOR_BUFFER_BIT),O.default.multMatrix(U.getArray()),O.default.multMatrix(B.getArray()),O.default.push();for(var t=0;t<R.numModels();t++){var i=R.getModel(t);if(null==i)return;i.initialized&&!i.updating&&(i.update(),i.draw(F))}O.default.pop()}function a(t){R.reloadFlg=!0,R.count++,R.changeModel(F,t)}function h(t,i){return t.x*i.x+t.y*i.y}function l(t,i){var e=Math.sqrt(t*t+i*i);return{x:t/e,y:i/e}}function $(t,i,e){function r(t,i){return 180*Math.acos(h({x:0,y:1},l(t,i)))/Math.PI}if(i.x<e.left+e.width&&i.y<e.top+e.height&&i.x>e.left&&i.y>e.top)return i;var o=t.x-i.x,n=t.y-i.y,s=r(o,n);i.x<t.x&&(s=360-s);var _=360-r(e.left-t.x,-1*(e.top-t.y)),a=360-r(e.left-t.x,-1*(e.top+e.height-t.y)),$=r(e.left+e.width-t.x,-1*(e.top-t.y)),u=r(e.left+e.width-t.x,-1*(e.top+e.height-t.y)),p=n/o,f={};if(s<$){var c=e.top-t.y,d=c/p;f={y:t.y+c,x:t.x+d}}else if(s<u){var g=e.left+e.width-t.x,y=g*p;f={y:t.y+y,x:t.x+g}}else if(s<a){var m=e.top+e.height-t.y,T=m/p;f={y:t.y+m,x:t.x+T}}else if(s<_){var P=t.x-e.left,S=P*p;f={y:t.y-S,x:t.x-P}}else{var v=e.top-t.y,L=v/p;f={y:t.y+v,x:t.x+L}}return f}function u(t){Y=!0;var i=C.getBoundingClientRect(),e=P(t.clientX-i.left),r=S(t.clientY-i.top),o=$({x:i.left+i.width/2,y:i.top+i.height*X},{x:t.clientX,y:t.clientY},i),n=m(o.x-i.left),s=T(o.y-i.top);w.default.DEBUG_MOUSE_LOG&&console.log("onMouseMove device( x:"+t.clientX+" y:"+t.clientY+" ) view( x:"+n+" y:"+s+")"),k=e,V=r,N.setPoint(n,s)}function p(t){Y=!0;var i=C.getBoundingClientRect(),e=P(t.clientX-i.left),r=S(t.clientY-i.top),o=$({x:i.left+i.width/2,y:i.top+i.height*X},{x:t.clientX,y:t.clientY},i),n=m(o.x-i.left),s=T(o.y-i.top);w.default.DEBUG_MOUSE_LOG&&console.log("onMouseDown device( x:"+t.clientX+" y:"+t.clientY+" ) view( x:"+n+" y:"+s+")"),k=e,V=r,R.tapEvent(n,s)}function f(t){var i=C.getBoundingClientRect(),e=P(t.clientX-i.left),r=S(t.clientY-i.top),o=$({x:i.left+i.width/2,y:i.top+i.height*X},{x:t.clientX,y:t.clientY},i),n=m(o.x-i.left),s=T(o.y-i.top);w.default.DEBUG_MOUSE_LOG&&console.log("onMouseMove device( x:"+t.clientX+" y:"+t.clientY+" ) view( x:"+n+" y:"+s+")"),Y&&(k=e,V=r,N.setPoint(n,s))}function c(){Y&&(Y=!1),N.setPoint(0,0)}function d(){w.default.DEBUG_LOG&&console.log("Set Session Storage."),sessionStorage.setItem("Sleepy","1")}function g(t){if("mousewheel"==t.type);else if("mousedown"==t.type)p(t);else if("mousemove"==t.type){var i=sessionStorage.getItem("Sleepy");"1"===i&&sessionStorage.setItem("Sleepy","0"),u(t)}else if("mouseup"==t.type){if("button"in t&&0!=t.button)return}else if("mouseout"==t.type){w.default.DEBUG_LOG&&console.log("Mouse out Window."),c();var e=sessionStorage.getItem("SleepyTimer");window.clearTimeout(e),e=window.setTimeout(d,5e4),sessionStorage.setItem("SleepyTimer",e)}}function y(t){var i=t.touches[0];"touchstart"==t.type?1==t.touches.length&&u(i):"touchmove"==t.type?f(i):"touchend"==t.type&&c()}function m(t){var i=G.transformX(t);return B.invertTransformX(i)}function T(t){var i=G.transformY(t);return B.invertTransformY(i)}function P(t){return G.transformX(t)}function S(t){return G.transformY(t)}function v(){for(var t=["webgl","experimental-webgl","webkit-3d","moz-webgl"],i=0;i<t.length;i++)try{var e=C.getContext(t[i],{premultipliedAlpha:!0});if(e)return e}catch(t){}return null}function L(t,i,e){X=void 0===e?.5:e,o(t),n(i)}e(6);var M=e(0),E=e(8),A=r(E),I=e(1),w=r(I),x=e(3),O=r(x),D=e(2),R=(window.navigator.platform.toLowerCase(),new A.default),b=!1,F=null,C=null,N=null,B=null,U=null,G=null,Y=!1,k=0,V=0,X=.5;window.loadlive2d=L},function(t,i,e){"use strict";(function(t){!function(){function i(){At||(this._$MT=null,this._$5S=null,this._$NP=0,i._$42++,this._$5S=new Y(this))}function e(t){if(!At){this.clipContextList=new Array,this.glcontext=t.gl,this.dp_webgl=t,this.curFrameNo=0,this.firstError_clipInNotUpdate=!0,this.colorBuffer=0,this.isInitGLFBFunc=!1,this.tmpBoundsOnModel=new S,at.glContext.length>at.frameBuffers.length&&(this.curFrameNo=this.getMaskRenderTexture()),this.tmpModelToViewMatrix=new R,this.tmpMatrix2=new R,this.tmpMatrixForMask=new R,this.tmpMatrixForDraw=new R,this.CHANNEL_COLORS=new Array;var i=new A;i=new A,i.r=0,i.g=0,i.b=0,i.a=1,this.CHANNEL_COLORS.push(i),i=new A,i.r=1,i.g=0,i.b=0,i.a=0,this.CHANNEL_COLORS.push(i),i=new A,i.r=0,i.g=1,i.b=0,i.a=0,this.CHANNEL_COLORS.push(i),i=new A,i.r=0,i.g=0,i.b=1,i.a=0,this.CHANNEL_COLORS.push(i);for(var e=0;e<this.CHANNEL_COLORS.length;e++)this.dp_webgl.setChannelFlagAsColor(e,this.CHANNEL_COLORS[e])}}function r(t,i,e){this.clipIDList=new Array,this.clipIDList=e,this.clippingMaskDrawIndexList=new Array;for(var r=0;r<e.length;r++)this.clippingMaskDrawIndexList.push(i.getDrawDataIndex(e[r]));this.clippedDrawContextList=new Array,this.isUsing=!0,this.layoutChannelNo=0,this.layoutBounds=new S,this.allClippedDrawRect=new S,this.matrixForMask=new Float32Array(16),this.matrixForDraw=new Float32Array(16),this.owner=t}function o(t,i){this._$gP=t,this.drawDataIndex=i}function n(){At||(this.color=null)}function s(){At||(this._$dP=null,this._$eo=null,this._$V0=null,this._$dP=1e3,this._$eo=1e3,this._$V0=1,this._$a0())}function _(){}function a(){this._$r=null,this._$0S=null}function h(){At||(this.x=null,this.y=null,this.width=null,this.height=null)}function l(t){At||et.prototype.constructor.call(this,t)}function $(){}function u(t){At||et.prototype.constructor.call(this,t)}function p(){At||(this._$vo=null,this._$F2=null,this._$ao=400,this._$1S=400,p._$42++)}function f(){At||(this.p1=new c,this.p2=new c,this._$Fo=0,this._$Db=0,this._$L2=0,this._$M2=0,this._$ks=0,this._$9b=0,this._$iP=0,this._$iT=0,this._$lL=new Array,this._$qP=new Array,this.setup(.3,.5,.1))}function c(){this._$p=1,this.x=0,this.y=0,this.vx=0,this.vy=0,this.ax=0,this.ay=0,this.fx=0,this.fy=0,this._$s0=0,this._$70=0,this._$7L=0,this._$HL=0}function d(t,i,e){this._$wL=null,this.scale=null,this._$V0=null,this._$wL=t,this.scale=i,this._$V0=e}function g(t,i,e,r){d.prototype.constructor.call(this,i,e,r),this._$tL=null,this._$tL=t}function y(t,i,e){this._$wL=null,this.scale=null,this._$V0=null,this._$wL=t,this.scale=i,this._$V0=e}function T(t,i,e,r){y.prototype.constructor.call(this,i,e,r),this._$YP=null,this._$YP=t}function P(){At||(this._$fL=0,this._$gL=0,this._$B0=1,this._$z0=1,this._$qT=0,this.reflectX=!1,this.reflectY=!1)}function S(){At||(this.x=null,this.y=null,this.width=null,this.height=null)}function v(){}function L(){At||(this.x=null,this.y=null)}function M(){At||(this._$gP=null,this._$dr=null,this._$GS=null,this._$qb=null,this._$Lb=null,this._$mS=null,this.clipID=null,this.clipIDList=new Array)}function E(){At||(this._$Eb=E._$ps,this._$lT=1,this._$C0=1,this._$tT=1,this._$WL=1,this.culling=!1,this.matrix4x4=new Float32Array(16),this.premultipliedAlpha=!1,this.anisotropy=0,this.clippingProcess=E.CLIPPING_PROCESS_NONE,this.clipBufPre_clipContextMask=null,this.clipBufPre_clipContextDraw=null,this.CHANNEL_COLORS=new Array)}function A(){At||(this.a=1,this.r=1,this.g=1,this.b=1,this.scale=1,this._$ho=1,this.blendMode=at.L2D_COLOR_BLEND_MODE_MULT)}function I(){At||(this._$kP=null,this._$dr=null,this._$Ai=!0,this._$mS=null)}function w(){}function x(){At||(this._$VP=0,this._$wL=null,this._$GP=null,this._$8o=x._$ds,this._$2r=-1,this._$O2=0,this._$ri=0)}function O(){}function D(){At||(this._$Ob=null)}function R(){this.m=new Float32Array(16),this.identity()}function b(t){At||et.prototype.constructor.call(this,t)}function F(){At||(this._$7=1,this._$f=0,this._$H=0,this._$g=1,this._$k=0,this._$w=0,this._$hi=STATE_IDENTITY,this._$Z=_$pS)}function C(){At||(s.prototype.constructor.call(this),this.motions=new Array,this._$7r=null,this._$7r=C._$Co++,this._$D0=30,this._$yT=0,this._$E=!0,this.loopFadeIn=!0,this._$AS=-1,_$a0())}function N(){this._$P=new Float32Array(100),this.size=0}function B(){this._$4P=null,this._$I0=null,this._$RP=null}function U(){}function G(){}function Y(t){At||(this._$QT=!0,this._$co=-1,this._$qo=0,this._$pb=new Array(Y._$is),this._$_2=new Float32Array(Y._$is),this._$vr=new Float32Array(Y._$is),this._$Rr=new Float32Array(Y._$is),this._$Or=new Float32Array(Y._$is),this._$fs=new Float32Array(Y._$is),this._$Js=new Array(Y._$is),this._$3S=new Array,this._$aS=new Array,this._$Bo=null,this._$F2=new Array,this._$db=new Array,this._$8b=new Array,this._$Hr=new Array,this._$Ws=null,this._$Vs=null,this._$Er=null,this._$Es=new Int16Array(U._$Qb),this._$ZP=new Float32Array(2*U._$1r),this._$Ri=t,this._$b0=Y._$HP++,this.clipManager=null,this.dp_webgl=null)}function k(){}function V(){At||(this._$12=null,this._$bb=null,this._$_L=null,this._$jo=null,this._$iL=null,this._$0L=null,this._$Br=null,this._$Dr=null,this._$Cb=null,this._$mr=null,this._$_L=wt.STATE_FIRST,this._$Br=4e3,this._$Dr=100,this._$Cb=50,this._$mr=150,this._$jo=!0,this._$iL="PARAM_EYE_L_OPEN",this._$0L="PARAM_EYE_R_OPEN")}function X(){At||(E.prototype.constructor.call(this),this._$sb=new Int32Array(X._$As),this._$U2=new Array,this.transform=null,this.gl=null,null==X._$NT&&(X._$NT=X._$9r(256),X._$vS=X._$9r(256),X._$no=X._$vb(256)))}function z(){At||(I.prototype.constructor.call(this),this._$GS=null,this._$Y0=null)}function H(t){_t.prototype.constructor.call(this,t),this._$8r=I._$ur,this._$Yr=null,this._$Wr=null}function W(){At||(M.prototype.constructor.call(this),this._$gP=null,this._$dr=null,this._$GS=null,this._$qb=null,this._$Lb=null,this._$mS=null)}function j(){At||(this._$NL=null,this._$3S=null,this._$aS=null,j._$42++)}function q(){At||(i.prototype.constructor.call(this),this._$zo=new X)}function J(){At||(s.prototype.constructor.call(this),this.motions=new Array,this._$o2=null,this._$7r=J._$Co++,this._$D0=30,this._$yT=0,this._$E=!1,this.loopFadeIn=!0,this._$rr=-1,this._$eP=0)}function Q(t,i){return String.fromCharCode(t.getUint8(i))}function N(){this._$P=new Float32Array(100),this.size=0}function B(){this._$4P=null,this._$I0=null,this._$RP=null}function Z(){At||(I.prototype.constructor.call(this),this._$o=0,this._$A=0,this._$GS=null,this._$Eo=null)}function K(t){_t.prototype.constructor.call(this,t),this._$8r=I._$ur,this._$Cr=null,this._$hr=null}function tt(){At||(this.visible=!0,this._$g0=!1,this._$NL=null,this._$3S=null,this._$aS=null,tt._$42++)}function it(t){this._$VS=null,this._$e0=null,this._$e0=t}function et(t){At||(this.id=t)}function rt(){}function ot(){At||(this._$4S=null)}function nt(t,i){this.canvas=t,this.context=i,this.viewport=new Array(0,0,t.width,t.height),this._$6r=1,this._$xP=0,this._$3r=1,this._$uP=0,this._$Qo=-1,this.cacheImages={}}function st(){At||(this._$TT=null,this._$LT=null,this._$FS=null,this._$wL=null)}function _t(t){At||(this._$e0=null,this._$IP=null,this._$JS=!1,this._$AT=!0,this._$e0=t,this.totalScale=1,this._$7s=1,this.totalOpacity=1)}function at(){}function ht(){}function lt(t){At||(this._$ib=t)}function $t(){At||(W.prototype.constructor.call(this),this._$LP=-1,this._$d0=0,this._$Yo=0,this._$JP=null,this._$5P=null,this._$BP=null,this._$Eo=null,this._$Qi=null,this._$6s=$t._$ms,this.culling=!0,this.gl_cacheImage=null,this.instanceNo=$t._$42++)}function ut(t){Mt.prototype.constructor.call(this,t),this._$8r=W._$ur,this._$Cr=null,this._$hr=null}function pt(){At||(this.x=null,this.y=null)}function ft(t){At||(i.prototype.constructor.call(this),this.drawParamWebGL=new mt(t),this.drawParamWebGL.setGL(at.getGL(t)))}function ct(){At||(this.motions=null,this._$eb=!1,this.motions=new Array)}function dt(){this._$w0=null,this._$AT=!0,this._$9L=!1,this._$z2=-1,this._$bs=-1,this._$Do=-1,this._$sr=null,this._$sr=dt._$Gs++}function gt(){this.m=new Array(1,0,0,0,1,0,0,0,1)}function yt(t){At||et.prototype.constructor.call(this,t)}function mt(t){At||(E.prototype.constructor.call(this),this.textures=new Array,this.transform=null,this.gl=null,this.glno=t,this.firstDraw=!0,this.anisotropyExt=null,this.maxAnisotropy=0,this._$As=32,this._$Gr=!1,this._$NT=null,this._$vS=null,this._$no=null,this.vertShader=null,this.fragShader=null,this.vertShaderOff=null,this.fragShaderOff=null)}function Tt(t,i,e){return null==i&&(i=t.createBuffer()),t.bindBuffer(t.ARRAY_BUFFER,i),t.bufferData(t.ARRAY_BUFFER,e,t.DYNAMIC_DRAW),i}function Pt(t,i,e){return null==i&&(i=t.createBuffer()),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,i),t.bufferData(t.ELEMENT_ARRAY_BUFFER,e,t.DYNAMIC_DRAW),i}function St(t){At||(this._$P=new Int8Array(8),this._$R0=new DataView(this._$P.buffer),this._$3i=new Int8Array(1e3),this._$hL=0,this._$v0=0,this._$S2=0,this._$Ko=new Array,this._$T=t,this._$F=0)}function vt(){}function Lt(){}function Mt(t){At||(this._$e0=null,this._$IP=null,this._$Us=null,this._$7s=null,this._$IS=[!1],this._$VS=null,this._$AT=!0,this.baseOpacity=1,this.clipBufPre_clipContext=null,this._$e0=t)}function Et(){}var At=!0;i._$0s=1,i._$4s=2,i._$42=0,i._$62=function(t,e){try{if(e instanceof ArrayBuffer&&(e=new DataView(e)),!(e instanceof DataView))throw new lt("_$SS#loadModel(b) / b _$x be DataView or ArrayBuffer");var r,o=new St(e),n=o._$ST(),s=o._$ST(),a=o._$ST();if(109!=n||111!=s||99!=a)throw new lt("_$gi _$C _$li , _$Q0 _$P0.");if(r=o._$ST(),o._$gr(r),r>G._$T7){t._$NP|=i._$4s;throw new lt("_$gi _$C _$li , _$n0 _$_ version _$li ( SDK : "+G._$T7+" < _$f0 : "+r+" )@_$SS#loadModel()\n")}var h=o._$nP();if(r>=G._$s7){var l=o._$9T(),$=o._$9T();if(-30584!=l||-30584!=$)throw t._$NP|=i._$0s,new lt("_$gi _$C _$li , _$0 _$6 _$Ui.")}t._$KS(h);var u=t.getModelContext();u.setDrawParam(t.getDrawParam()),u.init()}catch(t){_._$Rb(t)}},i.prototype._$KS=function(t){this._$MT=t},i.prototype.getModelImpl=function(){return null==this._$MT&&(this._$MT=new p,this._$MT._$zP()),this._$MT},i.prototype.getCanvasWidth=function(){return null==this._$MT?0:this._$MT.getCanvasWidth()},i.prototype.getCanvasHeight=function(){return null==this._$MT?0:this._$MT.getCanvasHeight()},i.prototype.getParamFloat=function(t){return"number"!=typeof t&&(t=this._$5S.getParamIndex(u.getID(t))),this._$5S.getParamFloat(t)},i.prototype.setParamFloat=function(t,i,e){"number"!=typeof t&&(t=this._$5S.getParamIndex(u.getID(t))),arguments.length<3&&(e=1),this._$5S.setParamFloat(t,this._$5S.getParamFloat(t)*(1-e)+i*e)},i.prototype.addToParamFloat=function(t,i,e){"number"!=typeof t&&(t=this._$5S.getParamIndex(u.getID(t))),arguments.length<3&&(e=1),this._$5S.setParamFloat(t,this._$5S.getParamFloat(t)+i*e)},i.prototype.multParamFloat=function(t,i,e){"number"!=typeof t&&(t=this._$5S.getParamIndex(u.getID(t))),arguments.length<3&&(e=1),this._$5S.setParamFloat(t,this._$5S.getParamFloat(t)*(1+(i-1)*e))},i.prototype.getParamIndex=function(t){return this._$5S.getParamIndex(u.getID(t))},i.prototype.loadParam=function(){this._$5S.loadParam()},i.prototype.saveParam=function(){this._$5S.saveParam()},i.prototype.init=function(){this._$5S.init()},i.prototype.update=function(){this._$5S.update()},i.prototype._$Rs=function(){return _._$li("_$60 _$PT _$Rs()"),-1},i.prototype._$Ds=function(t){_._$li("_$60 _$PT _$SS#_$Ds() \n")},i.prototype._$K2=function(){},i.prototype.draw=function(){},i.prototype.getModelContext=function(){return this._$5S},i.prototype._$s2=function(){return this._$NP},i.prototype._$P7=function(t,i,e,r){var o=-1,n=0,s=this;if(0!=e)if(1==t.length){var _=t[0],a=0!=s.getParamFloat(_),h=i[0],l=s.getPartsOpacity(h),$=e/r;a?(l+=$)>1&&(l=1):(l-=$)<0&&(l=0),s.setPartsOpacity(h,l)}else{for(var u=0;u<t.length;u++){var _=t[u],p=0!=s.getParamFloat(_);if(p){if(o>=0)break;o=u;var h=i[u];n=s.getPartsOpacity(h),n+=e/r,n>1&&(n=1)}}o<0&&(console.log("No _$wi _$q0/ _$U default[%s]",t[0]),o=0,n=1,s.loadParam(),s.setParamFloat(t[o],n),s.saveParam());for(var u=0;u<t.length;u++){var h=i[u];if(o==u)s.setPartsOpacity(h,n);else{var f,c=s.getPartsOpacity(h);f=n<.5?-.5*n/.5+1:.5*(1-n)/.5;var d=(1-f)*(1-n);d>.15&&(f=1-.15/(1-n)),c>f&&(c=f),s.setPartsOpacity(h,c)}}}else for(var u=0;u<t.length;u++){var _=t[u],h=i[u],p=0!=s.getParamFloat(_);s.setPartsOpacity(h,p?1:0)}},i.prototype.setPartsOpacity=function(t,i){"number"!=typeof t&&(t=this._$5S.getPartsDataIndex(l.getID(t))),this._$5S.setPartsOpacity(t,i)},i.prototype.getPartsDataIndex=function(t){return t instanceof l||(t=l.getID(t)),this._$5S.getPartsDataIndex(t)},i.prototype.getPartsOpacity=function(t){return"number"!=typeof t&&(t=this._$5S.getPartsDataIndex(l.getID(t))),t<0?0:this._$5S.getPartsOpacity(t)},i.prototype.getDrawParam=function(){},i.prototype.getDrawDataIndex=function(t){return this._$5S.getDrawDataIndex(b.getID(t))},i.prototype.getDrawData=function(t){return this._$5S.getDrawData(t)},i.prototype.getTransformedPoints=function(t){var i=this._$5S._$C2(t);return i instanceof ut?i.getTransformedPoints():null},i.prototype.getIndexArray=function(t){if(t<0||t>=this._$5S._$aS.length)return null;var i=this._$5S._$aS[t];return null!=i&&i.getType()==W._$wb&&i instanceof $t?i.getIndexArray():null},e.CHANNEL_COUNT=4,e.RENDER_TEXTURE_USE_MIPMAP=!1,e.NOT_USED_FRAME=-100,e.prototype._$L7=function(){if(this.tmpModelToViewMatrix&&(this.tmpModelToViewMatrix=null),this.tmpMatrix2&&(this.tmpMatrix2=null),this.tmpMatrixForMask&&(this.tmpMatrixForMask=null),this.tmpMatrixForDraw&&(this.tmpMatrixForDraw=null),this.tmpBoundsOnModel&&(this.tmpBoundsOnModel=null),this.CHANNEL_COLORS){for(var t=this.CHANNEL_COLORS.length-1;t>=0;--t)this.CHANNEL_COLORS.splice(t,1);this.CHANNEL_COLORS=[]}this.releaseShader()},e.prototype.releaseShader=function(){for(var t=at.frameBuffers.length,i=0;i<t;i++)this.gl.deleteFramebuffer(at.frameBuffers[i].framebuffer);at.frameBuffers=[],at.glContext=[]},e.prototype.init=function(t,i,e){for(var o=0;o<i.length;o++){var n=i[o].getClipIDList();if(null!=n){var s=this.findSameClip(n);null==s&&(s=new r(this,t,n),this.clipContextList.push(s));var _=i[o].getDrawDataID(),a=t.getDrawDataIndex(_);s.addClippedDrawData(_,a);e[o].clipBufPre_clipContext=s}}},e.prototype.getMaskRenderTexture=function(){var t=null;return t=this.dp_webgl.createFramebuffer(),at.frameBuffers[this.dp_webgl.glno]=t,this.dp_webgl.glno},e.prototype.setupClip=function(t,i){for(var e=0,r=0;r<this.clipContextList.length;r++){var o=this.clipContextList[r];this.calcClippedDrawTotalBounds(t,o),o.isUsing&&e++}if(e>0){var n=i.gl.getParameter(i.gl.FRAMEBUFFER_BINDING),s=new Array(4);s[0]=0,s[1]=0,s[2]=i.gl.canvas.width,s[3]=i.gl.canvas.height,i.gl.viewport(0,0,at.clippingMaskBufferSize,at.clippingMaskBufferSize),this.setupLayoutBounds(e),i.gl.bindFramebuffer(i.gl.FRAMEBUFFER,at.frameBuffers[this.curFrameNo].framebuffer),i.gl.clearColor(0,0,0,0),i.gl.clear(i.gl.COLOR_BUFFER_BIT);for(var r=0;r<this.clipContextList.length;r++){var o=this.clipContextList[r],_=o.allClippedDrawRect,a=(o.layoutChannelNo,o.layoutBounds);this.tmpBoundsOnModel._$jL(_),this.tmpBoundsOnModel.expand(.05*_.width,.05*_.height);var h=a.width/this.tmpBoundsOnModel.width,l=a.height/this.tmpBoundsOnModel.height;this.tmpMatrix2.identity(),this.tmpMatrix2.translate(-1,-1,0),this.tmpMatrix2.scale(2,2,1),this.tmpMatrix2.translate(a.x,a.y,0),this.tmpMatrix2.scale(h,l,1),this.tmpMatrix2.translate(-this.tmpBoundsOnModel.x,-this.tmpBoundsOnModel.y,0),this.tmpMatrixForMask.setMatrix(this.tmpMatrix2.m),this.tmpMatrix2.identity(),this.tmpMatrix2.translate(a.x,a.y,0),this.tmpMatrix2.scale(h,l,1),this.tmpMatrix2.translate(-this.tmpBoundsOnModel.x,-this.tmpBoundsOnModel.y,0),this.tmpMatrixForDraw.setMatrix(this.tmpMatrix2.m);for(var $=this.tmpMatrixForMask.getArray(),u=0;u<16;u++)o.matrixForMask[u]=$[u];for(var p=this.tmpMatrixForDraw.getArray(),u=0;u<16;u++)o.matrixForDraw[u]=p[u];for(var f=o.clippingMaskDrawIndexList.length,c=0;c<f;c++){var d=o.clippingMaskDrawIndexList[c],g=t.getDrawData(d),y=t._$C2(d);i.setClipBufPre_clipContextForMask(o),g.draw(i,t,y)}}i.gl.bindFramebuffer(i.gl.FRAMEBUFFER,n),i.setClipBufPre_clipContextForMask(null),i.gl.viewport(s[0],s[1],s[2],s[3])}},e.prototype.getColorBuffer=function(){return this.colorBuffer},e.prototype.findSameClip=function(t){for(var i=0;i<this.clipContextList.length;i++){var e=this.clipContextList[i],r=e.clipIDList.length;if(r==t.length){for(var o=0,n=0;n<r;n++)for(var s=e.clipIDList[n],_=0;_<r;_++)if(t[_]==s){o++;break}if(o==r)return e}}return null},e.prototype.calcClippedDrawTotalBounds=function(t,i){for(var e=t._$Ri.getModelImpl().getCanvasWidth(),r=t._$Ri.getModelImpl().getCanvasHeight(),o=e>r?e:r,n=o,s=o,_=0,a=0,h=i.clippedDrawContextList.length,l=0;l<h;l++){var $=i.clippedDrawContextList[l],u=$.drawDataIndex,p=t._$C2(u);if(p._$yo()){for(var f=p.getTransformedPoints(),c=f.length,d=[],g=[],y=0,m=U._$i2;m<c;m+=U._$No)d[y]=f[m],g[y]=f[m+1],y++;var T=Math.min.apply(null,d),P=Math.min.apply(null,g),S=Math.max.apply(null,d),v=Math.max.apply(null,g);T<n&&(n=T),P<s&&(s=P),S>_&&(_=S),v>a&&(a=v)}}if(n==o)i.allClippedDrawRect.x=0,i.allClippedDrawRect.y=0,i.allClippedDrawRect.width=0,i.allClippedDrawRect.height=0,i.isUsing=!1;else{var L=_-n,M=a-s;i.allClippedDrawRect.x=n,i.allClippedDrawRect.y=s,i.allClippedDrawRect.width=L,i.allClippedDrawRect.height=M,i.isUsing=!0}},e.prototype.setupLayoutBounds=function(t){var i=t/e.CHANNEL_COUNT,r=t%e.CHANNEL_COUNT;i=~~i,r=~~r;for(var o=0,n=0;n<e.CHANNEL_COUNT;n++){var s=i+(n<r?1:0);if(0==s);else if(1==s){var a=this.clipContextList[o++];a.layoutChannelNo=n,a.layoutBounds.x=0,a.layoutBounds.y=0,a.layoutBounds.width=1,a.layoutBounds.height=1}else if(2==s)for(var h=0;h<s;h++){var l=h%2,$=0;l=~~l;var a=this.clipContextList[o++];a.layoutChannelNo=n,a.layoutBounds.x=.5*l,a.layoutBounds.y=0,a.layoutBounds.width=.5,a.layoutBounds.height=1}else if(s<=4)for(var h=0;h<s;h++){var l=h%2,$=h/2;l=~~l,$=~~$;var a=this.clipContextList[o++];a.layoutChannelNo=n,a.layoutBounds.x=.5*l,a.layoutBounds.y=.5*$,a.layoutBounds.width=.5,a.layoutBounds.height=.5}else if(s<=9)for(var h=0;h<s;h++){var l=h%3,$=h/3;l=~~l,$=~~$;var a=this.clipContextList[o++];a.layoutChannelNo=n,a.layoutBounds.x=l/3,a.layoutBounds.y=$/3,a.layoutBounds.width=1/3,a.layoutBounds.height=1/3}else _._$li("_$6 _$0P mask count : %d",s)}},r.prototype.addClippedDrawData=function(t,i){var e=new o(t,i);this.clippedDrawContextList.push(e)},s._$JT=function(t,i,e){var r=t/i,o=e/i,n=o,s=1-(1-o)*(1-o),_=1-(1-n)*(1-n),a=1/3*(1-o)*s+(n*(2/3)+1/3*(1-n))*(1-s),h=(n+2/3*(1-n))*_+(o*(1/3)+2/3*(1-o))*(1-_),l=1-3*h+3*a-0,$=3*h-6*a+0,u=3*a-0;if(r<=0)return 0;if(r>=1)return 1;var p=r,f=p*p;return l*(p*f)+$*f+u*p+0},s.prototype._$a0=function(){},s.prototype.setFadeIn=function(t){this._$dP=t},s.prototype.setFadeOut=function(t){this._$eo=t},s.prototype._$pT=function(t){this._$V0=t},s.prototype.getFadeOut=function(){return this._$eo},s.prototype._$4T=function(){return this._$eo},s.prototype._$mT=function(){return this._$V0},s.prototype.getDurationMSec=function(){return-1},s.prototype.getLoopDurationMSec=function(){return-1},s.prototype.updateParam=function(t,i){if(i._$AT&&!i._$9L){var e=w.getUserTimeMSec();if(i._$z2<0){i._$z2=e,i._$bs=e;var r=this.getDurationMSec();i._$Do<0&&(i._$Do=r<=0?-1:i._$z2+r)}var o=this._$V0;o=o*(0==this._$dP?1:ht._$r2((e-i._$bs)/this._$dP))*(0==this._$eo||i._$Do<0?1:ht._$r2((i._$Do-e)/this._$eo)),0<=o&&o<=1||console.log("### assert!! ### "),this.updateParamExe(t,e,o,i),i._$Do>0&&i._$Do<e&&(i._$9L=!0)}},s.prototype.updateParamExe=function(t,i,e,r){},_._$8s=0,_._$fT=new Object,_.start=function(t){var i=_._$fT[t];null==i&&(i=new a,i._$r=t,_._$fT[t]=i),i._$0S=w.getSystemTimeMSec()},_.dump=function(t){var i=_._$fT[t];if(null!=i){var e=w.getSystemTimeMSec(),r=e-i._$0S;return console.log(t+" : "+r+"ms"),r}return-1},_.end=function(t){var i=_._$fT[t];if(null!=i){return w.getSystemTimeMSec()-i._$0S}return-1},_._$li=function(t,i){console.log("_$li : "+t+"\n",i)},_._$Ji=function(t,i){console.log(t,i)},_._$dL=function(t,i){console.log(t,i),console.log("\n")},_._$KL=function(t,i){for(var e=0;e<i;e++)e%16==0&&e>0?console.log("\n"):e%8==0&&e>0&&console.log("  "),console.log("%02X ",255&t[e]);console.log("\n")},_._$nr=function(t,i,e){console.log("%s\n",t);for(var r=i.length,o=0;o<r;++o)console.log("%5d",i[o]),console.log("%s\n",e),console.log(",");console.log("\n")},_._$Rb=function(t){console.log("dump exception : "+t),console.log("stack :: "+t.stack)},h.prototype._$8P=function(){return.5*(this.x+this.x+this.width)},h.prototype._$6P=function(){return.5*(this.y+this.y+this.height)},h.prototype._$EL=function(){return this.x+this.width},h.prototype._$5T=function(){return this.y+this.height},h.prototype._$jL=function(t,i,e,r){this.x=t,this.y=i,this.width=e,this.height=r},h.prototype._$jL=function(t){this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height},l.prototype=new et,l._$tP=new Object,l._$27=function(){l._$tP.clear()},l.getID=function(t){var i=l._$tP[t];return null==i&&(i=new l(t),l._$tP[t]=i),i},l.prototype._$3s=function(){return new l},u.prototype=new et,u._$tP=new Object,u._$27=function(){u._$tP.clear()},u.getID=function(t){var i=u._$tP[t];return null==i&&(i=new u(t),u._$tP[t]=i),i},u.prototype._$3s=function(){return new u},p._$42=0,p.prototype._$zP=function(){null==this._$vo&&(this._$vo=new ot),null==this._$F2&&(this._$F2=new Array)},p.prototype.getCanvasWidth=function(){return this._$ao},p.prototype.getCanvasHeight=function(){return this._$1S},p.prototype._$F0=function(t){this._$vo=t._$nP(),this._$F2=t._$nP(),this._$ao=t._$6L(),this._$1S=t._$6L()},p.prototype._$6S=function(t){this._$F2.push(t)},p.prototype._$Xr=function(){return this._$F2},p.prototype._$E2=function(){return this._$vo},f.prototype.setup=function(t,i,e){this._$ks=this._$Yb(),this.p2._$xT(),3==arguments.length&&(this._$Fo=t,this._$L2=i,this.p1._$p=e,this.p2._$p=e,this.p2.y=t,this.setup())},f.prototype.getPhysicsPoint1=function(){return this.p1},f.prototype.getPhysicsPoint2=function(){return this.p2},f.prototype._$qr=function(){return this._$Db},f.prototype._$pr=function(t){this._$Db=t},f.prototype._$5r=function(){return this._$M2},f.prototype._$Cs=function(){return this._$9b},f.prototype._$Yb=function(){return-180*Math.atan2(this.p1.x-this.p2.x,-(this.p1.y-this.p2.y))/Math.PI},f.prototype.addSrcParam=function(t,i,e,r){var o=new g(t,i,e,r);this._$lL.push(o)},f.prototype.addTargetParam=function(t,i,e,r){var o=new T(t,i,e,r);this._$qP.push(o)},f.prototype.update=function(t,i){if(0==this._$iP)return this._$iP=this._$iT=i,void(this._$Fo=Math.sqrt((this.p1.x-this.p2.x)*(this.p1.x-this.p2.x)+(this.p1.y-this.p2.y)*(this.p1.y-this.p2.y)));var e=(i-this._$iT)/1e3;if(0!=e){for(var r=this._$lL.length-1;r>=0;--r){this._$lL[r]._$oP(t,this)}this._$oo(t,e),this._$M2=this._$Yb(),this._$9b=(this._$M2-this._$ks)/e,this._$ks=this._$M2}for(var r=this._$qP.length-1;r>=0;--r){this._$qP[r]._$YS(t,this)}this._$iT=i},f.prototype._$oo=function(t,i){i<.033&&(i=.033);var e=1/i;this.p1.vx=(this.p1.x-this.p1._$s0)*e,this.p1.vy=(this.p1.y-this.p1._$70)*e,this.p1.ax=(this.p1.vx-this.p1._$7L)*e,this.p1.ay=(this.p1.vy-this.p1._$HL)*e,this.p1.fx=this.p1.ax*this.p1._$p,this.p1.fy=this.p1.ay*this.p1._$p,this.p1._$xT();var r,o,n=-Math.atan2(this.p1.y-this.p2.y,this.p1.x-this.p2.x),s=Math.cos(n),_=Math.sin(n),a=9.8*this.p2._$p,h=this._$Db*Lt._$bS,l=a*Math.cos(n-h);r=l*_,o=l*s;var $=-this.p1.fx*_*_,u=-this.p1.fy*_*s,p=-this.p2.vx*this._$L2,f=-this.p2.vy*this._$L2;this.p2.fx=r+$+p,this.p2.fy=o+u+f,this.p2.ax=this.p2.fx/this.p2._$p,this.p2.ay=this.p2.fy/this.p2._$p,this.p2.vx+=this.p2.ax*i,this.p2.vy+=this.p2.ay*i,this.p2.x+=this.p2.vx*i,this.p2.y+=this.p2.vy*i;var c=Math.sqrt((this.p1.x-this.p2.x)*(this.p1.x-this.p2.x)+(this.p1.y-this.p2.y)*(this.p1.y-this.p2.y));this.p2.x=this.p1.x+this._$Fo*(this.p2.x-this.p1.x)/c,this.p2.y=this.p1.y+this._$Fo*(this.p2.y-this.p1.y)/c,this.p2.vx=(this.p2.x-this.p2._$s0)*e,this.p2.vy=(this.p2.y-this.p2._$70)*e,this.p2._$xT()},c.prototype._$xT=function(){this._$s0=this.x,this._$70=this.y,this._$7L=this.vx,this._$HL=this.vy},d.prototype._$oP=function(t,i){},g.prototype=new d,g.prototype._$oP=function(t,i){var e=this.scale*t.getParamFloat(this._$wL),r=i.getPhysicsPoint1();switch(this._$tL){default:case f.Src.SRC_TO_X:r.x=r.x+(e-r.x)*this._$V0;break;case f.Src.SRC_TO_Y:r.y=r.y+(e-r.y)*this._$V0;break;case f.Src.SRC_TO_G_ANGLE:var o=i._$qr();o+=(e-o)*this._$V0,i._$pr(o)}},y.prototype._$YS=function(t,i){},T.prototype=new y,T.prototype._$YS=function(t,i){switch(this._$YP){default:case f.Target.TARGET_FROM_ANGLE:t.setParamFloat(this._$wL,this.scale*i._$5r(),this._$V0);break;case f.Target.TARGET_FROM_ANGLE_V:t.setParamFloat(this._$wL,this.scale*i._$Cs(),this._$V0)}},f.Src=function(){},f.Src.SRC_TO_X="SRC_TO_X",f.Src.SRC_TO_Y="SRC_TO_Y",f.Src.SRC_TO_G_ANGLE="SRC_TO_G_ANGLE",f.Target=function(){},f.Target.TARGET_FROM_ANGLE="TARGET_FROM_ANGLE",f.Target.TARGET_FROM_ANGLE_V="TARGET_FROM_ANGLE_V",P.prototype.init=function(t){this._$fL=t._$fL,this._$gL=t._$gL,this._$B0=t._$B0,this._$z0=t._$z0,this._$qT=t._$qT,this.reflectX=t.reflectX,this.reflectY=t.reflectY},P.prototype._$F0=function(t){this._$fL=t._$_T(),this._$gL=t._$_T(),this._$B0=t._$_T(),this._$z0=t._$_T(),this._$qT=t._$_T(),t.getFormatVersion()>=G.LIVE2D_FORMAT_VERSION_V2_10_SDK2&&(this.reflectX=t._$po(),this.reflectY=t._$po())},P.prototype._$e=function(){};var It=function(){};It._$ni=function(t,i,e,r,o,n,s,_,a){var h=s*n-_*o;if(0==h)return null;var l,$=((t-e)*n-(i-r)*o)/h;return l=0!=o?(t-e-$*s)/o:(i-r-$*_)/n,isNaN(l)&&(l=(t-e-$*s)/o,isNaN(l)&&(l=(i-r-$*_)/n),isNaN(l)&&(console.log("a is NaN @UtVector#_$ni() "),console.log("v1x : "+o),console.log("v1x != 0 ? "+(0!=o)))),null==a?new Array(l,$):(a[0]=l,a[1]=$,a)},S.prototype._$8P=function(){return this.x+.5*this.width},S.prototype._$6P=function(){return this.y+.5*this.height},S.prototype._$EL=function(){return this.x+this.width},S.prototype._$5T=function(){return this.y+this.height},S.prototype._$jL=function(t,i,e,r){this.x=t,this.y=i,this.width=e,this.height=r},S.prototype._$jL=function(t){this.x=t.x,this.y=t.y,this.width=t.width,this.height=t.height},S.prototype.contains=function(t,i){return this.x<=this.x&&this.y<=this.y&&this.x<=this.x+this.width&&this.y<=this.y+this.height},S.prototype.expand=function(t,i){this.x-=t,this.y-=i,this.width+=2*t,this.height+=2*i},v._$Z2=function(t,i,e,r){var o=i._$Q2(t,e),n=t._$vs(),s=t._$Tr();if(i._$zr(n,s,o),o<=0)return r[n[0]];if(1==o){var _=r[n[0]],a=r[n[1]],h=s[0];return _+(a-_)*h|0}if(2==o){var _=r[n[0]],a=r[n[1]],l=r[n[2]],$=r[n[3]],h=s[0],u=s[1],p=_+(a-_)*h|0,f=l+($-l)*h|0;return p+(f-p)*u|0}if(3==o){var c=r[n[0]],d=r[n[1]],g=r[n[2]],y=r[n[3]],m=r[n[4]],T=r[n[5]],P=r[n[6]],S=r[n[7]],h=s[0],u=s[1],v=s[2],_=c+(d-c)*h|0,a=g+(y-g)*h|0,l=m+(T-m)*h|0,$=P+(S-P)*h|0,p=_+(a-_)*u|0,f=l+($-l)*u|0;return p+(f-p)*v|0}if(4==o){var L=r[n[0]],M=r[n[1]],E=r[n[2]],A=r[n[3]],I=r[n[4]],w=r[n[5]],x=r[n[6]],O=r[n[7]],D=r[n[8]],R=r[n[9]],b=r[n[10]],F=r[n[11]],C=r[n[12]],N=r[n[13]],B=r[n[14]],U=r[n[15]],h=s[0],u=s[1],v=s[2],G=s[3],c=L+(M-L)*h|0,d=E+(A-E)*h|0,g=I+(w-I)*h|0,y=x+(O-x)*h|0,m=D+(R-D)*h|0,T=b+(F-b)*h|0,P=C+(N-C)*h|0,S=B+(U-B)*h|0,_=c+(d-c)*u|0,a=g+(y-g)*u|0,l=m+(T-m)*u|0,$=P+(S-P)*u|0,p=_+(a-_)*v|0,f=l+($-l)*v|0;return p+(f-p)*G|0}for(var Y=1<<o,k=new Float32Array(Y),V=0;V<Y;V++){for(var X=V,z=1,H=0;H<o;H++)z*=X%2==0?1-s[H]:s[H],X/=2;k[V]=z}for(var W=new Float32Array(Y),j=0;j<Y;j++)W[j]=r[n[j]];for(var q=0,j=0;j<Y;j++)q+=k[j]*W[j];return q+.5|0},v._$br=function(t,i,e,r){var o=i._$Q2(t,e),n=t._$vs(),s=t._$Tr();if(i._$zr(n,s,o),o<=0)return r[n[0]];if(1==o){var _=r[n[0]],a=r[n[1]],h=s[0];return _+(a-_)*h}if(2==o){var _=r[n[0]],a=r[n[1]],l=r[n[2]],$=r[n[3]],h=s[0],u=s[1];return(1-u)*(_+(a-_)*h)+u*(l+($-l)*h)}if(3==o){var p=r[n[0]],f=r[n[1]],c=r[n[2]],d=r[n[3]],g=r[n[4]],y=r[n[5]],m=r[n[6]],T=r[n[7]],h=s[0],u=s[1],P=s[2];return(1-P)*((1-u)*(p+(f-p)*h)+u*(c+(d-c)*h))+P*((1-u)*(g+(y-g)*h)+u*(m+(T-m)*h))}if(4==o){var S=r[n[0]],v=r[n[1]],L=r[n[2]],M=r[n[3]],E=r[n[4]],A=r[n[5]],I=r[n[6]],w=r[n[7]],x=r[n[8]],O=r[n[9]],D=r[n[10]],R=r[n[11]],b=r[n[12]],F=r[n[13]],C=r[n[14]],N=r[n[15]],h=s[0],u=s[1],P=s[2],B=s[3];return(1-B)*((1-P)*((1-u)*(S+(v-S)*h)+u*(L+(M-L)*h))+P*((1-u)*(E+(A-E)*h)+u*(I+(w-I)*h)))+B*((1-P)*((1-u)*(x+(O-x)*h)+u*(D+(R-D)*h))+P*((1-u)*(b+(F-b)*h)+u*(C+(N-C)*h)))}for(var U=1<<o,G=new Float32Array(U),Y=0;Y<U;Y++){for(var k=Y,V=1,X=0;X<o;X++)V*=k%2==0?1-s[X]:s[X],k/=2;G[Y]=V}for(var z=new Float32Array(U),H=0;H<U;H++)z[H]=r[n[H]];for(var W=0,H=0;H<U;H++)W+=G[H]*z[H];return W},v._$Vr=function(t,i,e,r,o,n,s,_){var a=i._$Q2(t,e),h=t._$vs(),l=t._$Tr();i._$zr(h,l,a);var $=2*r,u=s;if(a<=0){var p=h[0],f=o[p];if(2==_&&0==s)w._$jT(f,0,n,0,$);else for(var c=0;c<$;)n[u]=f[c++],n[u+1]=f[c++],u+=_}else if(1==a)for(var f=o[h[0]],d=o[h[1]],g=l[0],y=1-g,c=0;c<$;)n[u]=f[c]*y+d[c]*g,++c,n[u+1]=f[c]*y+d[c]*g,++c,u+=_;else if(2==a)for(var f=o[h[0]],d=o[h[1]],m=o[h[2]],T=o[h[3]],g=l[0],P=l[1],y=1-g,S=1-P,v=S*y,L=S*g,M=P*y,E=P*g,c=0;c<$;)n[u]=v*f[c]+L*d[c]+M*m[c]+E*T[c],++c,n[u+1]=v*f[c]+L*d[c]+M*m[c]+E*T[c],++c,u+=_;else if(3==a)for(var A=o[h[0]],I=o[h[1]],x=o[h[2]],O=o[h[3]],D=o[h[4]],R=o[h[5]],b=o[h[6]],F=o[h[7]],g=l[0],P=l[1],C=l[2],y=1-g,S=1-P,N=1-C,B=N*S*y,U=N*S*g,G=N*P*y,Y=N*P*g,k=C*S*y,V=C*S*g,X=C*P*y,z=C*P*g,c=0;c<$;)n[u]=B*A[c]+U*I[c]+G*x[c]+Y*O[c]+k*D[c]+V*R[c]+X*b[c]+z*F[c],++c,n[u+1]=B*A[c]+U*I[c]+G*x[c]+Y*O[c]+k*D[c]+V*R[c]+X*b[c]+z*F[c],++c,u+=_;else if(4==a)for(var H=o[h[0]],W=o[h[1]],j=o[h[2]],q=o[h[3]],J=o[h[4]],Q=o[h[5]],Z=o[h[6]],K=o[h[7]],tt=o[h[8]],it=o[h[9]],et=o[h[10]],rt=o[h[11]],ot=o[h[12]],nt=o[h[13]],st=o[h[14]],_t=o[h[15]],g=l[0],P=l[1],C=l[2],at=l[3],y=1-g,S=1-P,N=1-C,ht=1-at,lt=ht*N*S*y,$t=ht*N*S*g,ut=ht*N*P*y,pt=ht*N*P*g,ft=ht*C*S*y,ct=ht*C*S*g,dt=ht*C*P*y,gt=ht*C*P*g,yt=at*N*S*y,mt=at*N*S*g,Tt=at*N*P*y,Pt=at*N*P*g,St=at*C*S*y,vt=at*C*S*g,Lt=at*C*P*y,Mt=at*C*P*g,c=0;c<$;)n[u]=lt*H[c]+$t*W[c]+ut*j[c]+pt*q[c]+ft*J[c]+ct*Q[c]+dt*Z[c]+gt*K[c]+yt*tt[c]+mt*it[c]+Tt*et[c]+Pt*rt[c]+St*ot[c]+vt*nt[c]+Lt*st[c]+Mt*_t[c],++c,n[u+1]=lt*H[c]+$t*W[c]+ut*j[c]+pt*q[c]+ft*J[c]+ct*Q[c]+dt*Z[c]+gt*K[c]+yt*tt[c]+mt*it[c]+Tt*et[c]+Pt*rt[c]+St*ot[c]+vt*nt[c]+Lt*st[c]+Mt*_t[c],++c,u+=_;else{for(var Et=1<<a,At=new Float32Array(Et),It=0;It<Et;It++){for(var wt=It,xt=1,Ot=0;Ot<a;Ot++)xt*=wt%2==0?1-l[Ot]:l[Ot],wt/=2;At[It]=xt}for(var Dt=new Float32Array(Et),Rt=0;Rt<Et;Rt++)Dt[Rt]=o[h[Rt]];for(var c=0;c<$;){for(var bt=0,Ft=0,Ct=c+1,Rt=0;Rt<Et;Rt++)bt+=At[Rt]*Dt[Rt][c],Ft+=At[Rt]*Dt[Rt][Ct];c+=2,n[u]=bt,n[u+1]=Ft,u+=_}}},L.prototype._$HT=function(t,i){this.x=t,this.y=i},L.prototype._$HT=function(t){this.x=t.x,this.y=t.y},M._$ur=-2,M._$ES=500,M._$wb=2,M._$8S=3,M._$52=M._$ES,M._$R2=M._$ES,M._$or=function(){return M._$52},M._$Pr=function(){return M._$R2},M.prototype.convertClipIDForV2_11=function(t){var i=[];return null==t?null:0==t.length?null:/,/.test(t)?i=t.id.split(","):(i.push(t.id),i)},M.prototype._$F0=function(t){this._$gP=t._$nP(),this._$dr=t._$nP(),this._$GS=t._$nP(),this._$qb=t._$6L(),this._$Lb=t._$cS(),this._$mS=t._$Tb(),t.getFormatVersion()>=G._$T7?(this.clipID=t._$nP(),this.clipIDList=this.convertClipIDForV2_11(this.clipID)):this.clipIDList=[],this._$MS(this._$Lb)},M.prototype.getClipIDList=function(){return this.clipIDList},M.prototype.init=function(t){},M.prototype._$Nr=function(t,i){if(i._$IS[0]=!1,i._$Us=v._$Z2(t,this._$GS,i._$IS,this._$Lb),at._$Zs);else if(i._$IS[0])return;i._$7s=v._$br(t,this._$GS,i._$IS,this._$mS)},M.prototype._$2b=function(t,i){},M.prototype.getDrawDataID=function(){return this._$gP},M.prototype._$j2=function(t){this._$gP=t},M.prototype.getOpacity=function(t,i){return i._$7s},M.prototype._$zS=function(t,i){return i._$Us},M.prototype._$MS=function(t){for(var i=t.length-1;i>=0;--i){var e=t[i];e<M._$52?M._$52=e:e>M._$R2&&(M._$R2=e)}},M.prototype.getTargetBaseDataID=function(){return this._$dr},M.prototype._$gs=function(t){this._$dr=t},M.prototype._$32=function(){return null!=this._$dr&&this._$dr!=yt._$2o()},M.prototype.preDraw=function(t,i,e){},M.prototype.draw=function(t,i,e){},M.prototype.getType=function(){},M.prototype._$B2=function(t,i,e){},E._$ps=32,E.CLIPPING_PROCESS_NONE=0,E.CLIPPING_PROCESS_OVERWRITE_ALPHA=1,E.CLIPPING_PROCESS_MULTIPLY_ALPHA=2,E.CLIPPING_PROCESS_DRAW=3,E.CLIPPING_PROCESS_CLEAR_ALPHA=4,E.prototype.setChannelFlagAsColor=function(t,i){this.CHANNEL_COLORS[t]=i},E.prototype.getChannelFlagAsColor=function(t){return this.CHANNEL_COLORS[t]},E.prototype._$ZT=function(){},E.prototype._$Uo=function(t,i,e,r,o,n,s){},E.prototype._$Rs=function(){return-1},E.prototype._$Ds=function(t){},E.prototype.setBaseColor=function(t,i,e,r){t<0?t=0:t>1&&(t=1),i<0?i=0:i>1&&(i=1),e<0?e=0:e>1&&(e=1),r<0?r=0:r>1&&(r=1),this._$lT=t,this._$C0=i,this._$tT=e,this._$WL=r},E.prototype._$WP=function(t){this.culling=t},E.prototype.setMatrix=function(t){for(var i=0;i<16;i++)this.matrix4x4[i]=t[i]},E.prototype._$IT=function(){return this.matrix4x4},E.prototype.setPremultipliedAlpha=function(t){this.premultipliedAlpha=t},E.prototype.isPremultipliedAlpha=function(){return this.premultipliedAlpha},E.prototype.setAnisotropy=function(t){this.anisotropy=t},E.prototype.getAnisotropy=function(){return this.anisotropy},E.prototype.getClippingProcess=function(){return this.clippingProcess},E.prototype.setClippingProcess=function(t){this.clippingProcess=t},E.prototype.setClipBufPre_clipContextForMask=function(t){this.clipBufPre_clipContextMask=t},E.prototype.getClipBufPre_clipContextMask=function(){return this.clipBufPre_clipContextMask},E.prototype.setClipBufPre_clipContextForDraw=function(t){this.clipBufPre_clipContextDraw=t},E.prototype.getClipBufPre_clipContextDraw=function(){return this.clipBufPre_clipContextDraw},I._$ur=-2,I._$c2=1,I._$_b=2,I.prototype._$F0=function(t){this._$kP=t._$nP(),this._$dr=t._$nP()},I.prototype.readV2_opacity=function(t){t.getFormatVersion()>=G.LIVE2D_FORMAT_VERSION_V2_10_SDK2&&(this._$mS=t._$Tb())},I.prototype.init=function(t){},I.prototype._$Nr=function(t,i){},I.prototype.interpolateOpacity=function(t,i,e,r){null==this._$mS?e.setInterpolatedOpacity(1):e.setInterpolatedOpacity(v._$br(t,i,r,this._$mS))},I.prototype._$2b=function(t,i){},I.prototype._$nb=function(t,i,e,r,o,n,s){},I.prototype.getType=function(){},I.prototype._$gs=function(t){this._$dr=t},I.prototype._$a2=function(t){this._$kP=t},I.prototype.getTargetBaseDataID=function(){return this._$dr},I.prototype.getBaseDataID=function(){return this._$kP},I.prototype._$32=function(){return null!=this._$dr&&this._$dr!=yt._$2o()},w._$W2=0,w._$CS=w._$W2,w._$Mo=function(){return!0},w._$XP=function(t){try{for(var i=getTimeMSec();getTimeMSec()-i<t;);}catch(t){t._$Rb()}},w.getUserTimeMSec=function(){return w._$CS==w._$W2?w.getSystemTimeMSec():w._$CS},w.setUserTimeMSec=function(t){w._$CS=t},w.updateUserTimeMSec=function(){return w._$CS=w.getSystemTimeMSec()},w.getTimeMSec=function(){return(new Date).getTime()},w.getSystemTimeMSec=function(){return(new Date).getTime()},w._$Q=function(t){},w._$jT=function(t,i,e,r,o){for(var n=0;n<o;n++)e[r+n]=t[i+n]},x._$ds=-2,x.prototype._$F0=function(t){this._$wL=t._$nP(),this._$VP=t._$6L(),this._$GP=t._$nP()},x.prototype.getParamIndex=function(t){return this._$2r!=t&&(this._$8o=x._$ds),this._$8o},x.prototype._$Pb=function(t,i){this._$8o=t,this._$2r=i},x.prototype.getParamID=function(){return this._$wL},x.prototype._$yP=function(t){this._$wL=t},x.prototype._$N2=function(){return this._$VP},x.prototype._$d2=function(){return this._$GP},x.prototype._$t2=function(t,i){this._$VP=t,this._$GP=i},x.prototype._$Lr=function(){return this._$O2},x.prototype._$wr=function(t){this._$O2=t},x.prototype._$SL=function(){return this._$ri},x.prototype._$AL=function(t){this._$ri=t},O.startsWith=function(t,i,e){var r=i+e.length;if(r>=t.length)return!1;for(var o=i;o<r;o++)if(O.getChar(t,o)!=e.charAt(o-i))return!1;return!0},O.getChar=function(t,i){return String.fromCharCode(t.getUint8(i))},O.createString=function(t,i,e){for(var r=new ArrayBuffer(2*e),o=new Uint16Array(r),n=0;n<e;n++)o[n]=t.getUint8(i+n);return String.fromCharCode.apply(null,o)},O._$LS=function(t,i,e,r){t instanceof ArrayBuffer&&(t=new DataView(t));var o=e,n=!1,s=!1,_=0,a=O.getChar(t,o);"-"==a&&(n=!0,o++);for(var h=!1;o<i;o++){switch(a=O.getChar(t,o)){case"0":_*=10;break;case"1":_=10*_+1;break;case"2":_=10*_+2;break;case"3":_=10*_+3;break;case"4":_=10*_+4;break;case"5":_=10*_+5;break;case"6":_=10*_+6;break;case"7":_=10*_+7;break;case"8":_=10*_+8;break;case"9":_=10*_+9;break;case".":s=!0,o++,h=!0;break;default:h=!0}if(h)break}if(s)for(var l=.1,$=!1;o<i;o++){switch(a=O.getChar(t,o)){case"0":break;case"1":_+=1*l;break;case"2":_+=2*l;break;case"3":_+=3*l;break;case"4":_+=4*l;break;case"5":_+=5*l;break;case"6":_+=6*l;break;case"7":_+=7*l;break;case"8":_+=8*l;break;case"9":_+=9*l;break;default:$=!0}if(l*=.1,$)break}return n&&(_=-_),r[0]=o,_},D.prototype._$zP=function(){this._$Ob=new Array},D.prototype._$F0=function(t){this._$Ob=t._$nP()},D.prototype._$Ur=function(t){if(t._$WS())return!0;for(var i=t._$v2(),e=this._$Ob.length-1;e>=0;--e){var r=this._$Ob[e].getParamIndex(i);if(r==x._$ds&&(r=t.getParamIndex(this._$Ob[e].getParamID())),t._$Xb(r))return!0}return!1},D.prototype._$Q2=function(t,i){for(var e,r,o=this._$Ob.length,n=t._$v2(),s=0,_=0;_<o;_++){var a=this._$Ob[_];if(e=a.getParamIndex(n),e==x._$ds&&(e=t.getParamIndex(a.getParamID()),a._$Pb(e,n)),e<0)throw new Exception("err 23242 : "+a.getParamID());var h=e<0?0:t.getParamFloat(e);r=a._$N2();var l,$,u=a._$d2(),p=-1,f=0;if(r<1);else if(1==r)l=u[0],l-U._$J<h&&h<l+U._$J?(p=0,f=0):(p=0,i[0]=!0);else if(l=u[0],h<l-U._$J)p=0,i[0]=!0;else if(h<l+U._$J)p=0;else{for(var c=!1,d=1;d<r;++d){if($=u[d],h<$+U._$J){$-U._$J<h?p=d:(p=d-1,f=(h-l)/($-l),s++),c=!0;break}l=$}c||(p=r-1,f=0,i[0]=!0)}a._$wr(p),a._$AL(f)}return s},D.prototype._$zr=function(t,i,e){var r=1<<e;r+1>U._$Qb&&console.log("err 23245\n");for(var o=this._$Ob.length,n=1,s=1,_=0,a=0;a<r;++a)t[a]=0;for(var h=0;h<o;++h){var l=this._$Ob[h];if(0==l._$SL()){var $=l._$Lr()*n;if($<0&&at._$3T)throw new Exception("err 23246");for(var a=0;a<r;++a)t[a]+=$}else{for(var $=n*l._$Lr(),u=n*(l._$Lr()+1),a=0;a<r;++a)t[a]+=(a/s|0)%2==0?$:u;i[_++]=l._$SL(),s*=2}n*=l._$N2()}t[r]=65535,i[_]=-1},D.prototype._$h2=function(t,i,e){for(var r=new Float32Array(i),o=0;o<i;++o)r[o]=e[o];var n=new x;n._$yP(t),n._$t2(i,r),this._$Ob.push(n)},D.prototype._$J2=function(t){for(var i=t,e=this._$Ob.length,r=0;r<e;++r){var o=this._$Ob[r],n=o._$N2(),s=i%o._$N2(),_=o._$d2()[s];console.log("%s[%d]=%7.2f / ",o.getParamID(),s,_),i/=n}console.log("\n")},D.prototype.getParamCount=function(){return this._$Ob.length},D.prototype._$zs=function(){return this._$Ob},R.prototype.identity=function(){for(var t=0;t<16;t++)this.m[t]=t%5==0?1:0},R.prototype.getArray=function(){return this.m},R.prototype.getCopyMatrix=function(){return new Float32Array(this.m)},R.prototype.setMatrix=function(t){if(null!=t&&16==t.length)for(var i=0;i<16;i++)this.m[i]=t[i]},R.prototype.mult=function(t,i,e){return null==i?null:(this==i?this.mult_safe(this.m,t.m,i.m,e):this.mult_fast(this.m,t.m,i.m,e),i)},R.prototype.mult_safe=function(t,i,e,r){if(t==e){var o=new Array(16);this.mult_fast(t,i,o,r);for(var n=15;n>=0;--n)e[n]=o[n]}else this.mult_fast(t,i,e,r)},R.prototype.mult_fast=function(t,i,e,r){r?(e[0]=t[0]*i[0]+t[4]*i[1]+t[8]*i[2],e[4]=t[0]*i[4]+t[4]*i[5]+t[8]*i[6],e[8]=t[0]*i[8]+t[4]*i[9]+t[8]*i[10],e[12]=t[0]*i[12]+t[4]*i[13]+t[8]*i[14]+t[12],e[1]=t[1]*i[0]+t[5]*i[1]+t[9]*i[2],e[5]=t[1]*i[4]+t[5]*i[5]+t[9]*i[6],e[9]=t[1]*i[8]+t[5]*i[9]+t[9]*i[10],e[13]=t[1]*i[12]+t[5]*i[13]+t[9]*i[14]+t[13],e[2]=t[2]*i[0]+t[6]*i[1]+t[10]*i[2],e[6]=t[2]*i[4]+t[6]*i[5]+t[10]*i[6],e[10]=t[2]*i[8]+t[6]*i[9]+t[10]*i[10],e[14]=t[2]*i[12]+t[6]*i[13]+t[10]*i[14]+t[14],e[3]=e[7]=e[11]=0,e[15]=1):(e[0]=t[0]*i[0]+t[4]*i[1]+t[8]*i[2]+t[12]*i[3],e[4]=t[0]*i[4]+t[4]*i[5]+t[8]*i[6]+t[12]*i[7],e[8]=t[0]*i[8]+t[4]*i[9]+t[8]*i[10]+t[12]*i[11],e[12]=t[0]*i[12]+t[4]*i[13]+t[8]*i[14]+t[12]*i[15],e[1]=t[1]*i[0]+t[5]*i[1]+t[9]*i[2]+t[13]*i[3],e[5]=t[1]*i[4]+t[5]*i[5]+t[9]*i[6]+t[13]*i[7],e[9]=t[1]*i[8]+t[5]*i[9]+t[9]*i[10]+t[13]*i[11],e[13]=t[1]*i[12]+t[5]*i[13]+t[9]*i[14]+t[13]*i[15],e[2]=t[2]*i[0]+t[6]*i[1]+t[10]*i[2]+t[14]*i[3],e[6]=t[2]*i[4]+t[6]*i[5]+t[10]*i[6]+t[14]*i[7],e[10]=t[2]*i[8]+t[6]*i[9]+t[10]*i[10]+t[14]*i[11],e[14]=t[2]*i[12]+t[6]*i[13]+t[10]*i[14]+t[14]*i[15],e[3]=t[3]*i[0]+t[7]*i[1]+t[11]*i[2]+t[15]*i[3],e[7]=t[3]*i[4]+t[7]*i[5]+t[11]*i[6]+t[15]*i[7],e[11]=t[3]*i[8]+t[7]*i[9]+t[11]*i[10]+t[15]*i[11],e[15]=t[3]*i[12]+t[7]*i[13]+t[11]*i[14]+t[15]*i[15])},R.prototype.translate=function(t,i,e){this.m[12]=this.m[0]*t+this.m[4]*i+this.m[8]*e+this.m[12],this.m[13]=this.m[1]*t+this.m[5]*i+this.m[9]*e+this.m[13],this.m[14]=this.m[2]*t+this.m[6]*i+this.m[10]*e+this.m[14],this.m[15]=this.m[3]*t+this.m[7]*i+this.m[11]*e+this.m[15]},R.prototype.scale=function(t,i,e){this.m[0]*=t,this.m[4]*=i,this.m[8]*=e,this.m[1]*=t,this.m[5]*=i,this.m[9]*=e,this.m[2]*=t,this.m[6]*=i,this.m[10]*=e,this.m[3]*=t,this.m[7]*=i,this.m[11]*=e},R.prototype.rotateX=function(t){var i=Lt.fcos(t),e=Lt._$9(t),r=this.m[4];this.m[4]=r*i+this.m[8]*e,this.m[8]=r*-e+this.m[8]*i,r=this.m[5],this.m[5]=r*i+this.m[9]*e,this.m[9]=r*-e+this.m[9]*i,r=this.m[6],this.m[6]=r*i+this.m[10]*e,this.m[10]=r*-e+this.m[10]*i,r=this.m[7],this.m[7]=r*i+this.m[11]*e,this.m[11]=r*-e+this.m[11]*i},R.prototype.rotateY=function(t){var i=Lt.fcos(t),e=Lt._$9(t),r=this.m[0];this.m[0]=r*i+this.m[8]*-e,this.m[8]=r*e+this.m[8]*i,r=this.m[1],this.m[1]=r*i+this.m[9]*-e,this.m[9]=r*e+this.m[9]*i,r=m[2],this.m[2]=r*i+this.m[10]*-e,this.m[10]=r*e+this.m[10]*i,r=m[3],this.m[3]=r*i+this.m[11]*-e,this.m[11]=r*e+this.m[11]*i},R.prototype.rotateZ=function(t){var i=Lt.fcos(t),e=Lt._$9(t),r=this.m[0];this.m[0]=r*i+this.m[4]*e,this.m[4]=r*-e+this.m[4]*i,r=this.m[1],this.m[1]=r*i+this.m[5]*e,this.m[5]=r*-e+this.m[5]*i,r=this.m[2],this.m[2]=r*i+this.m[6]*e,this.m[6]=r*-e+this.m[6]*i,r=this.m[3],this.m[3]=r*i+this.m[7]*e,this.m[7]=r*-e+this.m[7]*i},b.prototype=new et,b._$tP=new Object,b._$27=function(){b._$tP.clear()},b.getID=function(t){var i=b._$tP[t];return null==i&&(i=new b(t),b._$tP[t]=i),i},b.prototype._$3s=function(){return new b},F._$kS=-1,F._$pS=0,F._$hb=1,F.STATE_IDENTITY=0,F._$gb=1,F._$fo=2,F._$go=4,F.prototype.transform=function(t,i,e){var r,o,n,s,_,a,h=0,l=0;switch(this._$hi){default:return;case F._$go|F._$fo|F._$gb:for(r=this._$7,o=this._$H,n=this._$k,s=this._$f,_=this._$g,a=this._$w;--e>=0;){var $=t[h++],u=t[h++];i[l++]=r*$+o*u+n,i[l++]=s*$+_*u+a}return;case F._$go|F._$fo:for(r=this._$7,o=this._$H,s=this._$f,_=this._$g;--e>=0;){var $=t[h++],u=t[h++];i[l++]=r*$+o*u,i[l++]=s*$+_*u}return;case F._$go|F._$gb:for(o=this._$H,n=this._$k,s=this._$f,a=this._$w;--e>=0;){var $=t[h++];i[l++]=o*t[h++]+n,i[l++]=s*$+a}return;case F._$go:for(o=this._$H,s=this._$f;--e>=0;){var $=t[h++];i[l++]=o*t[h++],i[l++]=s*$}return;case F._$fo|F._$gb:for(r=this._$7,n=this._$k,_=this._$g,a=this._$w;--e>=0;)i[l++]=r*t[h++]+n,i[l++]=_*t[h++]+a;return;case F._$fo:for(r=this._$7,_=this._$g;--e>=0;)i[l++]=r*t[h++],i[l++]=_*t[h++];return;case F._$gb:for(n=this._$k,a=this._$w;--e>=0;)i[l++]=t[h++]+n,i[l++]=t[h++]+a;return;case F.STATE_IDENTITY:return void(t==i&&h==l||w._$jT(t,h,i,l,2*e))}},F.prototype.update=function(){0==this._$H&&0==this._$f?1==this._$7&&1==this._$g?0==this._$k&&0==this._$w?(this._$hi=F.STATE_IDENTITY,this._$Z=F._$pS):(this._$hi=F._$gb,this._$Z=F._$hb):0==this._$k&&0==this._$w?(this._$hi=F._$fo,this._$Z=F._$kS):(this._$hi=F._$fo|F._$gb,this._$Z=F._$kS):0==this._$7&&0==this._$g?0==this._$k&&0==this._$w?(this._$hi=F._$go,this._$Z=F._$kS):(this._$hi=F._$go|F._$gb,this._$Z=F._$kS):0==this._$k&&0==this._$w?(this._$hi=F._$go|F._$fo,this._$Z=F._$kS):(this._$hi=F._$go|F._$fo|F._$gb,this._$Z=F._$kS)},F.prototype._$RT=function(t){this._$IT(t);var i=t[0],e=t[2],r=t[1],o=t[3],n=Math.sqrt(i*i+r*r),s=i*o-e*r;0==n?at._$so&&console.log("affine._$RT() / rt==0"):(t[0]=n,t[1]=s/n,t[2]=(r*o+i*e)/s,t[3]=Math.atan2(r,i))},F.prototype._$ho=function(t,i,e,r){var o=new Float32Array(6),n=new Float32Array(6);t._$RT(o),i._$RT(n);var s=new Float32Array(6);s[0]=o[0]+(n[0]-o[0])*e,s[1]=o[1]+(n[1]-o[1])*e,s[2]=o[2]+(n[2]-o[2])*e,s[3]=o[3]+(n[3]-o[3])*e,s[4]=o[4]+(n[4]-o[4])*e,s[5]=o[5]+(n[5]-o[5])*e,r._$CT(s)},F.prototype._$CT=function(t){var i=Math.cos(t[3]),e=Math.sin(t[3]);this._$7=t[0]*i,this._$f=t[0]*e,this._$H=t[1]*(t[2]*i-e),this._$g=t[1]*(t[2]*e+i),this._$k=t[4],this._$w=t[5],this.update()},F.prototype._$IT=function(t){t[0]=this._$7,t[1]=this._$f,t[2]=this._$H,t[3]=this._$g,t[4]=this._$k,t[5]=this._$w},C.prototype=new s,C._$cs="VISIBLE:",C._$ar="LAYOUT:",C._$Co=0,C._$D2=[],C._$1T=1,C.loadMotion=function(t){var i=new C,e=[0],r=t.length;i._$yT=0;for(var o=0;o<r;++o){var n=255&t[o];if("\n"!=n&&"\r"!=n)if("#"!=n)if("$"!=n){if("a"<=n&&n<="z"||"A"<=n&&n<="Z"||"_"==n){for(var s=o,_=-1;o<r&&("\r"!=(n=255&t[o])&&"\n"!=n);++o)if("="==n){_=o;break}if(_>=0){var a=new B;O.startsWith(t,s,C._$cs)?(a._$RP=B._$hs,a._$4P=new String(t,s,_-s)):O.startsWith(t,s,C._$ar)?(a._$4P=new String(t,s+7,_-s-7),O.startsWith(t,s+7,"ANCHOR_X")?a._$RP=B._$xs:O.startsWith(t,s+7,"ANCHOR_Y")?a._$RP=B._$us:O.startsWith(t,s+7,"SCALE_X")?a._$RP=B._$qs:O.startsWith(t,s+7,"SCALE_Y")?a._$RP=B._$Ys:O.startsWith(t,s+7,"X")?a._$RP=B._$ws:O.startsWith(t,s+7,"Y")&&(a._$RP=B._$Ns)):(a._$RP=B._$Fr,a._$4P=new String(t,s,_-s)),i.motions.push(a);var h=0;for(C._$D2.clear(),o=_+1;o<r&&("\r"!=(n=255&t[o])&&"\n"!=n);++o)if(","!=n&&" "!=n&&"\t"!=n){var l=O._$LS(t,r,o,e);if(e[0]>0){C._$D2.push(l),h++;var $=e[0];if($<o){console.log("_$n0 _$hi . @Live2DMotion loadMotion()\n");break}o=$}}a._$I0=C._$D2._$BL(),h>i._$yT&&(i._$yT=h)}}}else{for(var s=o,_=-1;o<r&&("\r"!=(n=255&t[o])&&"\n"!=n);++o)if("="==n){_=o;break}var u=!1;if(_>=0)for(_==s+4&&"f"==t[s+1]&&"p"==t[s+2]&&"s"==t[s+3]&&(u=!0),o=_+1;o<r&&("\r"!=(n=255&t[o])&&"\n"!=n);++o)if(","!=n&&" "!=n&&"\t"!=n){var l=O._$LS(t,r,o,e);e[0]>0&&u&&5<l&&l<121&&(i._$D0=l),o=e[0]}for(;o<r&&("\n"!=t[o]&&"\r"!=t[o]);++o);}else for(;o<r&&("\n"!=t[o]&&"\r"!=t[o]);++o);}return i._$AS=1e3*i._$yT/i._$D0|0,i},C.prototype.getDurationMSec=function(){return this._$AS},C.prototype.dump=function(){for(var t=0;t<this.motions.length;t++){var i=this.motions[t];console.log("_$wL[%s] [%d]. ",i._$4P,i._$I0.length);for(var e=0;e<i._$I0.length&&e<10;e++)console.log("%5.2f ,",i._$I0[e]);console.log("\n")}},C.prototype.updateParamExe=function(t,i,e,r){for(var o=i-r._$z2,n=o*this._$D0/1e3,s=0|n,_=n-s,a=0;a<this.motions.length;a++){var h=this.motions[a],l=h._$I0.length,$=h._$4P;if(h._$RP==B._$hs){var u=h._$I0[s>=l?l-1:s];t.setParamFloat($,u)}else if(B._$ws<=h._$RP&&h._$RP<=B._$Ys);else{var p=t.getParamFloat($),f=h._$I0[s>=l?l-1:s],c=h._$I0[s+1>=l?l-1:s+1],d=f+(c-f)*_,g=p+(d-p)*e;t.setParamFloat($,g)}}s>=this._$yT&&(this._$E?(r._$z2=i,this.loopFadeIn&&(r._$bs=i)):r._$9L=!0)},C.prototype._$r0=function(){return this._$E},C.prototype._$aL=function(t){this._$E=t},C.prototype.isLoopFadeIn=function(){return this.loopFadeIn},C.prototype.setLoopFadeIn=function(t){this.loopFadeIn=t},N.prototype.clear=function(){this.size=0},N.prototype.add=function(t){if(this._$P.length<=this.size){var i=new Float32Array(2*this.size);w._$jT(this._$P,0,i,0,this.size),this._$P=i}this._$P[this.size++]=t},N.prototype._$BL=function(){var t=new Float32Array(this.size);return w._$jT(this._$P,0,t,0,this.size),t},B._$Fr=0,B._$hs=1,B._$ws=100,B._$Ns=101,B._$xs=102,B._$us=103,B._$qs=104,B._$Ys=105,U._$Ms=1,U._$Qs=2,U._$i2=0,U._$No=2,U._$do=U._$Ms,U._$Ls=!0,U._$1r=5,U._$Qb=65,U._$J=1e-4,U._$FT=.001,U._$Ss=3,G._$o7=6,G._$S7=7,G._$s7=8,G._$77=9,G.LIVE2D_FORMAT_VERSION_V2_10_SDK2=10,G.LIVE2D_FORMAT_VERSION_V2_11_SDK2_1=11,G._$T7=G.LIVE2D_FORMAT_VERSION_V2_11_SDK2_1,G._$Is=-2004318072,G._$h0=0,G._$4L=23,G._$7P=33,G._$uT=function(t){console.log("_$bo :: _$6 _$mo _$E0 : %d\n",t)},G._$9o=function(t){if(t<40)return G._$uT(t),null;if(t<50)return G._$uT(t),null;if(t<60)return G._$uT(t),null;if(t<100)switch(t){case 65:return new Z;case 66:return new D;case 67:return new x;case 68:return new z;case 69:return new P;case 70:return new $t;default:return G._$uT(t),null}else if(t<150)switch(t){case 131:return new st;case 133:return new tt;case 136:return new p;case 137:return new ot;case 142:return new j}return G._$uT(t),null},Y._$HP=0,Y._$_0=!0;Y._$V2=-1,Y._$W0=-1,Y._$jr=!1,Y._$ZS=!0,Y._$tr=-1e6,Y._$lr=1e6,Y._$is=32,Y._$e=!1,Y.prototype.getDrawDataIndex=function(t){for(var i=this._$aS.length-1;i>=0;--i)if(null!=this._$aS[i]&&this._$aS[i].getDrawDataID()==t)return i;return-1},Y.prototype.getDrawData=function(t){if(t instanceof b){if(null==this._$Bo){this._$Bo=new Object;for(var i=this._$aS.length,e=0;e<i;e++){var r=this._$aS[e],o=r.getDrawDataID();null!=o&&(this._$Bo[o]=r)}}return this._$Bo[id]}return t<this._$aS.length?this._$aS[t]:null},Y.prototype.release=function(){this._$3S.clear(),this._$aS.clear(),this._$F2.clear(),null!=this._$Bo&&this._$Bo.clear(),this._$db.clear(),this._$8b.clear(),this._$Hr.clear()},Y.prototype.init=function(){this._$co++,this._$F2.length>0&&this.release();for(var t=this._$Ri.getModelImpl(),i=t._$Xr(),r=i.length,o=new Array,n=new Array,s=0;s<r;++s){var _=i[s];this._$F2.push(_),this._$Hr.push(_.init(this));for(var a=_.getBaseData(),h=a.length,l=0;l<h;++l)o.push(a[l]);for(var l=0;l<h;++l){var $=a[l].init(this);$._$l2(s),n.push($)}for(var u=_.getDrawData(),p=u.length,l=0;l<p;++l){var f=u[l],c=f.init(this);c._$IP=s,this._$aS.push(f),this._$8b.push(c)}}for(var d=o.length,g=yt._$2o();;){for(var y=!1,s=0;s<d;++s){var m=o[s];if(null!=m){var T=m.getTargetBaseDataID();(null==T||T==g||this.getBaseDataIndex(T)>=0)&&(this._$3S.push(m),this._$db.push(n[s]),o[s]=null,y=!0)}}if(!y)break}var P=t._$E2();if(null!=P){var S=P._$1s();if(null!=S)for(var v=S.length,s=0;s<v;++s){var L=S[s];null!=L&&this._$02(L.getParamID(),L.getDefaultValue(),L.getMinValue(),L.getMaxValue())}}this.clipManager=new e(this.dp_webgl),this.clipManager.init(this,this._$aS,this._$8b),this._$QT=!0},Y.prototype.update=function(){Y._$e&&_.start("_$zL");for(var t=this._$_2.length,i=0;i<t;i++)this._$_2[i]!=this._$vr[i]&&(this._$Js[i]=Y._$ZS,this._$vr[i]=this._$_2[i]);var e=this._$3S.length,r=this._$aS.length,o=W._$or(),n=W._$Pr(),s=n-o+1;(null==this._$Ws||this._$Ws.length<s)&&(this._$Ws=new Int16Array(s),this._$Vs=new Int16Array(s));for(var i=0;i<s;i++)this._$Ws[i]=Y._$V2,this._$Vs[i]=Y._$V2;(null==this._$Er||this._$Er.length<r)&&(this._$Er=new Int16Array(r));for(var i=0;i<r;i++)this._$Er[i]=Y._$W0;Y._$e&&_.dump("_$zL"),Y._$e&&_.start("_$UL");for(var a=null,h=0;h<e;++h){var l=this._$3S[h],$=this._$db[h];try{l._$Nr(this,$),l._$2b(this,$)}catch(t){null==a&&(a=t)}}null!=a&&Y._$_0&&_._$Rb(a),Y._$e&&_.dump("_$UL"),Y._$e&&_.start("_$DL");for(var u=null,p=0;p<r;++p){var f=this._$aS[p],c=this._$8b[p];try{if(f._$Nr(this,c),c._$u2())continue;f._$2b(this,c);var d,g=Math.floor(f._$zS(this,c)-o);try{d=this._$Vs[g]}catch(t){console.log("_$li :: %s / %s \t\t\t\t@@_$fS\n",t.toString(),f.getDrawDataID().toString()),g=Math.floor(f._$zS(this,c)-o);continue}d==Y._$V2?this._$Ws[g]=p:this._$Er[d]=p,this._$Vs[g]=p}catch(t){null==u&&(u=t,at._$sT(at._$H7))}}null!=u&&Y._$_0&&_._$Rb(u),Y._$e&&_.dump("_$DL"),Y._$e&&_.start("_$eL");for(var i=this._$Js.length-1;i>=0;i--)this._$Js[i]=Y._$jr;return this._$QT=!1,Y._$e&&_.dump("_$eL"),!1},Y.prototype.preDraw=function(t){null!=this.clipManager&&(t._$ZT(),this.clipManager.setupClip(this,t))},Y.prototype.draw=function(t){if(null==this._$Ws)return void _._$li("call _$Ri.update() before _$Ri.draw() ");var i=this._$Ws.length;t._$ZT();for(var e=0;e<i;++e){var r=this._$Ws[e];if(r!=Y._$V2)for(;;){var o=this._$aS[r],n=this._$8b[r];if(n._$yo()){var s=n._$IP,a=this._$Hr[s];n._$VS=a.getPartsOpacity(),o.draw(t,this,n)}var h=this._$Er[r];if(h<=r||h==Y._$W0)break;r=h}}},Y.prototype.getParamIndex=function(t){for(var i=this._$pb.length-1;i>=0;--i)if(this._$pb[i]==t)return i;return this._$02(t,0,Y._$tr,Y._$lr)},Y.prototype._$BS=function(t){return this.getBaseDataIndex(t)},Y.prototype.getBaseDataIndex=function(t){for(var i=this._$3S.length-1;i>=0;--i)if(null!=this._$3S[i]&&this._$3S[i].getBaseDataID()==t)return i;return-1},Y.prototype._$UT=function(t,i){var e=new Float32Array(i);return w._$jT(t,0,e,0,t.length),e},Y.prototype._$02=function(t,i,e,r){if(this._$qo>=this._$pb.length){var o=this._$pb.length,n=new Array(2*o);w._$jT(this._$pb,0,n,0,o),this._$pb=n,this._$_2=this._$UT(this._$_2,2*o),this._$vr=this._$UT(this._$vr,2*o),this._$Rr=this._$UT(this._$Rr,2*o),this._$Or=this._$UT(this._$Or,2*o);var s=new Array;w._$jT(this._$Js,0,s,0,o),this._$Js=s}return this._$pb[this._$qo]=t,this._$_2[this._$qo]=i,this._$vr[this._$qo]=i,this._$Rr[this._$qo]=e,this._$Or[this._$qo]=r,this._$Js[this._$qo]=Y._$ZS,this._$qo++},Y.prototype._$Zo=function(t,i){this._$3S[t]=i},Y.prototype.setParamFloat=function(t,i){i<this._$Rr[t]&&(i=this._$Rr[t]),i>this._$Or[t]&&(i=this._$Or[t]),this._$_2[t]=i},Y.prototype.loadParam=function(){var t=this._$_2.length;t>this._$fs.length&&(t=this._$fs.length),w._$jT(this._$fs,0,this._$_2,0,t)},Y.prototype.saveParam=function(){var t=this._$_2.length;t>this._$fs.length&&(this._$fs=new Float32Array(t)),w._$jT(this._$_2,0,this._$fs,0,t)},Y.prototype._$v2=function(){return this._$co},Y.prototype._$WS=function(){return this._$QT},Y.prototype._$Xb=function(t){return this._$Js[t]==Y._$ZS},Y.prototype._$vs=function(){return this._$Es},Y.prototype._$Tr=function(){return this._$ZP},Y.prototype.getBaseData=function(t){return this._$3S[t]},Y.prototype.getParamFloat=function(t){return this._$_2[t]},Y.prototype.getParamMax=function(t){return this._$Or[t]},Y.prototype.getParamMin=function(t){return this._$Rr[t]},Y.prototype.setPartsOpacity=function(t,i){this._$Hr[t].setPartsOpacity(i)},Y.prototype.getPartsOpacity=function(t){return this._$Hr[t].getPartsOpacity()},Y.prototype.getPartsDataIndex=function(t){for(var i=this._$F2.length-1;i>=0;--i)if(null!=this._$F2[i]&&this._$F2[i]._$p2()==t)return i;return-1},Y.prototype._$q2=function(t){return this._$db[t]},Y.prototype._$C2=function(t){return this._$8b[t]},Y.prototype._$Bb=function(t){return this._$Hr[t]},Y.prototype._$5s=function(t,i){for(var e=this._$Ws.length,r=t,o=0;o<e;++o){var n=this._$Ws[o];if(n!=Y._$V2)for(;;){var s=this._$8b[n];s._$yo()&&(s._$GT()._$B2(this,s,r),r+=i);var _=this._$Er[n];if(_<=n||_==Y._$W0)break;n=_}}},Y.prototype.setDrawParam=function(t){this.dp_webgl=t},Y.prototype.getDrawParam=function(){return this.dp_webgl},k._$0T=function(t){return k._$0T(new _$5(t))},k._$0T=function(t){if(!t.exists())throw new _$ls(t._$3b());for(var i,e=t.length(),r=new Int8Array(e),o=new _$Xs(new _$kb(t),8192),n=0;(i=o.read(r,n,e-n))>0;)n+=i;return r},k._$C=function(t){var i=null,e=null;try{i=t instanceof Array?t:new _$Xs(t,8192),e=new _$js;for(var r,o=new Int8Array(1e3);(r=i.read(o))>0;)e.write(o,0,r);return e._$TS()}finally{null!=t&&t.close(),null!=e&&(e.flush(),e.close())}},V.prototype._$T2=function(){return w.getUserTimeMSec()+Math._$10()*(2*this._$Br-1)},V.prototype._$uo=function(t){this._$Br=t},V.prototype._$QS=function(t,i,e){this._$Dr=t,this._$Cb=i,this._$mr=e},V.prototype._$7T=function(t){var i,e=w.getUserTimeMSec(),r=0;switch(this._$_L){case STATE_CLOSING:r=(e-this._$bb)/this._$Dr,r>=1&&(r=1,this._$_L=wt.STATE_CLOSED,this._$bb=e),i=1-r;break;case STATE_CLOSED:r=(e-this._$bb)/this._$Cb,r>=1&&(this._$_L=wt.STATE_OPENING,this._$bb=e),i=0;break;case STATE_OPENING:r=(e-this._$bb)/this._$mr,r>=1&&(r=1,this._$_L=wt.STATE_INTERVAL,this._$12=this._$T2()),i=r;break;case STATE_INTERVAL:this._$12<e&&(this._$_L=wt.STATE_CLOSING,this._$bb=e),i=1;break;case STATE_FIRST:default:this._$_L=wt.STATE_INTERVAL,this._$12=this._$T2(),i=1}this._$jo||(i=-i),t.setParamFloat(this._$iL,i),t.setParamFloat(this._$0L,i)};var wt=function(){};wt.STATE_FIRST="STATE_FIRST",wt.STATE_INTERVAL="STATE_INTERVAL",wt.STATE_CLOSING="STATE_CLOSING",wt.STATE_CLOSED="STATE_CLOSED",wt.STATE_OPENING="STATE_OPENING",X.prototype=new E,X._$As=32,X._$Gr=!1,X._$NT=null,X._$vS=null,X._$no=null,X._$9r=function(t){return new Float32Array(t)},X._$vb=function(t){return new Int16Array(t)},X._$cr=function(t,i){return null==t||t._$yL()<i.length?(t=X._$9r(2*i.length),t.put(i),t._$oT(0)):(t.clear(),t.put(i),t._$oT(0)),t},X._$mb=function(t,i){return null==t||t._$yL()<i.length?(t=X._$vb(2*i.length),t.put(i),t._$oT(0)):(t.clear(),t.put(i),t._$oT(0)),t},X._$Hs=function(){return X._$Gr},X._$as=function(t){X._$Gr=t},X.prototype.setGL=function(t){this.gl=t},X.prototype.setTransform=function(t){this.transform=t},X.prototype._$ZT=function(){},X.prototype._$Uo=function(t,i,e,r,o,n,s,_){if(!(n<.01)){var a=this._$U2[t],h=n>.9?at.EXPAND_W:0;this.gl.drawElements(a,e,r,o,n,h,this.transform,_)}},X.prototype._$Rs=function(){throw new Error("_$Rs")},X.prototype._$Ds=function(t){throw new Error("_$Ds")},X.prototype._$K2=function(){for(var t=0;t<this._$sb.length;t++){0!=this._$sb[t]&&(this.gl._$Sr(1,this._$sb,t),this._$sb[t]=0)}},X.prototype.setTexture=function(t,i){this._$sb.length<t+1&&this._$nS(t),this._$sb[t]=i},X.prototype.setTexture=function(t,i){this._$sb.length<t+1&&this._$nS(t),this._$U2[t]=i},X.prototype._$nS=function(t){var i=Math.max(2*this._$sb.length,t+1+10),e=new Int32Array(i);w._$jT(this._$sb,0,e,0,this._$sb.length),this._$sb=e;var r=new Array;w._$jT(this._$U2,0,r,0,this._$U2.length),this._$U2=r},z.prototype=new I,z._$Xo=new Float32Array(2),z._$io=new Float32Array(2),z._$0o=new Float32Array(2),z._$Lo=new Float32Array(2),z._$To=new Float32Array(2),z._$Po=new Float32Array(2),z._$gT=new Array,z.prototype._$zP=function(){this._$GS=new D,this._$GS._$zP(),this._$Y0=new Array},z.prototype.getType=function(){return I._$c2},z.prototype._$F0=function(t){I.prototype._$F0.call(this,t),this._$GS=t._$nP(),this._$Y0=t._$nP(),I.prototype.readV2_opacity.call(this,t)},z.prototype.init=function(t){var i=new H(this);return i._$Yr=new P,this._$32()&&(i._$Wr=new P),i},z.prototype._$Nr=function(t,i){this!=i._$GT()&&console.log("### assert!! ### ");var e=i;if(this._$GS._$Ur(t)){var r=z._$gT;r[0]=!1;var o=this._$GS._$Q2(t,r);i._$Ib(r[0]),this.interpolateOpacity(t,this._$GS,i,r);var n=t._$vs(),s=t._$Tr();if(this._$GS._$zr(n,s,o),o<=0){var _=this._$Y0[n[0]];e._$Yr.init(_)}else if(1==o){var _=this._$Y0[n[0]],a=this._$Y0[n[1]],h=s[0];e._$Yr._$fL=_._$fL+(a._$fL-_._$fL)*h,e._$Yr._$gL=_._$gL+(a._$gL-_._$gL)*h,e._$Yr._$B0=_._$B0+(a._$B0-_._$B0)*h,e._$Yr._$z0=_._$z0+(a._$z0-_._$z0)*h,e._$Yr._$qT=_._$qT+(a._$qT-_._$qT)*h}else if(2==o){var _=this._$Y0[n[0]],a=this._$Y0[n[1]],l=this._$Y0[n[2]],$=this._$Y0[n[3]],h=s[0],u=s[1],p=_._$fL+(a._$fL-_._$fL)*h,f=l._$fL+($._$fL-l._$fL)*h;e._$Yr._$fL=p+(f-p)*u,p=_._$gL+(a._$gL-_._$gL)*h,f=l._$gL+($._$gL-l._$gL)*h,e._$Yr._$gL=p+(f-p)*u,p=_._$B0+(a._$B0-_._$B0)*h,f=l._$B0+($._$B0-l._$B0)*h,e._$Yr._$B0=p+(f-p)*u,p=_._$z0+(a._$z0-_._$z0)*h,f=l._$z0+($._$z0-l._$z0)*h,e._$Yr._$z0=p+(f-p)*u,p=_._$qT+(a._$qT-_._$qT)*h,f=l._$qT+($._$qT-l._$qT)*h,e._$Yr._$qT=p+(f-p)*u}else if(3==o){var c=this._$Y0[n[0]],d=this._$Y0[n[1]],g=this._$Y0[n[2]],y=this._$Y0[n[3]],m=this._$Y0[n[4]],T=this._$Y0[n[5]],P=this._$Y0[n[6]],S=this._$Y0[n[7]],h=s[0],u=s[1],v=s[2],p=c._$fL+(d._$fL-c._$fL)*h,f=g._$fL+(y._$fL-g._$fL)*h,L=m._$fL+(T._$fL-m._$fL)*h,M=P._$fL+(S._$fL-P._$fL)*h;e._$Yr._$fL=(1-v)*(p+(f-p)*u)+v*(L+(M-L)*u),p=c._$gL+(d._$gL-c._$gL)*h,f=g._$gL+(y._$gL-g._$gL)*h,L=m._$gL+(T._$gL-m._$gL)*h,M=P._$gL+(S._$gL-P._$gL)*h,e._$Yr._$gL=(1-v)*(p+(f-p)*u)+v*(L+(M-L)*u),p=c._$B0+(d._$B0-c._$B0)*h,f=g._$B0+(y._$B0-g._$B0)*h,L=m._$B0+(T._$B0-m._$B0)*h,M=P._$B0+(S._$B0-P._$B0)*h,e._$Yr._$B0=(1-v)*(p+(f-p)*u)+v*(L+(M-L)*u),p=c._$z0+(d._$z0-c._$z0)*h,f=g._$z0+(y._$z0-g._$z0)*h,L=m._$z0+(T._$z0-m._$z0)*h,M=P._$z0+(S._$z0-P._$z0)*h,e._$Yr._$z0=(1-v)*(p+(f-p)*u)+v*(L+(M-L)*u),p=c._$qT+(d._$qT-c._$qT)*h,f=g._$qT+(y._$qT-g._$qT)*h,L=m._$qT+(T._$qT-m._$qT)*h,M=P._$qT+(S._$qT-P._$qT)*h,e._$Yr._$qT=(1-v)*(p+(f-p)*u)+v*(L+(M-L)*u)}else if(4==o){var E=this._$Y0[n[0]],A=this._$Y0[n[1]],I=this._$Y0[n[2]],w=this._$Y0[n[3]],x=this._$Y0[n[4]],O=this._$Y0[n[5]],D=this._$Y0[n[6]],R=this._$Y0[n[7]],b=this._$Y0[n[8]],F=this._$Y0[n[9]],C=this._$Y0[n[10]],N=this._$Y0[n[11]],B=this._$Y0[n[12]],U=this._$Y0[n[13]],G=this._$Y0[n[14]],Y=this._$Y0[n[15]],h=s[0],u=s[1],v=s[2],k=s[3],p=E._$fL+(A._$fL-E._$fL)*h,f=I._$fL+(w._$fL-I._$fL)*h,L=x._$fL+(O._$fL-x._$fL)*h,M=D._$fL+(R._$fL-D._$fL)*h,V=b._$fL+(F._$fL-b._$fL)*h,X=C._$fL+(N._$fL-C._$fL)*h,H=B._$fL+(U._$fL-B._$fL)*h,W=G._$fL+(Y._$fL-G._$fL)*h;e._$Yr._$fL=(1-k)*((1-v)*(p+(f-p)*u)+v*(L+(M-L)*u))+k*((1-v)*(V+(X-V)*u)+v*(H+(W-H)*u)),p=E._$gL+(A._$gL-E._$gL)*h,f=I._$gL+(w._$gL-I._$gL)*h,L=x._$gL+(O._$gL-x._$gL)*h,M=D._$gL+(R._$gL-D._$gL)*h,V=b._$gL+(F._$gL-b._$gL)*h,X=C._$gL+(N._$gL-C._$gL)*h,H=B._$gL+(U._$gL-B._$gL)*h,W=G._$gL+(Y._$gL-G._$gL)*h,e._$Yr._$gL=(1-k)*((1-v)*(p+(f-p)*u)+v*(L+(M-L)*u))+k*((1-v)*(V+(X-V)*u)+v*(H+(W-H)*u)),p=E._$B0+(A._$B0-E._$B0)*h,f=I._$B0+(w._$B0-I._$B0)*h,L=x._$B0+(O._$B0-x._$B0)*h,M=D._$B0+(R._$B0-D._$B0)*h,V=b._$B0+(F._$B0-b._$B0)*h,X=C._$B0+(N._$B0-C._$B0)*h,H=B._$B0+(U._$B0-B._$B0)*h,W=G._$B0+(Y._$B0-G._$B0)*h,e._$Yr._$B0=(1-k)*((1-v)*(p+(f-p)*u)+v*(L+(M-L)*u))+k*((1-v)*(V+(X-V)*u)+v*(H+(W-H)*u)),p=E._$z0+(A._$z0-E._$z0)*h,f=I._$z0+(w._$z0-I._$z0)*h,L=x._$z0+(O._$z0-x._$z0)*h,M=D._$z0+(R._$z0-D._$z0)*h,V=b._$z0+(F._$z0-b._$z0)*h,X=C._$z0+(N._$z0-C._$z0)*h,H=B._$z0+(U._$z0-B._$z0)*h,W=G._$z0+(Y._$z0-G._$z0)*h,e._$Yr._$z0=(1-k)*((1-v)*(p+(f-p)*u)+v*(L+(M-L)*u))+k*((1-v)*(V+(X-V)*u)+v*(H+(W-H)*u)),p=E._$qT+(A._$qT-E._$qT)*h,f=I._$qT+(w._$qT-I._$qT)*h,L=x._$qT+(O._$qT-x._$qT)*h,M=D._$qT+(R._$qT-D._$qT)*h,V=b._$qT+(F._$qT-b._$qT)*h,X=C._$qT+(N._$qT-C._$qT)*h,H=B._$qT+(U._$qT-B._$qT)*h,W=G._$qT+(Y._$qT-G._$qT)*h,e._$Yr._$qT=(1-k)*((1-v)*(p+(f-p)*u)+v*(L+(M-L)*u))+k*((1-v)*(V+(X-V)*u)+v*(H+(W-H)*u))}else{for(var j=0|Math.pow(2,o),q=new Float32Array(j),J=0;J<j;J++){for(var Q=J,Z=1,K=0;K<o;K++)Z*=Q%2==0?1-s[K]:s[K],Q/=2;q[J]=Z}for(var tt=new Array,it=0;it<j;it++)tt[it]=this._$Y0[n[it]];for(var et=0,rt=0,ot=0,nt=0,st=0,it=0;it<j;it++)et+=q[it]*tt[it]._$fL,rt+=q[it]*tt[it]._$gL,ot+=q[it]*tt[it]._$B0,nt+=q[it]*tt[it]._$z0,st+=q[it]*tt[it]._$qT;e._$Yr._$fL=et,e._$Yr._$gL=rt,e._$Yr._$B0=ot,e._$Yr._$z0=nt,e._$Yr._$qT=st}var _=this._$Y0[n[0]];e._$Yr.reflectX=_.reflectX,e._$Yr.reflectY=_.reflectY}},z.prototype._$2b=function(t,i){this!=i._$GT()&&console.log("### assert!! ### ");var e=i;if(e._$hS(!0),this._$32()){var r=this.getTargetBaseDataID();if(e._$8r==I._$ur&&(e._$8r=t.getBaseDataIndex(r)),e._$8r<0)at._$so&&_._$li("_$L _$0P _$G :: %s",r),e._$hS(!1);else{var o=t.getBaseData(e._$8r);if(null!=o){var n=t._$q2(e._$8r),s=z._$Xo;s[0]=e._$Yr._$fL,s[1]=e._$Yr._$gL;var a=z._$io;a[0]=0,a[1]=-.1;n._$GT().getType()==I._$c2?a[1]=-10:a[1]=-.1;var h=z._$0o;this._$Jr(t,o,n,s,a,h);var l=Lt._$92(a,h);o._$nb(t,n,s,s,1,0,2),e._$Wr._$fL=s[0],e._$Wr._$gL=s[1],e._$Wr._$B0=e._$Yr._$B0,e._$Wr._$z0=e._$Yr._$z0,e._$Wr._$qT=e._$Yr._$qT-l*Lt._$NS;var $=n.getTotalScale();e.setTotalScale_notForClient($*e._$Wr._$B0);var u=n.getTotalOpacity();e.setTotalOpacity(u*e.getInterpolatedOpacity()),e._$Wr.reflectX=e._$Yr.reflectX,e._$Wr.reflectY=e._$Yr.reflectY,e._$hS(n._$yo())}else e._$hS(!1)}}else e.setTotalScale_notForClient(e._$Yr._$B0),e.setTotalOpacity(e.getInterpolatedOpacity())},z.prototype._$nb=function(t,i,e,r,o,n,s){this!=i._$GT()&&console.log("### assert!! ### ");for(var _,a,h=i,l=null!=h._$Wr?h._$Wr:h._$Yr,$=Math.sin(Lt._$bS*l._$qT),u=Math.cos(Lt._$bS*l._$qT),p=h.getTotalScale(),f=l.reflectX?-1:1,c=l.reflectY?-1:1,d=u*p*f,g=-$*p*c,y=$*p*f,m=u*p*c,T=l._$fL,P=l._$gL,S=o*s,v=n;v<S;v+=s)_=e[v],a=e[v+1],r[v]=d*_+g*a+T,r[v+1]=y*_+m*a+P},z.prototype._$Jr=function(t,i,e,r,o,n){i!=e._$GT()&&console.log("### assert!! ### ");var s=z._$Lo;z._$Lo[0]=r[0],z._$Lo[1]=r[1],i._$nb(t,e,s,s,1,0,2);for(var _=z._$To,a=z._$Po,h=1,l=0;l<10;l++){if(a[0]=r[0]+h*o[0],a[1]=r[1]+h*o[1],i._$nb(t,e,a,_,1,0,2),_[0]-=s[0],_[1]-=s[1],0!=_[0]||0!=_[1])return n[0]=_[0],void(n[1]=_[1]);if(a[0]=r[0]-h*o[0],a[1]=r[1]-h*o[1],i._$nb(t,e,a,_,1,0,2),_[0]-=s[0],_[1]-=s[1],0!=_[0]||0!=_[1])return _[0]=-_[0],_[0]=-_[0],n[0]=_[0],void(n[1]=_[1]);h*=.1}at._$so&&console.log("_$L0 to transform _$SP\n")},H.prototype=new _t,W.prototype=new M,W._$ur=-2,W._$ES=500,W._$wb=2,W._$8S=3,W._$os=4,W._$52=W._$ES,W._$R2=W._$ES,W._$Sb=function(t){for(var i=t.length-1;i>=0;--i){var e=t[i];e<W._$52?W._$52=e:e>W._$R2&&(W._$R2=e)}},W._$or=function(){return W._$52},W._$Pr=function(){return W._$R2},W.prototype._$F0=function(t){this._$gP=t._$nP(),this._$dr=t._$nP(),this._$GS=t._$nP(),this._$qb=t._$6L(),this._$Lb=t._$cS(),this._$mS=t._$Tb(),t.getFormatVersion()>=G._$T7?(this.clipID=t._$nP(),this.clipIDList=this.convertClipIDForV2_11(this.clipID)):this.clipIDList=null,W._$Sb(this._$Lb)},W.prototype.getClipIDList=function(){return this.clipIDList},W.prototype._$Nr=function(t,i){if(i._$IS[0]=!1,i._$Us=v._$Z2(t,this._$GS,i._$IS,this._$Lb),at._$Zs);else if(i._$IS[0])return;i._$7s=v._$br(t,this._$GS,i._$IS,this._$mS)},W.prototype._$2b=function(t){},W.prototype.getDrawDataID=function(){return this._$gP},W.prototype._$j2=function(t){this._$gP=t},W.prototype.getOpacity=function(t,i){return i._$7s},W.prototype._$zS=function(t,i){return i._$Us},W.prototype.getTargetBaseDataID=function(){return this._$dr},W.prototype._$gs=function(t){this._$dr=t},W.prototype._$32=function(){return null!=this._$dr&&this._$dr!=yt._$2o()},W.prototype.getType=function(){},j._$42=0,j.prototype._$1b=function(){return this._$3S},j.prototype.getDrawDataList=function(){return this._$aS},j.prototype._$F0=function(t){this._$NL=t._$nP(),this._$aS=t._$nP(),this._$3S=t._$nP()},j.prototype._$kr=function(t){t._$Zo(this._$3S),t._$xo(this._$aS),this._$3S=null,this._$aS=null},q.prototype=new i,q.loadModel=function(t){var e=new q;return i._$62(e,t),e},q.loadModel=function(t){var e=new q;return i._$62(e,t),e},q._$to=function(){return new q},q._$er=function(t){var i=new _$5("../_$_r/_$t0/_$Ri/_$_P._$d");if(0==i.exists())throw new _$ls("_$t0 _$_ _$6 _$Ui :: "+i._$PL());for(var e=["../_$_r/_$t0/_$Ri/_$_P.512/_$CP._$1","../_$_r/_$t0/_$Ri/_$_P.512/_$vP._$1","../_$_r/_$t0/_$Ri/_$_P.512/_$EP._$1","../_$_r/_$t0/_$Ri/_$_P.512/_$pP._$1"],r=q.loadModel(i._$3b()),o=0;o<e.length;o++){var n=new _$5(e[o]);if(0==n.exists())throw new _$ls("_$t0 _$_ _$6 _$Ui :: "+n._$PL());r.setTexture(o,_$nL._$_o(t,n._$3b()))}return r},q.prototype.setGL=function(t){this._$zo.setGL(t)},q.prototype.setTransform=function(t){this._$zo.setTransform(t)},q.prototype.draw=function(){this._$5S.draw(this._$zo)},q.prototype._$K2=function(){this._$zo._$K2()},q.prototype.setTexture=function(t,i){null==this._$zo&&_._$li("_$Yi for QT _$ki / _$XS() is _$6 _$ui!!"),this._$zo.setTexture(t,i)},q.prototype.setTexture=function(t,i){null==this._$zo&&_._$li("_$Yi for QT _$ki / _$XS() is _$6 _$ui!!"),this._$zo.setTexture(t,i)},q.prototype._$Rs=function(){return this._$zo._$Rs()},q.prototype._$Ds=function(t){this._$zo._$Ds(t)},q.prototype.getDrawParam=function(){return this._$zo},J.prototype=new s,J._$cs="VISIBLE:",J._$ar="LAYOUT:",J.MTN_PREFIX_FADEIN="FADEIN:",J.MTN_PREFIX_FADEOUT="FADEOUT:",J._$Co=0,J._$1T=1,J.loadMotion=function(t){var i=k._$C(t);return J.loadMotion(i)},J.loadMotion=function(t){t instanceof ArrayBuffer&&(t=new DataView(t));var i=new J,e=[0],r=t.byteLength;i._$yT=0;for(var o=0;o<r;++o){var n=Q(t,o),s=n.charCodeAt(0);if("\n"!=n&&"\r"!=n)if("#"!=n)if("$"!=n){if(97<=s&&s<=122||65<=s&&s<=90||"_"==n){for(var _=o,a=-1;o<r&&("\r"!=(n=Q(t,o))&&"\n"!=n);++o)if("="==n){a=o;break}if(a>=0){var h=new B;O.startsWith(t,_,J._$cs)?(h._$RP=B._$hs,h._$4P=O.createString(t,_,a-_)):O.startsWith(t,_,J._$ar)?(h._$4P=O.createString(t,_+7,a-_-7),O.startsWith(t,_+7,"ANCHOR_X")?h._$RP=B._$xs:O.startsWith(t,_+7,"ANCHOR_Y")?h._$RP=B._$us:O.startsWith(t,_+7,"SCALE_X")?h._$RP=B._$qs:O.startsWith(t,_+7,"SCALE_Y")?h._$RP=B._$Ys:O.startsWith(t,_+7,"X")?h._$RP=B._$ws:O.startsWith(t,_+7,"Y")&&(h._$RP=B._$Ns)):(h._$RP=B._$Fr,h._$4P=O.createString(t,_,a-_)),i.motions.push(h);var l=0,$=[];for(o=a+1;o<r&&("\r"!=(n=Q(t,o))&&"\n"!=n);++o)if(","!=n&&" "!=n&&"\t"!=n){var u=O._$LS(t,r,o,e);if(e[0]>0){$.push(u),l++;var p=e[0];if(p<o){console.log("_$n0 _$hi . @Live2DMotion loadMotion()\n");break}o=p-1}}h._$I0=new Float32Array($),l>i._$yT&&(i._$yT=l)}}}else{for(var _=o,a=-1;o<r&&("\r"!=(n=Q(t,o))&&"\n"!=n);++o)if("="==n){a=o;break}var f=!1;if(a>=0)for(a==_+4&&"f"==Q(t,_+1)&&"p"==Q(t,_+2)&&"s"==Q(t,_+3)&&(f=!0),o=a+1;o<r&&("\r"!=(n=Q(t,o))&&"\n"!=n);++o)if(","!=n&&" "!=n&&"\t"!=n){var u=O._$LS(t,r,o,e);e[0]>0&&f&&5<u&&u<121&&(i._$D0=u),o=e[0]}for(;o<r&&("\n"!=Q(t,o)&&"\r"!=Q(t,o));++o);}else for(;o<r&&("\n"!=Q(t,o)&&"\r"!=Q(t,o));++o);}return i._$rr=1e3*i._$yT/i._$D0|0,i},J.prototype.getDurationMSec=function(){return this._$E?-1:this._$rr},J.prototype.getLoopDurationMSec=function(){return this._$rr},J.prototype.dump=function(){for(var t=0;t<this.motions.length;t++){var i=this.motions[t];console.log("_$wL[%s] [%d]. ",i._$4P,i._$I0.length);for(var e=0;e<i._$I0.length&&e<10;e++)console.log("%5.2f ,",i._$I0[e]);console.log("\n")}},J.prototype.updateParamExe=function(t,i,e,r){for(var o=i-r._$z2,n=o*this._$D0/1e3,s=0|n,_=n-s,a=0;a<this.motions.length;a++){var h=this.motions[a],l=h._$I0.length,$=h._$4P;if(h._$RP==B._$hs){var u=h._$I0[s>=l?l-1:s];t.setParamFloat($,u)}else if(B._$ws<=h._$RP&&h._$RP<=B._$Ys);else{var p,f=t.getParamIndex($),c=t.getModelContext(),d=c.getParamMax(f),g=c.getParamMin(f),y=.4*(d-g),m=c.getParamFloat(f),T=h._$I0[s>=l?l-1:s],P=h._$I0[s+1>=l?l-1:s+1];p=T<P&&P-T>y||T>P&&T-P>y?T:T+(P-T)*_;var S=m+(p-m)*e;t.setParamFloat($,S)}}s>=this._$yT&&(this._$E?(r._$z2=i,this.loopFadeIn&&(r._$bs=i)):r._$9L=!0),this._$eP=e},J.prototype._$r0=function(){return this._$E},J.prototype._$aL=function(t){this._$E=t},J.prototype._$S0=function(){return this._$D0},J.prototype._$U0=function(t){this._$D0=t},J.prototype.isLoopFadeIn=function(){return this.loopFadeIn},J.prototype.setLoopFadeIn=function(t){this.loopFadeIn=t},N.prototype.clear=function(){this.size=0},N.prototype.add=function(t){if(this._$P.length<=this.size){var i=new Float32Array(2*this.size);w._$jT(this._$P,0,i,0,this.size),this._$P=i}this._$P[this.size++]=t},N.prototype._$BL=function(){var t=new Float32Array(this.size);return w._$jT(this._$P,0,t,0,this.size),t},B._$Fr=0,B._$hs=1,B._$ws=100,B._$Ns=101,B._$xs=102,B._$us=103,B._$qs=104,B._$Ys=105,Z.prototype=new I,Z._$gT=new Array,Z.prototype._$zP=function(){this._$GS=new D,this._$GS._$zP()},Z.prototype._$F0=function(t){I.prototype._$F0.call(this,t),this._$A=t._$6L(),this._$o=t._$6L(),this._$GS=t._$nP(),this._$Eo=t._$nP(),I.prototype.readV2_opacity.call(this,t)},Z.prototype.init=function(t){var i=new K(this),e=(this._$o+1)*(this._$A+1);return null!=i._$Cr&&(i._$Cr=null),i._$Cr=new Float32Array(2*e),null!=i._$hr&&(i._$hr=null),this._$32()?i._$hr=new Float32Array(2*e):i._$hr=null,i},Z.prototype._$Nr=function(t,i){var e=i;if(this._$GS._$Ur(t)){var r=this._$VT(),o=Z._$gT;o[0]=!1,v._$Vr(t,this._$GS,o,r,this._$Eo,e._$Cr,0,2),i._$Ib(o[0]),this.interpolateOpacity(t,this._$GS,i,o)}},Z.prototype._$2b=function(t,i){var e=i;if(e._$hS(!0),this._$32()){var r=this.getTargetBaseDataID();if(e._$8r==I._$ur&&(e._$8r=t.getBaseDataIndex(r)),e._$8r<0)at._$so&&_._$li("_$L _$0P _$G :: %s",r),e._$hS(!1);else{var o=t.getBaseData(e._$8r),n=t._$q2(e._$8r);if(null!=o&&n._$yo()){var s=n.getTotalScale();e.setTotalScale_notForClient(s);var a=n.getTotalOpacity();e.setTotalOpacity(a*e.getInterpolatedOpacity()),o._$nb(t,n,e._$Cr,e._$hr,this._$VT(),0,2),e._$hS(!0)}else e._$hS(!1)}}else e.setTotalOpacity(e.getInterpolatedOpacity())},Z.prototype._$nb=function(t,i,e,r,o,n,s){var _=i,a=null!=_._$hr?_._$hr:_._$Cr;Z.transformPoints_sdk2(e,r,o,n,s,a,this._$o,this._$A)},Z.transformPoints_sdk2=function(i,e,r,o,n,s,_,a){for(var h,l,$,u=r*n,p=0,f=0,c=0,d=0,g=0,y=0,m=!1,T=o;T<u;T+=n){var P,S,v,L;if(v=i[T],L=i[T+1],P=v*_,S=L*a,P<0||S<0||_<=P||a<=S){var M=_+1;if(!m){m=!0,p=.25*(s[2*(0+0*M)]+s[2*(_+0*M)]+s[2*(0+a*M)]+s[2*(_+a*M)]),f=.25*(s[2*(0+0*M)+1]+s[2*(_+0*M)+1]+s[2*(0+a*M)+1]+s[2*(_+a*M)+1]);var E=s[2*(_+a*M)]-s[2*(0+0*M)],A=s[2*(_+a*M)+1]-s[2*(0+0*M)+1],I=s[2*(_+0*M)]-s[2*(0+a*M)],w=s[2*(_+0*M)+1]-s[2*(0+a*M)+1];c=.5*(E+I),d=.5*(A+w),g=.5*(E-I),y=.5*(A-w),p-=.5*(c+g),f-=.5*(d+y)}if(-2<v&&v<3&&-2<L&&L<3)if(v<=0)if(L<=0){var x=s[2*(0+0*M)],O=s[2*(0+0*M)+1],D=p-2*c,R=f-2*d,b=p-2*g,F=f-2*y,C=p-2*c-2*g,N=f-2*d-2*y,B=.5*(v- -2),U=.5*(L- -2);B+U<=1?(e[T]=C+(b-C)*B+(D-C)*U,e[T+1]=N+(F-N)*B+(R-N)*U):(e[T]=x+(D-x)*(1-B)+(b-x)*(1-U),e[T+1]=O+(R-O)*(1-B)+(F-O)*(1-U))}else if(L>=1){var b=s[2*(0+a*M)],F=s[2*(0+a*M)+1],C=p-2*c+1*g,N=f-2*d+1*y,x=p+3*g,O=f+3*y,D=p-2*c+3*g,R=f-2*d+3*y,B=.5*(v- -2),U=.5*(L-1);B+U<=1?(e[T]=C+(b-C)*B+(D-C)*U,e[T+1]=N+(F-N)*B+(R-N)*U):(e[T]=x+(D-x)*(1-B)+(b-x)*(1-U),e[T+1]=O+(R-O)*(1-B)+(F-O)*(1-U))}else{var G=0|S;G==a&&(G=a-1);var B=.5*(v- -2),U=S-G,Y=G/a,k=(G+1)/a,b=s[2*(0+G*M)],F=s[2*(0+G*M)+1],x=s[2*(0+(G+1)*M)],O=s[2*(0+(G+1)*M)+1],C=p-2*c+Y*g,N=f-2*d+Y*y,D=p-2*c+k*g,R=f-2*d+k*y;B+U<=1?(e[T]=C+(b-C)*B+(D-C)*U,e[T+1]=N+(F-N)*B+(R-N)*U):(e[T]=x+(D-x)*(1-B)+(b-x)*(1-U),e[T+1]=O+(R-O)*(1-B)+(F-O)*(1-U))}else if(1<=v)if(L<=0){var D=s[2*(_+0*M)],R=s[2*(_+0*M)+1],x=p+3*c,O=f+3*d,C=p+1*c-2*g,N=f+1*d-2*y,b=p+3*c-2*g,F=f+3*d-2*y,B=.5*(v-1),U=.5*(L- -2);B+U<=1?(e[T]=C+(b-C)*B+(D-C)*U,e[T+1]=N+(F-N)*B+(R-N)*U):(e[T]=x+(D-x)*(1-B)+(b-x)*(1-U),e[T+1]=O+(R-O)*(1-B)+(F-O)*(1-U))}else if(L>=1){var C=s[2*(_+a*M)],N=s[2*(_+a*M)+1],b=p+3*c+1*g,F=f+3*d+1*y,D=p+1*c+3*g,R=f+1*d+3*y,x=p+3*c+3*g,O=f+3*d+3*y,B=.5*(v-1),U=.5*(L-1);B+U<=1?(e[T]=C+(b-C)*B+(D-C)*U,e[T+1]=N+(F-N)*B+(R-N)*U):(e[T]=x+(D-x)*(1-B)+(b-x)*(1-U),e[T+1]=O+(R-O)*(1-B)+(F-O)*(1-U))}else{var G=0|S;G==a&&(G=a-1);var B=.5*(v-1),U=S-G,Y=G/a,k=(G+1)/a,C=s[2*(_+G*M)],N=s[2*(_+G*M)+1],D=s[2*(_+(G+1)*M)],R=s[2*(_+(G+1)*M)+1],b=p+3*c+Y*g,F=f+3*d+Y*y,x=p+3*c+k*g,O=f+3*d+k*y;B+U<=1?(e[T]=C+(b-C)*B+(D-C)*U,e[T+1]=N+(F-N)*B+(R-N)*U):(e[T]=x+(D-x)*(1-B)+(b-x)*(1-U),e[T+1]=O+(R-O)*(1-B)+(F-O)*(1-U))}else if(L<=0){var V=0|P;V==_&&(V=_-1);var B=P-V,U=.5*(L- -2),X=V/_,z=(V+1)/_,D=s[2*(V+0*M)],R=s[2*(V+0*M)+1],x=s[2*(V+1+0*M)],O=s[2*(V+1+0*M)+1],C=p+X*c-2*g,N=f+X*d-2*y,b=p+z*c-2*g,F=f+z*d-2*y;B+U<=1?(e[T]=C+(b-C)*B+(D-C)*U,e[T+1]=N+(F-N)*B+(R-N)*U):(e[T]=x+(D-x)*(1-B)+(b-x)*(1-U),e[T+1]=O+(R-O)*(1-B)+(F-O)*(1-U))}else if(L>=1){var V=0|P;V==_&&(V=_-1);var B=P-V,U=.5*(L-1),X=V/_,z=(V+1)/_,C=s[2*(V+a*M)],N=s[2*(V+a*M)+1],b=s[2*(V+1+a*M)],F=s[2*(V+1+a*M)+1],D=p+X*c+3*g,R=f+X*d+3*y,x=p+z*c+3*g,O=f+z*d+3*y;B+U<=1?(e[T]=C+(b-C)*B+(D-C)*U,e[T+1]=N+(F-N)*B+(R-N)*U):(e[T]=x+(D-x)*(1-B)+(b-x)*(1-U),e[T+1]=O+(R-O)*(1-B)+(F-O)*(1-U))}else t.err.printf("_$li calc : %.4f , %.4f\t\t\t\t\t@@BDBoxGrid\n",v,L);else e[T]=p+v*c+L*g,e[T+1]=f+v*d+L*y}else l=P-(0|P),$=S-(0|S),h=2*((0|P)+(0|S)*(_+1)),l+$<1?(e[T]=s[h]*(1-l-$)+s[h+2]*l+s[h+2*(_+1)]*$,e[T+1]=s[h+1]*(1-l-$)+s[h+3]*l+s[h+2*(_+1)+1]*$):(e[T]=s[h+2*(_+1)+2]*(l-1+$)+s[h+2*(_+1)]*(1-l)+s[h+2]*(1-$),e[T+1]=s[h+2*(_+1)+3]*(l-1+$)+s[h+2*(_+1)+1]*(1-l)+s[h+3]*(1-$))}},Z.prototype.transformPoints_sdk1=function(t,i,e,r,o,n,s){for(var _,a,h,l,$,u,p,f=i,c=this._$o,d=this._$A,g=o*s,y=null!=f._$hr?f._$hr:f._$Cr,m=n;m<g;m+=s)at._$ts?(_=e[m],a=e[m+1],_<0?_=0:_>1&&(_=1),a<0?a=0:a>1&&(a=1),_*=c,a*=d,h=0|_,l=0|a,h>c-1&&(h=c-1),l>d-1&&(l=d-1),u=_-h,p=a-l,$=2*(h+l*(c+1))):(_=e[m]*c,a=e[m+1]*d,u=_-(0|_),p=a-(0|a),$=2*((0|_)+(0|a)*(c+1))),u+p<1?(r[m]=y[$]*(1-u-p)+y[$+2]*u+y[$+2*(c+1)]*p,r[m+1]=y[$+1]*(1-u-p)+y[$+3]*u+y[$+2*(c+1)+1]*p):(r[m]=y[$+2*(c+1)+2]*(u-1+p)+y[$+2*(c+1)]*(1-u)+y[$+2]*(1-p),r[m+1]=y[$+2*(c+1)+3]*(u-1+p)+y[$+2*(c+1)+1]*(1-u)+y[$+3]*(1-p))},Z.prototype._$VT=function(){return(this._$o+1)*(this._$A+1)},Z.prototype.getType=function(){return I._$_b},K.prototype=new _t,tt._$42=0,tt.prototype._$zP=function(){this._$3S=new Array,this._$aS=new Array},tt.prototype._$F0=function(t){this._$g0=t._$8L(),this.visible=t._$8L(),this._$NL=t._$nP(),this._$3S=t._$nP(),this._$aS=t._$nP()},tt.prototype.init=function(t){var i=new it(this);return i.setPartsOpacity(this.isVisible()?1:0),i},tt.prototype._$6o=function(t){if(null==this._$3S)throw new Error("_$3S _$6 _$Wo@_$6o");this._$3S.push(t)},tt.prototype._$3o=function(t){if(null==this._$aS)throw new Error("_$aS _$6 _$Wo@_$3o");this._$aS.push(t)},tt.prototype._$Zo=function(t){this._$3S=t},tt.prototype._$xo=function(t){this._$aS=t},tt.prototype.isVisible=function(){return this.visible},tt.prototype._$uL=function(){return this._$g0},tt.prototype._$KP=function(t){this.visible=t},tt.prototype._$ET=function(t){this._$g0=t},tt.prototype.getBaseData=function(){return this._$3S},tt.prototype.getDrawData=function(){return this._$aS},tt.prototype._$p2=function(){return this._$NL},tt.prototype._$ob=function(t){this._$NL=t},tt.prototype.getPartsID=function(){return this._$NL},tt.prototype._$MP=function(t){this._$NL=t},it.prototype=new $,it.prototype.getPartsOpacity=function(){return this._$VS},it.prototype.setPartsOpacity=function(t){this._$VS=t},et._$L7=function(){u._$27(),yt._$27(),b._$27(),l._$27()},et.prototype.toString=function(){return this.id},rt.prototype._$F0=function(t){},ot.prototype._$1s=function(){return this._$4S},ot.prototype._$zP=function(){this._$4S=new Array},ot.prototype._$F0=function(t){this._$4S=t._$nP()},ot.prototype._$Ks=function(t){this._$4S.push(t)},nt.tr=new gt,nt._$50=new gt,nt._$Ti=new Array(0,0),nt._$Pi=new Array(0,0),nt._$B=new Array(0,0),nt.prototype._$lP=function(t,i,e,r){this.viewport=new Array(t,i,e,r)},nt.prototype._$bL=function(){this.context.save();var t=this.viewport;null!=t&&(this.context.beginPath(),this.context._$Li(t[0],t[1],t[2],t[3]),this.context.clip())},nt.prototype._$ei=function(){this.context.restore()},nt.prototype.drawElements=function(t,i,e,r,o,n,s,a){try{o!=this._$Qo&&(this._$Qo=o,this.context.globalAlpha=o);for(var h=i.length,l=t.width,$=t.height,u=this.context,p=this._$xP,f=this._$uP,c=this._$6r,d=this._$3r,g=nt.tr,y=nt._$Ti,m=nt._$Pi,T=nt._$B,P=0;P<h;P+=3){u.save();var S=i[P],v=i[P+1],L=i[P+2],M=p+c*e[2*S],E=f+d*e[2*S+1],A=p+c*e[2*v],I=f+d*e[2*v+1],w=p+c*e[2*L],x=f+d*e[2*L+1];s&&(s._$PS(M,E,T),M=T[0],E=T[1],s._$PS(A,I,T),A=T[0],I=T[1],s._$PS(w,x,T),w=T[0],x=T[1]);var O=l*r[2*S],D=$-$*r[2*S+1],R=l*r[2*v],b=$-$*r[2*v+1],F=l*r[2*L],C=$-$*r[2*L+1],N=Math.atan2(b-D,R-O),B=Math.atan2(I-E,A-M),U=A-M,G=I-E,Y=Math.sqrt(U*U+G*G),k=R-O,V=b-D,X=Math.sqrt(k*k+V*V),z=Y/X;It._$ni(F,C,O,D,R-O,b-D,-(b-D),R-O,y),It._$ni(w,x,M,E,A-M,I-E,-(I-E),A-M,m);var H=(m[0]-y[0])/y[1],W=Math.min(O,R,F),j=Math.max(O,R,F),q=Math.min(D,b,C),J=Math.max(D,b,C),Q=Math.floor(W),Z=Math.floor(q),K=Math.ceil(j),tt=Math.ceil(J);g.identity(),g.translate(M,E),g.rotate(B),g.scale(1,m[1]/y[1]),g.shear(H,0),g.scale(z,z),g.rotate(-N),g.translate(-O,-D),g.setContext(u);if(n||(n=1.2),at.IGNORE_EXPAND&&(n=0),at.USE_CACHED_POLYGON_IMAGE){var it=a._$e0;if(it.gl_cacheImage=it.gl_cacheImage||{},!it.gl_cacheImage[P]){var et=nt.createCanvas(K-Q,tt-Z);at.DEBUG_DATA.LDGL_CANVAS_MB=at.DEBUG_DATA.LDGL_CANVAS_MB||0,at.DEBUG_DATA.LDGL_CANVAS_MB+=(K-Q)*(tt-Z)*4;var rt=et.getContext("2d");rt.translate(-Q,-Z),nt.clip(rt,g,n,Y,O,D,R,b,F,C,M,E,A,I,w,x),rt.drawImage(t,0,0),it.gl_cacheImage[P]={cacheCanvas:et,cacheContext:rt}}u.drawImage(it.gl_cacheImage[P].cacheCanvas,Q,Z)}else at.IGNORE_CLIP||nt.clip(u,g,n,Y,O,D,R,b,F,C,M,E,A,I,w,x),at.USE_ADJUST_TRANSLATION&&(W=0,j=l,q=0,J=$),u.drawImage(t,W,q,j-W,J-q,W,q,j-W,J-q);u.restore()}}catch(t){_._$Rb(t)}},nt.clip=function(t,i,e,r,o,n,s,_,a,h,l,$,u,p,f,c){e>.02?nt.expandClip(t,i,e,r,l,$,u,p,f,c):nt.clipWithTransform(t,null,o,n,s,_,a,h)},nt.expandClip=function(t,i,e,r,o,n,s,_,a,h){var l=s-o,$=_-n,u=a-o,p=h-n,f=l*p-$*u>0?e:-e,c=-$,d=l,g=a-s,y=h-_,m=-y,T=g,P=Math.sqrt(g*g+y*y),S=-p,v=u,L=Math.sqrt(u*u+p*p),M=o-f*c/r,E=n-f*d/r,A=s-f*c/r,I=_-f*d/r,w=s-f*m/P,x=_-f*T/P,O=a-f*m/P,D=h-f*T/P,R=o+f*S/L,b=n+f*v/L,F=a+f*S/L,C=h+f*v/L,N=nt._$50;return null!=i._$P2(N)&&(nt.clipWithTransform(t,N,M,E,A,I,w,x,O,D,F,C,R,b),!0)},nt.clipWithTransform=function(t,i,e,r,o,n,s,a){if(arguments.length<7)return void _._$li("err : @LDGL.clip()");if(!(arguments[1]instanceof gt))return void _._$li("err : a[0] is _$6 LDTransform @LDGL.clip()");var h=nt._$B,l=i,$=arguments;if(t.beginPath(),l){l._$PS($[2],$[3],h),t.moveTo(h[0],h[1]);for(var u=4;u<$.length;u+=2)l._$PS($[u],$[u+1],h),t.lineTo(h[0],h[1])}else{t.moveTo($[2],$[3]);for(var u=4;u<$.length;u+=2)t.lineTo($[u],$[u+1])}t.clip()},nt.createCanvas=function(t,i){var e=document.createElement("canvas");return e.setAttribute("width",t),e.setAttribute("height",i),e||_._$li("err : "+e),e},nt.dumpValues=function(){for(var t="",i=0;i<arguments.length;i++)t+="["+i+"]= "+arguments[i].toFixed(3)+" , ";console.log(t)},st.prototype._$F0=function(t){this._$TT=t._$_T(),this._$LT=t._$_T(),this._$FS=t._$_T(),this._$wL=t._$nP()},st.prototype.getMinValue=function(){return this._$TT},st.prototype.getMaxValue=function(){return this._$LT},st.prototype.getDefaultValue=function(){return this._$FS},st.prototype.getParamID=function(){return this._$wL},_t.prototype._$yo=function(){return this._$AT&&!this._$JS},_t.prototype._$hS=function(t){this._$AT=t},_t.prototype._$GT=function(){return this._$e0},_t.prototype._$l2=function(t){this._$IP=t},_t.prototype.getPartsIndex=function(){return this._$IP},_t.prototype._$x2=function(){return this._$JS},_t.prototype._$Ib=function(t){this._$JS=t},_t.prototype.getTotalScale=function(){return this.totalScale},_t.prototype.setTotalScale_notForClient=function(t){this.totalScale=t},_t.prototype.getInterpolatedOpacity=function(){return this._$7s},_t.prototype.setInterpolatedOpacity=function(t){this._$7s=t},_t.prototype.getTotalOpacity=function(t){return this.totalOpacity},_t.prototype.setTotalOpacity=function(t){this.totalOpacity=t},at._$2s="2.1.00_1",at._$Kr=201001e3,at._$sP=!0,at._$so=!0,at._$cb=!1,at._$3T=!0,at._$Ts=!0,at._$fb=!0,at._$ts=!0,at.L2D_DEFORMER_EXTEND=!0,at._$Wb=!1;at._$yr=!1,at._$Zs=!1,at.L2D_NO_ERROR=0,at._$i7=1e3,at._$9s=1001,at._$es=1100,at._$r7=2e3,at._$07=2001,at._$b7=2002,at._$H7=4e3,at.L2D_COLOR_BLEND_MODE_MULT=0,at.L2D_COLOR_BLEND_MODE_ADD=1,at.L2D_COLOR_BLEND_MODE_INTERPOLATE=2,at._$6b=!0,at._$cT=0,at.clippingMaskBufferSize=256,at.glContext=new Array,at.frameBuffers=new Array,at.fTexture=new Array,at.IGNORE_CLIP=!1,at.IGNORE_EXPAND=!1,at.EXPAND_W=2,at.USE_ADJUST_TRANSLATION=!0,at.USE_CANVAS_TRANSFORM=!0,at.USE_CACHED_POLYGON_IMAGE=!1,at.DEBUG_DATA={},at.PROFILE_IOS_SPEED={PROFILE_NAME:"iOS Speed",USE_ADJUST_TRANSLATION:!0,USE_CACHED_POLYGON_IMAGE:!0,EXPAND_W:4},at.PROFILE_IOS_QUALITY={PROFILE_NAME:"iOS HiQ",USE_ADJUST_TRANSLATION:!0,USE_CACHED_POLYGON_IMAGE:!1,EXPAND_W:2},at.PROFILE_IOS_DEFAULT=at.PROFILE_IOS_QUALITY,at.PROFILE_ANDROID={PROFILE_NAME:"Android",USE_ADJUST_TRANSLATION:!1,USE_CACHED_POLYGON_IMAGE:!1,EXPAND_W:2},at.PROFILE_DESKTOP={PROFILE_NAME:"Desktop",USE_ADJUST_TRANSLATION:!1,USE_CACHED_POLYGON_IMAGE:!1,EXPAND_W:2},at.initProfile=function(){Et.isIOS()?at.setupProfile(at.PROFILE_IOS_DEFAULT):Et.isAndroid()?at.setupProfile(at.PROFILE_ANDROID):at.setupProfile(at.PROFILE_DESKTOP)},at.setupProfile=function(t,i){if("number"==typeof t)switch(t){case 9901:t=at.PROFILE_IOS_SPEED;break;case 9902:t=at.PROFILE_IOS_QUALITY;break;case 9903:t=at.PROFILE_IOS_DEFAULT;break;case 9904:t=at.PROFILE_ANDROID;break;case 9905:t=at.PROFILE_DESKTOP;break;default:alert("profile _$6 _$Ui : "+t)}arguments.length<2&&(i=!0),i&&console.log("profile : "+t.PROFILE_NAME);for(var e in t)at[e]=t[e],i&&console.log("  ["+e+"] = "+t[e])},at.init=function(){if(at._$6b){console.log("Live2D %s",at._$2s),at._$6b=!1;!0,at.initProfile()}},at.getVersionStr=function(){return at._$2s},at.getVersionNo=function(){return at._$Kr},at._$sT=function(t){at._$cT=t},at.getError=function(){var t=at._$cT;return at._$cT=0,t},at.dispose=function(){at.glContext=[],at.frameBuffers=[],at.fTexture=[]},at.setGL=function(t,i){var e=i||0;at.glContext[e]=t},at.getGL=function(t){return at.glContext[t]},at.setClippingMaskBufferSize=function(t){at.clippingMaskBufferSize=t},at.getClippingMaskBufferSize=function(){return at.clippingMaskBufferSize},at.deleteBuffer=function(t){at.getGL(t).deleteFramebuffer(at.frameBuffers[t].framebuffer),delete at.frameBuffers[t],delete at.glContext[t]},ht._$r2=function(t){return t<0?0:t>1?1:.5-.5*Math.cos(t*Lt.PI_F)},lt._$fr=-1,lt.prototype.toString=function(){return this._$ib},$t.prototype=new W,$t._$42=0,$t._$Os=30,$t._$ms=0,$t._$ns=1,$t._$_s=2,$t._$gT=new Array,$t.prototype._$_S=function(t){this._$LP=t},$t.prototype.getTextureNo=function(){return this._$LP},$t.prototype._$ZL=function(){return this._$Qi},$t.prototype._$H2=function(){return this._$JP},$t.prototype.getNumPoints=function(){return this._$d0},$t.prototype.getType=function(){return W._$wb},$t.prototype._$B2=function(t,i,e){var r=i,o=null!=r._$hr?r._$hr:r._$Cr;switch(U._$do){default:case U._$Ms:throw new Error("_$L _$ro ");case U._$Qs:for(var n=this._$d0-1;n>=0;--n)o[n*U._$No+4]=e}},$t.prototype._$zP=function(){this._$GS=new D,this._$GS._$zP()},$t.prototype._$F0=function(t){W.prototype._$F0.call(this,t),this._$LP=t._$6L(),this._$d0=t._$6L(),this._$Yo=t._$6L();var i=t._$nP();this._$BP=new Int16Array(3*this._$Yo);for(var e=3*this._$Yo-1;e>=0;--e)this._$BP[e]=i[e];if(this._$Eo=t._$nP(),this._$Qi=t._$nP(),t.getFormatVersion()>=G._$s7){if(this._$JP=t._$6L(),0!=this._$JP){if(0!=(1&this._$JP)){var r=t._$6L();null==this._$5P&&(this._$5P=new Object),this._$5P._$Hb=parseInt(r)}0!=(this._$JP&$t._$Os)?this._$6s=(this._$JP&$t._$Os)>>1:this._$6s=$t._$ms,0!=(32&this._$JP)&&(this.culling=!1)}}else this._$JP=0},$t.prototype.init=function(t){var i=new ut(this),e=this._$d0*U._$No,r=this._$32();switch(null!=i._$Cr&&(i._$Cr=null),i._$Cr=new Float32Array(e),null!=i._$hr&&(i._$hr=null),i._$hr=r?new Float32Array(e):null,U._$do){default:case U._$Ms:if(U._$Ls)for(var o=this._$d0-1;o>=0;--o){var n=o<<1;this._$Qi[n+1]=1-this._$Qi[n+1]}break;case U._$Qs:for(var o=this._$d0-1;o>=0;--o){var n=o<<1,s=o*U._$No,_=this._$Qi[n],a=this._$Qi[n+1];i._$Cr[s]=_,i._$Cr[s+1]=a,i._$Cr[s+4]=0,r&&(i._$hr[s]=_,i._$hr[s+1]=a,i._$hr[s+4]=0)}}return i},$t.prototype._$Nr=function(t,i){var e=i;if(this!=e._$GT()&&console.log("### assert!! ### "),this._$GS._$Ur(t)&&(W.prototype._$Nr.call(this,t,e),!e._$IS[0])){var r=$t._$gT;r[0]=!1,v._$Vr(t,this._$GS,r,this._$d0,this._$Eo,e._$Cr,U._$i2,U._$No)}},$t.prototype._$2b=function(t,i){try{this!=i._$GT()&&console.log("### assert!! ### ");var e=!1;i._$IS[0]&&(e=!0);var r=i;if(!e&&(W.prototype._$2b.call(this,t),this._$32())){var o=this.getTargetBaseDataID();if(r._$8r==W._$ur&&(r._$8r=t.getBaseDataIndex(o)),r._$8r<0)at._$so&&_._$li("_$L _$0P _$G :: %s",o);else{var n=t.getBaseData(r._$8r),s=t._$q2(r._$8r);null==n||s._$x2()?r._$AT=!1:(n._$nb(t,s,r._$Cr,r._$hr,this._$d0,U._$i2,U._$No),r._$AT=!0),r.baseOpacity=s.getTotalOpacity()}}}catch(t){throw t}},$t.prototype.draw=function(t,i,e){if(this!=e._$GT()&&console.log("### assert!! ### "),!e._$IS[0]){var r=e,o=this._$LP;o<0&&(o=1);var n=this.getOpacity(i,r)*e._$VS*e.baseOpacity,s=null!=r._$hr?r._$hr:r._$Cr;t.setClipBufPre_clipContextForDraw(e.clipBufPre_clipContext),t._$WP(this.culling),t._$Uo(o,3*this._$Yo,this._$BP,s,this._$Qi,n,this._$6s,r)}},$t.prototype.dump=function(){console.log("  _$yi( %d ) , _$d0( %d ) , _$Yo( %d ) \n",this._$LP,this._$d0,this._$Yo),console.log("  _$Oi _$di = { ");for(var t=0;t<this._$BP.length;t++)console.log("%5d ,",this._$BP[t]);console.log("\n  _$5i _$30");for(var t=0;t<this._$Eo.length;t++){console.log("\n    _$30[%d] = ",t);for(var i=this._$Eo[t],e=0;e<i.length;e++)console.log("%6.2f, ",i[e])}console.log("\n")},$t.prototype._$72=function(t){return null==this._$5P?null:this._$5P[t]},$t.prototype.getIndexArray=function(){return this._$BP},ut.prototype=new Mt,ut.prototype.getTransformedPoints=function(){return null!=this._$hr?this._$hr:this._$Cr},pt.prototype._$HT=function(t){this.x=t.x,this.y=t.y},pt.prototype._$HT=function(t,i){this.x=t,this.y=i},ft.prototype=new i,ft.loadModel=function(t){var e=new ft;return i._$62(e,t),e},ft.loadModel=function(t,e){var r=e||0,o=new ft(r);return i._$62(o,t),o},ft._$to=function(){return new ft},ft._$er=function(t){var i=new _$5("../_$_r/_$t0/_$Ri/_$_P._$d");if(0==i.exists())throw new _$ls("_$t0 _$_ _$6 _$Ui :: "+i._$PL());for(var e=["../_$_r/_$t0/_$Ri/_$_P.512/_$CP._$1","../_$_r/_$t0/_$Ri/_$_P.512/_$vP._$1","../_$_r/_$t0/_$Ri/_$_P.512/_$EP._$1","../_$_r/_$t0/_$Ri/_$_P.512/_$pP._$1"],r=ft.loadModel(i._$3b()),o=0;o<e.length;o++){var n=new _$5(e[o]);if(0==n.exists())throw new _$ls("_$t0 _$_ _$6 _$Ui :: "+n._$PL());r.setTexture(o,_$nL._$_o(t,n._$3b()))}return r},ft.prototype.setGL=function(t){at.setGL(t)},ft.prototype.setTransform=function(t){this.drawParamWebGL.setTransform(t)},ft.prototype.update=function(){this._$5S.update(),this._$5S.preDraw(this.drawParamWebGL)},ft.prototype.draw=function(){this._$5S.draw(this.drawParamWebGL)},ft.prototype._$K2=function(){this.drawParamWebGL._$K2()},ft.prototype.setTexture=function(t,i){null==this.drawParamWebGL&&_._$li("_$Yi for QT _$ki / _$XS() is _$6 _$ui!!"),this.drawParamWebGL.setTexture(t,i)},ft.prototype.setTexture=function(t,i){null==this.drawParamWebGL&&_._$li("_$Yi for QT _$ki / _$XS() is _$6 _$ui!!"),this.drawParamWebGL.setTexture(t,i)},ft.prototype._$Rs=function(){return this.drawParamWebGL._$Rs()},ft.prototype._$Ds=function(t){this.drawParamWebGL._$Ds(t)},ft.prototype.getDrawParam=function(){return this.drawParamWebGL},ft.prototype.setMatrix=function(t){this.drawParamWebGL.setMatrix(t)},ft.prototype.setPremultipliedAlpha=function(t){this.drawParamWebGL.setPremultipliedAlpha(t)},ft.prototype.isPremultipliedAlpha=function(){return this.drawParamWebGL.isPremultipliedAlpha()},ft.prototype.setAnisotropy=function(t){this.drawParamWebGL.setAnisotropy(t)},ft.prototype.getAnisotropy=function(){return this.drawParamWebGL.getAnisotropy()},ct.prototype._$tb=function(){return this.motions},ct.prototype.startMotion=function(t,i){for(var e=null,r=this.motions.length,o=0;o<r;++o)null!=(e=this.motions[o])&&(e._$qS(e._$w0.getFadeOut()),this._$eb&&_._$Ji("MotionQueueManager[size:%2d]->startMotion() / start _$K _$3 (m%d)\n",r,e._$sr));if(null==t)return-1;e=new dt,e._$w0=t,this.motions.push(e);var n=e._$sr;return this._$eb&&_._$Ji("MotionQueueManager[size:%2d]->startMotion() / new _$w0 (m%d)\n",r,n),n},ct.prototype.updateParam=function(t){try{for(var i=!1,e=0;e<this.motions.length;e++){var r=this.motions[e];if(null!=r){var o=r._$w0;null!=o?(o.updateParam(t,r),i=!0,r.isFinished()&&(this._$eb&&_._$Ji("MotionQueueManager[size:%2d]->updateParam() / _$T0 _$w0 (m%d)\n",this.motions.length-1,r._$sr),this.motions.splice(e,1),e--)):(this.motions=this.motions.splice(e,1),e--)}else this.motions.splice(e,1),e--}return i}catch(t){return _._$li(t),!0}},ct.prototype.isFinished=function(t){if(arguments.length>=1){for(var i=0;i<this.motions.length;i++){var e=this.motions[i];if(null!=e&&(e._$sr==t&&!e.isFinished()))return!1}return!0}for(var i=0;i<this.motions.length;i++){var e=this.motions[i];if(null!=e){if(null!=e._$w0){if(!e.isFinished())return!1}else this.motions.splice(i,1),i--}else this.motions.splice(i,1),i--}return!0},ct.prototype.stopAllMotions=function(){for(var t=0;t<this.motions.length;t++){var i=this.motions[t];if(null!=i){i._$w0;this.motions.splice(t,1),t--}else this.motions.splice(t,1),t--}},ct.prototype._$Zr=function(t){this._$eb=t},ct.prototype._$e=function(){console.log("-- _$R --\n");for(var t=0;t<this.motions.length;t++){var i=this.motions[t],e=i._$w0;console.log("MotionQueueEnt[%d] :: %s\n",this.motions.length,e.toString())}},dt._$Gs=0,dt.prototype.isFinished=function(){return this._$9L},dt.prototype._$qS=function(t){var i=w.getUserTimeMSec(),e=i+t;(this._$Do<0||e<this._$Do)&&(this._$Do=e)},dt.prototype._$Bs=function(){return this._$sr},gt.prototype.setContext=function(t){var i=this.m;t.transform(i[0],i[1],i[3],i[4],i[6],i[7])},gt.prototype.toString=function(){for(var t="LDTransform { ",i=0;i<9;i++)t+=this.m[i].toFixed(2)+" ,";return t+=" }"},gt.prototype.identity=function(){var t=this.m;t[0]=t[4]=t[8]=1,t[1]=t[2]=t[3]=t[5]=t[6]=t[7]=0},gt.prototype._$PS=function(t,i,e){null==e&&(e=new Array(0,0));var r=this.m;return e[0]=r[0]*t+r[3]*i+r[6],e[1]=r[1]*t+r[4]*i+r[7],e},gt.prototype._$P2=function(t){t||(t=new gt);var i=this.m,e=i[0],r=i[1],o=i[2],n=i[3],s=i[4],_=i[5],a=i[6],h=i[7],l=i[8],$=e*s*l+r*_*a+o*n*h-e*_*h-o*s*a-r*n*l;if(0==$)return null;var u=1/$;return t.m[0]=u*(s*l-h*_),t.m[1]=u*(h*o-r*l),t.m[2]=u*(r*_-s*o),t.m[3]=u*(a*_-n*l),t.m[4]=u*(e*l-a*o),t.m[5]=u*(n*o-e*_),t.m[6]=u*(n*h-a*s),t.m[7]=u*(a*r-e*h),t.m[8]=u*(e*s-n*r),t},gt.prototype.transform=function(t,i,e){null==e&&(e=new Array(0,0));var r=this.m;return e[0]=r[0]*t+r[3]*i+r[6],e[1]=r[1]*t+r[4]*i+r[7],e},gt.prototype.translate=function(t,i){var e=this.m;e[6]=e[0]*t+e[3]*i+e[6],e[7]=e[1]*t+e[4]*i+e[7],e[8]=e[2]*t+e[5]*i+e[8]},gt.prototype.scale=function(t,i){var e=this.m;e[0]*=t,e[1]*=t,e[2]*=t,e[3]*=i,e[4]*=i,e[5]*=i},gt.prototype.shear=function(t,i){var e=this.m,r=e[0]+e[3]*i,o=e[1]+e[4]*i,n=e[2]+e[5]*i;e[3]=e[0]*t+e[3],e[4]=e[1]*t+e[4],e[5]=e[2]*t+e[5],e[0]=r,e[1]=o,e[2]=n},gt.prototype.rotate=function(t){var i=this.m,e=Math.cos(t),r=Math.sin(t),o=i[0]*e+i[3]*r,n=i[1]*e+i[4]*r,s=i[2]*e+i[5]*r;i[3]=-i[0]*r+i[3]*e,i[4]=-i[1]*r+i[4]*e,i[5]=-i[2]*r+i[5]*e,i[0]=o,i[1]=n,i[2]=s},gt.prototype.concatenate=function(t){var i=this.m,e=t.m,r=i[0]*e[0]+i[3]*e[1]+i[6]*e[2],o=i[1]*e[0]+i[4]*e[1]+i[7]*e[2],n=i[2]*e[0]+i[5]*e[1]+i[8]*e[2],s=i[0]*e[3]+i[3]*e[4]+i[6]*e[5],_=i[1]*e[3]+i[4]*e[4]+i[7]*e[5],a=i[2]*e[3]+i[5]*e[4]+i[8]*e[5],h=i[0]*e[6]+i[3]*e[7]+i[6]*e[8],l=i[1]*e[6]+i[4]*e[7]+i[7]*e[8],$=i[2]*e[6]+i[5]*e[7]+i[8]*e[8];m[0]=r,m[1]=o,m[2]=n,m[3]=s,m[4]=_,m[5]=a,m[6]=h,m[7]=l,m[8]=$},yt.prototype=new et,yt._$eT=null,yt._$tP=new Object,yt._$2o=function(){return null==yt._$eT&&(yt._$eT=yt.getID("DST_BASE")),yt._$eT},yt._$27=function(){yt._$tP.clear(),yt._$eT=null},yt.getID=function(t){var i=yt._$tP[t];return null==i&&(i=new yt(t),yt._$tP[t]=i),i},yt.prototype._$3s=function(){return new yt},mt.prototype=new E,mt._$9r=function(t){return new Float32Array(t)},mt._$vb=function(t){return new Int16Array(t)},mt._$cr=function(t,i){return null==t||t._$yL()<i.length?(t=mt._$9r(2*i.length),t.put(i),t._$oT(0)):(t.clear(),t.put(i),t._$oT(0)),t},mt._$mb=function(t,i){return null==t||t._$yL()<i.length?(t=mt._$vb(2*i.length),t.put(i),t._$oT(0)):(t.clear(),t.put(i),t._$oT(0)),t},mt._$Hs=function(){return this._$Gr},mt._$as=function(t){this._$Gr=t},mt.prototype.getGL=function(){return this.gl},mt.prototype.setGL=function(t){this.gl=t},mt.prototype.setTransform=function(t){this.transform=t},mt.prototype._$ZT=function(){var t=this.gl;this.firstDraw&&(this.initShader(),this.firstDraw=!1,this.anisotropyExt=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic"),this.anisotropyExt&&(this.maxAnisotropy=t.getParameter(this.anisotropyExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT))),t.disable(t.SCISSOR_TEST),t.disable(t.STENCIL_TEST),t.disable(t.DEPTH_TEST),t.frontFace(t.CW),t.enable(t.BLEND),t.colorMask(1,1,1,1),t.bindBuffer(t.ARRAY_BUFFER,null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null)},mt.prototype._$Uo=function(t,i,e,r,o,n,s,_){if(!(n<.01&&null==this.clipBufPre_clipContextMask)){var a=(n>.9&&at.EXPAND_W,this.gl);if(null==this.gl)throw new Error("gl is null");var h=1*this._$C0*n,l=1*this._$tT*n,$=1*this._$WL*n,u=this._$lT*n;if(null!=this.clipBufPre_clipContextMask){a.frontFace(a.CCW),a.useProgram(this.shaderProgram),this._$vS=Tt(a,this._$vS,r),this._$no=Pt(a,this._$no,e),a.enableVertexAttribArray(this.a_position_Loc),a.vertexAttribPointer(this.a_position_Loc,2,a.FLOAT,!1,0,0),this._$NT=Tt(a,this._$NT,o),a.activeTexture(a.TEXTURE1),a.bindTexture(a.TEXTURE_2D,this.textures[t]),a.uniform1i(this.s_texture0_Loc,1),a.enableVertexAttribArray(this.a_texCoord_Loc),a.vertexAttribPointer(this.a_texCoord_Loc,2,a.FLOAT,!1,0,0),a.uniformMatrix4fv(this.u_matrix_Loc,!1,this.getClipBufPre_clipContextMask().matrixForMask);var p=this.getClipBufPre_clipContextMask().layoutChannelNo,f=this.getChannelFlagAsColor(p);a.uniform4f(this.u_channelFlag,f.r,f.g,f.b,f.a);var c=this.getClipBufPre_clipContextMask().layoutBounds;a.uniform4f(this.u_baseColor_Loc,2*c.x-1,2*c.y-1,2*c._$EL()-1,2*c._$5T()-1),a.uniform1i(this.u_maskFlag_Loc,!0)}else if(null!=this.getClipBufPre_clipContextDraw()){a.useProgram(this.shaderProgramOff),this._$vS=Tt(a,this._$vS,r),this._$no=Pt(a,this._$no,e),a.enableVertexAttribArray(this.a_position_Loc_Off),a.vertexAttribPointer(this.a_position_Loc_Off,2,a.FLOAT,!1,0,0),this._$NT=Tt(a,this._$NT,o),a.activeTexture(a.TEXTURE1),a.bindTexture(a.TEXTURE_2D,this.textures[t]),a.uniform1i(this.s_texture0_Loc_Off,1),a.enableVertexAttribArray(this.a_texCoord_Loc_Off),a.vertexAttribPointer(this.a_texCoord_Loc_Off,2,a.FLOAT,!1,0,0),a.uniformMatrix4fv(this.u_clipMatrix_Loc_Off,!1,this.getClipBufPre_clipContextDraw().matrixForDraw),a.uniformMatrix4fv(this.u_matrix_Loc_Off,!1,this.matrix4x4),a.activeTexture(a.TEXTURE2),a.bindTexture(a.TEXTURE_2D,at.fTexture[this.glno]),a.uniform1i(this.s_texture1_Loc_Off,2);var p=this.getClipBufPre_clipContextDraw().layoutChannelNo,f=this.getChannelFlagAsColor(p);a.uniform4f(this.u_channelFlag_Loc_Off,f.r,f.g,f.b,f.a),a.uniform4f(this.u_baseColor_Loc_Off,h,l,$,u)}else a.useProgram(this.shaderProgram),this._$vS=Tt(a,this._$vS,r),this._$no=Pt(a,this._$no,e),a.enableVertexAttribArray(this.a_position_Loc),a.vertexAttribPointer(this.a_position_Loc,2,a.FLOAT,!1,0,0),this._$NT=Tt(a,this._$NT,o),a.activeTexture(a.TEXTURE1),a.bindTexture(a.TEXTURE_2D,this.textures[t]),a.uniform1i(this.s_texture0_Loc,1),a.enableVertexAttribArray(this.a_texCoord_Loc),a.vertexAttribPointer(this.a_texCoord_Loc,2,a.FLOAT,!1,0,0),a.uniformMatrix4fv(this.u_matrix_Loc,!1,this.matrix4x4),a.uniform4f(this.u_baseColor_Loc,h,l,$,u),a.uniform1i(this.u_maskFlag_Loc,!1);this.culling?this.gl.enable(a.CULL_FACE):this.gl.disable(a.CULL_FACE),this.gl.enable(a.BLEND);var d,g,y,m;if(null!=this.clipBufPre_clipContextMask)d=a.ONE,g=a.ONE_MINUS_SRC_ALPHA,y=a.ONE,m=a.ONE_MINUS_SRC_ALPHA;else switch(s){case $t._$ms:d=a.ONE,g=a.ONE_MINUS_SRC_ALPHA,y=a.ONE,m=a.ONE_MINUS_SRC_ALPHA;break;case $t._$ns:d=a.ONE,g=a.ONE,y=a.ZERO,m=a.ONE;break;case $t._$_s:d=a.DST_COLOR,g=a.ONE_MINUS_SRC_ALPHA,y=a.ZERO,m=a.ONE}a.blendEquationSeparate(a.FUNC_ADD,a.FUNC_ADD),a.blendFuncSeparate(d,g,y,m),this.anisotropyExt&&a.texParameteri(a.TEXTURE_2D,this.anisotropyExt.TEXTURE_MAX_ANISOTROPY_EXT,this.maxAnisotropy);var T=e.length;a.drawElements(a.TRIANGLES,T,a.UNSIGNED_SHORT,0),a.bindTexture(a.TEXTURE_2D,null)}},mt.prototype._$Rs=function(){throw new Error("_$Rs")},mt.prototype._$Ds=function(t){throw new Error("_$Ds")},mt.prototype._$K2=function(){for(var t=0;t<this.textures.length;t++){0!=this.textures[t]&&(this.gl._$K2(1,this.textures,t),this.textures[t]=null)}},mt.prototype.setTexture=function(t,i){this.textures[t]=i},mt.prototype.initShader=function(){var t=this.gl;this.loadShaders2(),this.a_position_Loc=t.getAttribLocation(this.shaderProgram,"a_position"),this.a_texCoord_Loc=t.getAttribLocation(this.shaderProgram,"a_texCoord"),this.u_matrix_Loc=t.getUniformLocation(this.shaderProgram,"u_mvpMatrix"),this.s_texture0_Loc=t.getUniformLocation(this.shaderProgram,"s_texture0"),this.u_channelFlag=t.getUniformLocation(this.shaderProgram,"u_channelFlag"),this.u_baseColor_Loc=t.getUniformLocation(this.shaderProgram,"u_baseColor"),this.u_maskFlag_Loc=t.getUniformLocation(this.shaderProgram,"u_maskFlag"),this.a_position_Loc_Off=t.getAttribLocation(this.shaderProgramOff,"a_position"),this.a_texCoord_Loc_Off=t.getAttribLocation(this.shaderProgramOff,"a_texCoord"),this.u_matrix_Loc_Off=t.getUniformLocation(this.shaderProgramOff,"u_mvpMatrix"),this.u_clipMatrix_Loc_Off=t.getUniformLocation(this.shaderProgramOff,"u_ClipMatrix"),this.s_texture0_Loc_Off=t.getUniformLocation(this.shaderProgramOff,"s_texture0"),this.s_texture1_Loc_Off=t.getUniformLocation(this.shaderProgramOff,"s_texture1"),this.u_channelFlag_Loc_Off=t.getUniformLocation(this.shaderProgramOff,"u_channelFlag"),this.u_baseColor_Loc_Off=t.getUniformLocation(this.shaderProgramOff,"u_baseColor")},mt.prototype.disposeShader=function(){var t=this.gl;this.shaderProgram&&(t.deleteProgram(this.shaderProgram),this.shaderProgram=null),this.shaderProgramOff&&(t.deleteProgram(this.shaderProgramOff),this.shaderProgramOff=null)},mt.prototype.compileShader=function(t,i){var e=this.gl,r=i,o=e.createShader(t);if(null==o)return _._$Ji("_$L0 to create shader"),null;if(e.shaderSource(o,r),e.compileShader(o),!e.getShaderParameter(o,e.COMPILE_STATUS)){var n=e.getShaderInfoLog(o);return _._$Ji("_$L0 to compile shader : "+n),e.deleteShader(o),null}return o},mt.prototype.loadShaders2=function(){var t=this.gl;if(this.shaderProgram=t.createProgram(),!this.shaderProgram)return!1;if(this.shaderProgramOff=t.createProgram(),!this.shaderProgramOff)return!1;if(this.vertShader=this.compileShader(t.VERTEX_SHADER,"attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_ClipPos;uniform mat4       u_mvpMatrix;void main(){    gl_Position = u_mvpMatrix * a_position;    v_ClipPos = u_mvpMatrix * a_position;    v_texCoord = a_texCoord;}"),!this.vertShader)return _._$Ji("Vertex shader compile _$li!"),!1;if(this.vertShaderOff=this.compileShader(t.VERTEX_SHADER,"attribute vec4     a_position;attribute vec2     a_texCoord;varying vec2       v_texCoord;varying vec4       v_ClipPos;uniform mat4       u_mvpMatrix;uniform mat4       u_ClipMatrix;void main(){    gl_Position = u_mvpMatrix * a_position;    v_ClipPos = u_ClipMatrix * a_position;    v_texCoord = a_texCoord ;}"),!this.vertShaderOff)return _._$Ji("OffVertex shader compile _$li!"),!1;if(this.fragShader=this.compileShader(t.FRAGMENT_SHADER,"precision mediump float;varying vec2       v_texCoord;varying vec4       v_ClipPos;uniform sampler2D  s_texture0;uniform vec4       u_channelFlag;uniform vec4       u_baseColor;uniform bool       u_maskFlag;void main(){    vec4 smpColor;     if(u_maskFlag){        float isInside =             step(u_baseColor.x, v_ClipPos.x/v_ClipPos.w)          * step(u_baseColor.y, v_ClipPos.y/v_ClipPos.w)          * step(v_ClipPos.x/v_ClipPos.w, u_baseColor.z)          * step(v_ClipPos.y/v_ClipPos.w, u_baseColor.w);        smpColor = u_channelFlag * texture2D(s_texture0 , v_texCoord).a * isInside;    }else{        smpColor = texture2D(s_texture0 , v_texCoord) * u_baseColor;    }    gl_FragColor = smpColor;}"),!this.fragShader)return _._$Ji("Fragment shader compile _$li!"),!1;if(this.fragShaderOff=this.compileShader(t.FRAGMENT_SHADER,"precision mediump float ;varying vec2       v_texCoord;varying vec4       v_ClipPos;uniform sampler2D  s_texture0;uniform sampler2D  s_texture1;uniform vec4       u_channelFlag;uniform vec4       u_baseColor ;void main(){    vec4 col_formask = texture2D(s_texture0, v_texCoord) * u_baseColor;    vec4 clipMask = texture2D(s_texture1, v_ClipPos.xy / v_ClipPos.w) * u_channelFlag;    float maskVal = clipMask.r + clipMask.g + clipMask.b + clipMask.a;    col_formask = col_formask * maskVal;    gl_FragColor = col_formask;}"),!this.fragShaderOff)return _._$Ji("OffFragment shader compile _$li!"),!1;if(t.attachShader(this.shaderProgram,this.vertShader),t.attachShader(this.shaderProgram,this.fragShader),t.attachShader(this.shaderProgramOff,this.vertShaderOff),t.attachShader(this.shaderProgramOff,this.fragShaderOff),t.linkProgram(this.shaderProgram),t.linkProgram(this.shaderProgramOff),!t.getProgramParameter(this.shaderProgram,t.LINK_STATUS)){var i=t.getProgramInfoLog(this.shaderProgram);return _._$Ji("_$L0 to link program: "+i),this.vertShader&&(t.deleteShader(this.vertShader),this.vertShader=0),this.fragShader&&(t.deleteShader(this.fragShader),this.fragShader=0),this.shaderProgram&&(t.deleteProgram(this.shaderProgram),this.shaderProgram=0),this.vertShaderOff&&(t.deleteShader(this.vertShaderOff),this.vertShaderOff=0),this.fragShaderOff&&(t.deleteShader(this.fragShaderOff),this.fragShaderOff=0),this.shaderProgramOff&&(t.deleteProgram(this.shaderProgramOff),this.shaderProgramOff=0),!1}return!0},mt.prototype.createFramebuffer=function(){var t=this.gl,i=at.clippingMaskBufferSize,e=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,e);var r=t.createRenderbuffer();t.bindRenderbuffer(t.RENDERBUFFER,r),t.renderbufferStorage(t.RENDERBUFFER,t.RGBA4,i,i),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.RENDERBUFFER,r);var o=t.createTexture();return t.bindTexture(t.TEXTURE_2D,o),t.texImage2D(t.TEXTURE_2D,0,t.RGBA,i,i,0,t.RGBA,t.UNSIGNED_BYTE,null),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MIN_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_MAG_FILTER,t.LINEAR),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE),t.texParameteri(t.TEXTURE_2D,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,o,0),t.bindTexture(t.TEXTURE_2D,null),t.bindRenderbuffer(t.RENDERBUFFER,null),t.bindFramebuffer(t.FRAMEBUFFER,null),at.fTexture[this.glno]=o,{framebuffer:e,renderbuffer:r,texture:at.fTexture[this.glno]}},St.prototype._$fP=function(){var t,i,e,r=this._$ST();if(0==(128&r))return 255&r;if(0==(128&(t=this._$ST())))return(127&r)<<7|127&t;if(0==(128&(i=this._$ST())))return(127&r)<<14|(127&t)<<7|255&i;if(0==(128&(e=this._$ST())))return(127&r)<<21|(127&t)<<14|(127&i)<<7|255&e;throw new lt("_$L _$0P  _")},St.prototype.getFormatVersion=function(){return this._$S2},St.prototype._$gr=function(t){this._$S2=t},St.prototype._$3L=function(){return this._$fP()},St.prototype._$mP=function(){return this._$zT(),this._$F+=8,this._$T.getFloat64(this._$F-8)},St.prototype._$_T=function(){return this._$zT(),this._$F+=4,this._$T.getFloat32(this._$F-4)},St.prototype._$6L=function(){return this._$zT(),this._$F+=4,this._$T.getInt32(this._$F-4)},St.prototype._$ST=function(){return this._$zT(),this._$T.getInt8(this._$F++)},St.prototype._$9T=function(){return this._$zT(),this._$F+=2,this._$T.getInt16(this._$F-2)},St.prototype._$2T=function(){throw this._$zT(),this._$F+=8,new lt("_$L _$q read long")},St.prototype._$po=function(){return this._$zT(),0!=this._$T.getInt8(this._$F++)};var xt=!0;St.prototype._$bT=function(){this._$zT();var t=this._$3L(),i=null;if(xt)try{var e=new ArrayBuffer(2*t);i=new Uint16Array(e);for(var r=0;r<t;++r)i[r]=this._$T.getUint8(this._$F++);return String.fromCharCode.apply(null,i)}catch(t){xt=!1}try{var o=new Array;if(null==i)for(var r=0;r<t;++r)o[r]=this._$T.getUint8(this._$F++);else for(var r=0;r<t;++r)o[r]=i[r];return String.fromCharCode.apply(null,o)}catch(t){console.log("read utf8 / _$rT _$L0 !! : "+t)}},St.prototype._$cS=function(){this._$zT();for(var t=this._$3L(),i=new Int32Array(t),e=0;e<t;e++)i[e]=this._$T.getInt32(this._$F),this._$F+=4;return i},St.prototype._$Tb=function(){this._$zT();for(var t=this._$3L(),i=new Float32Array(t),e=0;e<t;e++)i[e]=this._$T.getFloat32(this._$F),this._$F+=4;return i},St.prototype._$5b=function(){this._$zT();for(var t=this._$3L(),i=new Float64Array(t),e=0;e<t;e++)i[e]=this._$T.getFloat64(this._$F),this._$F+=8;return i},St.prototype._$nP=function(){return this._$Jb(-1)},St.prototype._$Jb=function(t){if(this._$zT(),t<0&&(t=this._$3L()),t==G._$7P){var i=this._$6L();if(0<=i&&i<this._$Ko.length)return this._$Ko[i];throw new lt("_$sL _$4i @_$m0")}var e=this._$4b(t);return this._$Ko.push(e),e},St.prototype._$4b=function(t){if(0==t)return null;if(50==t){var i=this._$bT(),e=b.getID(i);return e}if(51==t){var i=this._$bT(),e=yt.getID(i);return e}if(134==t){var i=this._$bT(),e=l.getID(i);return e}if(60==t){var i=this._$bT(),e=u.getID(i);return e}if(t>=48){var r=G._$9o(t);return null!=r?(r._$F0(this),r):null}switch(t){case 1:return this._$bT();case 10:return new n(this._$6L(),!0);case 11:return new S(this._$mP(),this._$mP(),this._$mP(),this._$mP());case 12:return new S(this._$_T(),this._$_T(),this._$_T(),this._$_T());case 13:return new L(this._$mP(),this._$mP());case 14:return new L(this._$_T(),this._$_T());case 15:for(var o=this._$3L(),e=new Array(o),s=0;s<o;s++)e[s]=this._$nP();return e;case 17:var e=new F(this._$mP(),this._$mP(),this._$mP(),this._$mP(),this._$mP(),this._$mP());return e;case 21:return new h(this._$6L(),this._$6L(),this._$6L(),this._$6L());case 22:return new pt(this._$6L(),this._$6L());case 23:throw new Error("_$L _$ro ");case 16:case 25:return this._$cS();case 26:return this._$5b();case 27:return this._$Tb();case 2:case 3:case 4:case 5:case 6:case 7:case 8:case 9:case 18:case 19:case 20:case 24:case 28:throw new lt("_$6 _$q : _$nP() of 2-9 ,18,19,20,24,28 : "+t);default:throw new lt("_$6 _$q : _$nP() NO _$i : "+t)}},St.prototype._$8L=function(){return 0==this._$hL?this._$v0=this._$ST():8==this._$hL&&(this._$v0=this._$ST(),this._$hL=0),1==(this._$v0>>7-this._$hL++&1)},St.prototype._$zT=function(){0!=this._$hL&&(this._$hL=0)},vt.prototype._$wP=function(t,i,e){for(var r=0;r<e;r++){for(var o=0;o<i;o++){var n=2*(o+r*i);console.log("(% 7.3f , % 7.3f) , ",t[n],t[n+1])}console.log("\n")}console.log("\n")},Lt._$2S=Math.PI/180,Lt._$bS=Math.PI/180,Lt._$wS=180/Math.PI,Lt._$NS=180/Math.PI,Lt.PI_F=Math.PI,Lt._$kT=[0,.012368,.024734,.037097,.049454,.061803,.074143,.086471,.098786,.111087,.12337,.135634,.147877,.160098,.172295,.184465,.196606,.208718,.220798,.232844,.244854,.256827,.268761,.280654,.292503,.304308,.316066,.327776,.339436,.351044,.362598,.374097,.385538,.396921,.408243,.419502,.430697,.441826,.452888,.463881,.474802,.485651,.496425,.507124,.517745,.528287,.538748,.549126,.559421,.56963,.579752,.589785,.599728,.609579,.619337,.629,.638567,.648036,.657406,.666676,.675843,.684908,.693867,.70272,.711466,.720103,.72863,.737045,.745348,.753536,.76161,.769566,.777405,.785125,.792725,.800204,.807561,.814793,.821901,.828884,.835739,.842467,.849066,.855535,.861873,.868079,.874153,.880093,.885898,.891567,.897101,.902497,.907754,.912873,.917853,.922692,.92739,.931946,.936359,.940629,.944755,.948737,.952574,.956265,.959809,.963207,.966457,.96956,.972514,.97532,.977976,.980482,.982839,.985045,.987101,.989006,.990759,.992361,.993811,.995109,.996254,.997248,.998088,.998776,.999312,.999694,.999924,1],Lt._$92=function(t,i){var e=Math.atan2(t[1],t[0]),r=Math.atan2(i[1],i[0]);return Lt._$tS(e,r)},Lt._$tS=function(t,i){for(var e=t-i;e<-Math.PI;)e+=2*Math.PI;for(;e>Math.PI;)e-=2*Math.PI;return e},Lt._$9=function(t){return Math.sin(t)},Lt.fcos=function(t){return Math.cos(t)},Mt.prototype._$u2=function(){return this._$IS[0]},Mt.prototype._$yo=function(){return this._$AT&&!this._$IS[0]},Mt.prototype._$GT=function(){return this._$e0},Et._$W2=0,Et.SYSTEM_INFO=null,Et.USER_AGENT=navigator.userAgent,Et.isIPhone=function(){return Et.SYSTEM_INFO||Et.setup(),Et.SYSTEM_INFO._isIPhone},Et.isIOS=function(){return Et.SYSTEM_INFO||Et.setup(),Et.SYSTEM_INFO._isIPhone||Et.SYSTEM_INFO._isIPad},Et.isAndroid=function(){return Et.SYSTEM_INFO||Et.setup(),Et.SYSTEM_INFO._isAndroid},Et.getOSVersion=function(){return Et.SYSTEM_INFO||Et.setup(),Et.SYSTEM_INFO.version},Et.getOS=function(){return Et.SYSTEM_INFO||Et.setup(),Et.SYSTEM_INFO._isIPhone||Et.SYSTEM_INFO._isIPad?"iOS":Et.SYSTEM_INFO._isAndroid?"Android":"_$Q0 OS"},Et.setup=function(){function t(t,i){for(var e=t.substring(i).split(/[ _,;\.]/),r=0,o=0;o<=2&&!isNaN(e[o]);o++){var n=parseInt(e[o]);if(n<0||n>999){_._$li("err : "+n+" @UtHtml5.setup()"),r=0;break}r+=n*Math.pow(1e3,2-o)}return r}var i,e=Et.USER_AGENT,r=Et.SYSTEM_INFO={userAgent:e};if((i=e.indexOf("iPhone OS "))>=0)r.os="iPhone",r._isIPhone=!0,r.version=t(e,i+"iPhone OS ".length);else if((i=e.indexOf("iPad"))>=0){if((i=e.indexOf("CPU OS"))<0)return void _._$li(" err : "+e+" @UtHtml5.setup()");r.os="iPad",r._isIPad=!0,r.version=t(e,i+"CPU OS ".length)}else(i=e.indexOf("Android"))>=0?(r.os="Android",r._isAndroid=!0,r.version=t(e,i+"Android ".length)):(r.os="-",r.version=-1)},window.UtSystem=w,window.UtDebug=_,window.LDTransform=gt,window.LDGL=nt,window.Live2D=at,window.Live2DModelWebGL=ft,window.Live2DModelJS=q,window.Live2DMotion=J,window.MotionQueueManager=ct,window.PhysicsHair=f,window.AMotion=s,window.PartsDataID=l,window.DrawDataID=b,window.BaseDataID=yt,window.ParamID=u,at.init();var At=!1}()}).call(i,e(7))},function(t,i){t.exports={import:function(){throw new Error("System.import cannot be used indirectly")}}},function(t,i,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(){this.models=[],this.count=-1,this.reloadFlg=!1,Live2D.init(),n.Live2DFramework.setPlatformManager(new _.default)}Object.defineProperty(i,"__esModule",{value:!0}),i.default=o;var n=e(0),s=e(9),_=r(s),a=e(10),h=r(a),l=e(1),$=r(l);o.prototype.createModel=function(){var t=new h.default;return this.models.push(t),t},o.prototype.changeModel=function(t,i){if(this.reloadFlg){this.reloadFlg=!1;this.releaseModel(0,t),this.createModel(),this.models[0].load(t,i)}},o.prototype.getModel=function(t){return t>=this.models.length?null:this.models[t]},o.prototype.releaseModel=function(t,i){this.models.length<=t||(this.models[t].release(i),delete this.models[t],this.models.splice(t,1))},o.prototype.numModels=function(){return this.models.length},o.prototype.setDrag=function(t,i){for(var e=0;e<this.models.length;e++)this.models[e].setDrag(t,i)},o.prototype.maxScaleEvent=function(){$.default.DEBUG_LOG&&console.log("Max scale event.");for(var t=0;t<this.models.length;t++)this.models[t].startRandomMotion($.default.MOTION_GROUP_PINCH_IN,$.default.PRIORITY_NORMAL)},o.prototype.minScaleEvent=function(){$.default.DEBUG_LOG&&console.log("Min scale event.");for(var t=0;t<this.models.length;t++)this.models[t].startRandomMotion($.default.MOTION_GROUP_PINCH_OUT,$.default.PRIORITY_NORMAL)},o.prototype.tapEvent=function(t,i){$.default.DEBUG_LOG&&console.log("tapEvent view x:"+t+" y:"+i);for(var e=0;e<this.models.length;e++)this.models[e].hitTest($.default.HIT_AREA_HEAD,t,i)?($.default.DEBUG_LOG&&console.log("Tap face."),this.models[e].setRandomExpression()):this.models[e].hitTest($.default.HIT_AREA_BODY,t,i)?($.default.DEBUG_LOG&&console.log("Tap body. models["+e+"]"),this.models[e].startRandomMotion($.default.MOTION_GROUP_TAP_BODY,$.default.PRIORITY_NORMAL)):this.models[e].hitTestCustom("head",t,i)?($.default.DEBUG_LOG&&console.log("Tap face."),this.models[e].startRandomMotion($.default.MOTION_GROUP_FLICK_HEAD,$.default.PRIORITY_NORMAL)):this.models[e].hitTestCustom("body",t,i)&&($.default.DEBUG_LOG&&console.log("Tap body. models["+e+"]"),this.models[e].startRandomMotion($.default.MOTION_GROUP_TAP_BODY,$.default.PRIORITY_NORMAL));return!0}},function(t,i,e){"use strict";function r(){}Object.defineProperty(i,"__esModule",{value:!0}),i.default=r;var o=e(2);var requestCache={};r.prototype.loadBytes=function(t,i){if(requestCache[t]!==undefined){i(requestCache[t]);return;}var e=new XMLHttpRequest;e.open("GET",t,!0),e.responseType="arraybuffer",e.onload=function(){switch(e.status){case 200:requestCache[t]=e.response;i(e.response);break;default:console.error("Failed to load ("+e.status+") : "+t)}},e.send(null)},r.prototype.loadString=function(t){this.loadBytes(t,function(t){return t})},r.prototype.loadLive2DModel=function(t,i){var e=null;this.loadBytes(t,function(t){e=Live2DModelWebGL.loadModel(t),i(e)})},r.prototype.loadTexture=function(t,i,e,r){var n=new Image;n.crossOrigin="Anonymous",n.src=e;n.onload=function(){var e=(0,o.getContext)(),s=e.createTexture();if(!s)return console.error("Failed to generate gl texture name."),-1;0==t.isPremultipliedAlpha()&&e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,1),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,1),e.activeTexture(e.TEXTURE0),e.bindTexture(e.TEXTURE_2D,s),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR_MIPMAP_NEAREST),e.generateMipmap(e.TEXTURE_2D),t.setTexture(i,s),s=null,"function"==typeof r&&r()},n.onerror=function(){console.error("Failed to load image : "+e)}},r.prototype.jsonParseFromBytes=function(t){var i,e=new Uint8Array(t,0,3);return i=239==e[0]&&187==e[1]&&191==e[2]?String.fromCharCode.apply(null,new Uint8Array(t,3)):String.fromCharCode.apply(null,new Uint8Array(t)),JSON.parse(i)},r.prototype.log=function(t){}},function(t,i,e){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(){n.L2DBaseModel.prototype.constructor.call(this),this.modelHomeDir="",this.modelSetting=null,this.tmpMatrix=[]}Object.defineProperty(i,"__esModule",{value:!0}),i.default=o;var n=e(0),s=e(11),_=r(s),a=e(1),h=r(a),l=e(3),$=r(l);o.prototype=new n.L2DBaseModel,o.prototype.load=function(t,i,e){this.setUpdating(!0),this.setInitialized(!1),this.modelHomeDir=i.substring(0,i.lastIndexOf("/")+1),this.modelSetting=new _.default;var r=this;this.modelSetting.loadModelSetting(i,function(){var t=r.modelHomeDir+r.modelSetting.getModelFile();r.loadModelData(t,function(t){for(var i=0;i<r.modelSetting.getTextureNum();i++){if(/^https?:\/\/|^\/\//i.test(r.modelSetting.getTextureFile(i)))var o=r.modelSetting.getTextureFile(i);else var o=r.modelHomeDir+r.modelSetting.getTextureFile(i);r.loadTexture(i,o,function(){if(r.isTexLoaded){if(r.modelSetting.getExpressionNum()>0){r.expressions={};for(var t=0;t<r.modelSetting.getExpressionNum();t++){var i=r.modelSetting.getExpressionName(t),o=r.modelHomeDir+r.modelSetting.getExpressionFile(t);r.loadExpression(i,o)}}else r.expressionManager=null,r.expressions={};if(r.eyeBlink,null!=r.modelSetting.getPhysicsFile()?r.loadPhysics(r.modelHomeDir+r.modelSetting.getPhysicsFile()):r.physics=null,null!=r.modelSetting.getPoseFile()?r.loadPose(r.modelHomeDir+r.modelSetting.getPoseFile(),function(){r.pose.updateParam(r.live2DModel)}):r.pose=null,null!=r.modelSetting.getLayout()){var n=r.modelSetting.getLayout();null!=n.width&&r.modelMatrix.setWidth(n.width),null!=n.height&&r.modelMatrix.setHeight(n.height),null!=n.x&&r.modelMatrix.setX(n.x),null!=n.y&&r.modelMatrix.setY(n.y),null!=n.center_x&&r.modelMatrix.centerX(n.center_x),null!=n.center_y&&r.modelMatrix.centerY(n.center_y),null!=n.top&&r.modelMatrix.top(n.top),null!=n.bottom&&r.modelMatrix.bottom(n.bottom),null!=n.left&&r.modelMatrix.left(n.left),null!=n.right&&r.modelMatrix.right(n.right)}if(null!=r.modelSetting.getHitAreasCustom()){var s=r.modelSetting.getHitAreasCustom();null!=s.head_x&&(h.default.hit_areas_custom_head_x=s.head_x),null!=s.head_y&&(h.default.hit_areas_custom_head_y=s.head_y),null!=s.body_x&&(h.default.hit_areas_custom_body_x=s.body_x),null!=s.body_y&&(h.default.hit_areas_custom_body_y=s.body_y)}for(var t=0;t<r.modelSetting.getInitParamNum();t++)r.live2DModel.setParamFloat(r.modelSetting.getInitParamID(t),r.modelSetting.getInitParamValue(t));for(var t=0;t<r.modelSetting.getInitPartsVisibleNum();t++)r.live2DModel.setPartsOpacity(r.modelSetting.getInitPartsVisibleID(t),r.modelSetting.getInitPartsVisibleValue(t));r.live2DModel.saveParam(),r.preloadMotionGroup(h.default.MOTION_GROUP_IDLE),r.preloadMotionGroup(h.default.MOTION_GROUP_SLEEPY),r.mainMotionManager.stopAllMotions(),r.setUpdating(!1),r.setInitialized(!0),"function"==typeof e&&e()}})}})})},o.prototype.release=function(t){var i=n.Live2DFramework.getPlatformManager();t.deleteTexture(i.texture)},o.prototype.preloadMotionGroup=function(t){for(var i=this,e=0;e<this.modelSetting.getMotionNum(t);e++){var r=this.modelSetting.getMotionFile(t,e);this.loadMotion(r,this.modelHomeDir+r,function(r){r.setFadeIn(i.modelSetting.getMotionFadeIn(t,e)),r.setFadeOut(i.modelSetting.getMotionFadeOut(t,e))})}},o.prototype.update=function(){if(null==this.live2DModel)return void(h.default.DEBUG_LOG&&console.error("Failed to update."));var t=UtSystem.getUserTimeMSec()-this.startTimeMSec,i=t/1e3,e=2*i*Math.PI;if(this.mainMotionManager.isFinished()){"1"===sessionStorage.getItem("Sleepy")?this.startRandomMotion(h.default.MOTION_GROUP_SLEEPY,h.default.PRIORITY_SLEEPY):this.startRandomMotion(h.default.MOTION_GROUP_IDLE,h.default.PRIORITY_IDLE)}this.live2DModel.loadParam(),this.mainMotionManager.updateParam(this.live2DModel)||null!=this.eyeBlink&&this.eyeBlink.updateParam(this.live2DModel),this.live2DModel.saveParam(),null==this.expressionManager||null==this.expressions||this.expressionManager.isFinished()||this.expressionManager.updateParam(this.live2DModel),this.live2DModel.addToParamFloat("PARAM_ANGLE_X",30*this.dragX,1),this.live2DModel.addToParamFloat("PARAM_ANGLE_Y",30*this.dragY,1),this.live2DModel.addToParamFloat("PARAM_ANGLE_Z",this.dragX*this.dragY*-30,1),this.live2DModel.addToParamFloat("PARAM_BODY_ANGLE_X",10*this.dragX,1),this.live2DModel.addToParamFloat("PARAM_EYE_BALL_X",this.dragX,1),this.live2DModel.addToParamFloat("PARAM_EYE_BALL_Y",this.dragY,1),this.live2DModel.addToParamFloat("PARAM_ANGLE_X",Number(15*Math.sin(e/6.5345)),.5),this.live2DModel.addToParamFloat("PARAM_ANGLE_Y",Number(8*Math.sin(e/3.5345)),.5),this.live2DModel.addToParamFloat("PARAM_ANGLE_Z",Number(10*Math.sin(e/5.5345)),.5),this.live2DModel.addToParamFloat("PARAM_BODY_ANGLE_X",Number(4*Math.sin(e/15.5345)),.5),this.live2DModel.setParamFloat("PARAM_BREATH",Number(.5+.5*Math.sin(e/3.2345)),1),null!=this.physics&&this.physics.updateParam(this.live2DModel),null==this.lipSync&&this.live2DModel.setParamFloat("PARAM_MOUTH_OPEN_Y",this.lipSyncValue),null!=this.pose&&this.pose.updateParam(this.live2DModel),this.live2DModel.update()},o.prototype.setRandomExpression=function(){var t=[];for(var i in this.expressions)t.push(i);var e=parseInt(Math.random()*t.length);this.setExpression(t[e])},o.prototype.startRandomMotion=function(t,i){var e=this.modelSetting.getMotionNum(t),r=parseInt(Math.random()*e);this.startMotion(t,r,i)},o.prototype.startMotion=function(t,i,e){var r=this.modelSetting.getMotionFile(t,i);if(null==r||""==r)return void(h.default.DEBUG_LOG&&console.error("Failed to motion."));if(e==h.default.PRIORITY_FORCE)this.mainMotionManager.setReservePriority(e);else if(!this.mainMotionManager.reserveMotion(e))return void(h.default.DEBUG_LOG&&console.log("Motion is running."));var o,n=this;null==this.motions[t]?this.loadMotion(null,this.modelHomeDir+r,function(r){o=r,n.setFadeInFadeOut(t,i,e,o)}):(o=this.motions[t],n.setFadeInFadeOut(t,i,e,o))},o.prototype.setFadeInFadeOut=function(t,i,e,r){var o=this.modelSetting.getMotionFile(t,i);if(r.setFadeIn(this.modelSetting.getMotionFadeIn(t,i)),r.setFadeOut(this.modelSetting.getMotionFadeOut(t,i)),h.default.DEBUG_LOG&&console.log("Start motion : "+o),null==this.modelSetting.getMotionSound(t,i))this.mainMotionManager.startMotionPrio(r,e);else{var n=this.modelSetting.getMotionSound(t,i),s=document.createElement("audio");s.src=this.modelHomeDir+n,h.default.DEBUG_LOG&&console.log("Start sound : "+n),s.play(),this.mainMotionManager.startMotionPrio(r,e)}},o.prototype.setExpression=function(t){var i=this.expressions[t];h.default.DEBUG_LOG&&console.log("Expression : "+t),this.expressionManager.startMotion(i,!1)},o.prototype.draw=function(t){$.default.push(),$.default.multMatrix(this.modelMatrix.getArray()),this.tmpMatrix=$.default.getMatrix(),this.live2DModel.setMatrix(this.tmpMatrix),this.live2DModel.draw(),$.default.pop()},o.prototype.hitTest=function(t,i,e){for(var r=this.modelSetting.getHitAreaNum(),o=0;o<r;o++)if(t==this.modelSetting.getHitAreaName(o)){var n=this.modelSetting.getHitAreaID(o);return this.hitTestSimple(n,i,e)}return!1},o.prototype.hitTestCustom=function(t,i,e){return"head"==t?this.hitTestSimpleCustom(h.default.hit_areas_custom_head_x,h.default.hit_areas_custom_head_y,i,e):"body"==t&&this.hitTestSimpleCustom(h.default.hit_areas_custom_body_x,h.default.hit_areas_custom_body_y,i,e)}},function(t,i,e){"use strict";function r(){this.NAME="name",this.ID="id",this.MODEL="model",this.TEXTURES="textures",this.HIT_AREAS="hit_areas",this.PHYSICS="physics",this.POSE="pose",this.EXPRESSIONS="expressions",this.MOTION_GROUPS="motions",this.SOUND="sound",this.FADE_IN="fade_in",this.FADE_OUT="fade_out",this.LAYOUT="layout",this.HIT_AREAS_CUSTOM="hit_areas_custom",this.INIT_PARAM="init_param",this.INIT_PARTS_VISIBLE="init_parts_visible",this.VALUE="val",this.FILE="file",this.json={}}Object.defineProperty(i,"__esModule",{value:!0}),i.default=r;var o=e(0);r.prototype.loadModelSetting=function(t,i){var e=this;o.Live2DFramework.getPlatformManager().loadBytes(t,function(t){var r=String.fromCharCode.apply(null,new Uint8Array(t));e.json=JSON.parse(r),i()})},r.prototype.getTextureFile=function(t){return null==this.json[this.TEXTURES]||null==this.json[this.TEXTURES][t]?null:this.json[this.TEXTURES][t]},r.prototype.getModelFile=function(){return this.json[this.MODEL]},r.prototype.getTextureNum=function(){return null==this.json[this.TEXTURES]?0:this.json[this.TEXTURES].length},r.prototype.getHitAreaNum=function(){return null==this.json[this.HIT_AREAS]?0:this.json[this.HIT_AREAS].length},r.prototype.getHitAreaID=function(t){return null==this.json[this.HIT_AREAS]||null==this.json[this.HIT_AREAS][t]?null:this.json[this.HIT_AREAS][t][this.ID]},r.prototype.getHitAreaName=function(t){return null==this.json[this.HIT_AREAS]||null==this.json[this.HIT_AREAS][t]?null:this.json[this.HIT_AREAS][t][this.NAME]},r.prototype.getPhysicsFile=function(){return this.json[this.PHYSICS]},r.prototype.getPoseFile=function(){return this.json[this.POSE]},r.prototype.getExpressionNum=function(){return null==this.json[this.EXPRESSIONS]?0:this.json[this.EXPRESSIONS].length},r.prototype.getExpressionFile=function(t){return null==this.json[this.EXPRESSIONS]?null:this.json[this.EXPRESSIONS][t][this.FILE]},r.prototype.getExpressionName=function(t){return null==this.json[this.EXPRESSIONS]?null:this.json[this.EXPRESSIONS][t][this.NAME]},r.prototype.getLayout=function(){return this.json[this.LAYOUT]},r.prototype.getHitAreasCustom=function(){return this.json[this.HIT_AREAS_CUSTOM]},r.prototype.getInitParamNum=function(){return null==this.json[this.INIT_PARAM]?0:this.json[this.INIT_PARAM].length},r.prototype.getMotionNum=function(t){return null==this.json[this.MOTION_GROUPS]||null==this.json[this.MOTION_GROUPS][t]?0:this.json[this.MOTION_GROUPS][t].length},r.prototype.getMotionFile=function(t,i){return null==this.json[this.MOTION_GROUPS]||null==this.json[this.MOTION_GROUPS][t]||null==this.json[this.MOTION_GROUPS][t][i]?null:this.json[this.MOTION_GROUPS][t][i][this.FILE]},r.prototype.getMotionSound=function(t,i){return null==this.json[this.MOTION_GROUPS]||null==this.json[this.MOTION_GROUPS][t]||null==this.json[this.MOTION_GROUPS][t][i]||null==this.json[this.MOTION_GROUPS][t][i][this.SOUND]?null:this.json[this.MOTION_GROUPS][t][i][this.SOUND]},r.prototype.getMotionFadeIn=function(t,i){return null==this.json[this.MOTION_GROUPS]||null==this.json[this.MOTION_GROUPS][t]||null==this.json[this.MOTION_GROUPS][t][i]||null==this.json[this.MOTION_GROUPS][t][i][this.FADE_IN]?1e3:this.json[this.MOTION_GROUPS][t][i][this.FADE_IN]},r.prototype.getMotionFadeOut=function(t,i){return null==this.json[this.MOTION_GROUPS]||null==this.json[this.MOTION_GROUPS][t]||null==this.json[this.MOTION_GROUPS][t][i]||null==this.json[this.MOTION_GROUPS][t][i][this.FADE_OUT]?1e3:this.json[this.MOTION_GROUPS][t][i][this.FADE_OUT]},r.prototype.getInitParamID=function(t){return null==this.json[this.INIT_PARAM]||null==this.json[this.INIT_PARAM][t]?null:this.json[this.INIT_PARAM][t][this.ID]},r.prototype.getInitParamValue=function(t){return null==this.json[this.INIT_PARAM]||null==this.json[this.INIT_PARAM][t]?NaN:this.json[this.INIT_PARAM][t][this.VALUE]},r.prototype.getInitPartsVisibleNum=function(){return null==this.json[this.INIT_PARTS_VISIBLE]?0:this.json[this.INIT_PARTS_VISIBLE].length},r.prototype.getInitPartsVisibleID=function(t){return null==this.json[this.INIT_PARTS_VISIBLE]||null==this.json[this.INIT_PARTS_VISIBLE][t]?null:this.json[this.INIT_PARTS_VISIBLE][t][this.ID]},r.prototype.getInitPartsVisibleValue=function(t){return null==this.json[this.INIT_PARTS_VISIBLE]||null==this.json[this.INIT_PARTS_VISIBLE][t]?NaN:this.json[this.INIT_PARTS_VISIBLE][t][this.VALUE]}}]);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/live2d-widget/rollup.config.js"/>
      <url>/live2d-widget/rollup.config.js</url>
      
        <content type="html"><![CDATA[import { nodeResolve } from "@rollup/plugin-node-resolve";import { createFilter } from "@rollup/pluginutils";function string(opts = {}) {    if (!opts.include) {        throw Error("include option should be specified");    }    const filter = createFilter(opts.include, opts.exclude);    return {        name: "string",        transform(code, id) {            if (filter(id)) {                return {                    code: `export default ${JSON.stringify(code)};`,                    map: { mappings: "" }                };            }        },        renderChunk(code, chunk, outputOptions = {}) {            return `/*! * Live2D Widget * https://github.com/stevenjoezhang/live2d-widget */` + code;        }    };}export default {    input: "src/waifu-tips.js",    plugins: [nodeResolve(), string({        include: "**/*.svg",    })]};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/live2d-widget/waifu-tips.js"/>
      <url>/live2d-widget/waifu-tips.js</url>
      
        <content type="html"><![CDATA[/*! * Live2D Widget * https://github.com/stevenjoezhang/live2d-widget */!function(){"use strict";function e(e){return Array.isArray(e)?e[Math.floor(Math.random()*e.length)]:e}let t;function o(o,s,n){if(!o||sessionStorage.getItem("waifu-text")&&sessionStorage.getItem("waifu-text")>n)return;t&&(clearTimeout(t),t=null),o=e(o),sessionStorage.setItem("waifu-text",n);const i=document.getElementById("waifu-tips");i.innerHTML=o,i.classList.add("waifu-tips-active"),t=setTimeout((()=>{sessionStorage.removeItem("waifu-text"),i.classList.remove("waifu-tips-active")}),s)}class s{constructor(e){let{apiPath:t,cdnPath:o}=e,s=!1;if("string"==typeof o)s=!0,o.endsWith("/")||(o+="/");else{if("string"!=typeof t)throw"Invalid initWidget argument!";t.endsWith("/")||(t+="/")}this.useCDN=s,this.apiPath=t,this.cdnPath=o}async loadModelList(){const e=await fetch(`${this.cdnPath}model_list.json`);this.modelList=await e.json()}async loadModel(t,s,n){if(localStorage.setItem("modelId",t),localStorage.setItem("modelTexturesId",s),o(n,4e3,10),this.useCDN){this.modelList||await this.loadModelList();const o=e(this.modelList.models[t]);loadlive2d("live2d",`${this.cdnPath}model/${o}/index.json`)}else loadlive2d("live2d",`${this.apiPath}get/?id=${t}-${s}`),console.log(`Live2D 模型 ${t}-${s} 加载完成`)}async loadRandModel(){const t=localStorage.getItem("modelId"),s=localStorage.getItem("modelTexturesId");if(this.useCDN){this.modelList||await this.loadModelList();const s=e(this.modelList.models[t]);loadlive2d("live2d",`${this.cdnPath}model/${s}/index.json`),o("我的新衣服好看嘛？",4e3,10)}else fetch(`${this.apiPath}rand_textures/?id=${t}-${s}`).then((e=>e.json())).then((e=>{1!==e.textures.id||1!==s&&0!==s?this.loadModel(t,e.textures.id,"我的新衣服好看嘛？"):o("我还没有其他衣服呢！",4e3,10)}))}async loadOtherModel(){let e=localStorage.getItem("modelId");if(this.useCDN){this.modelList||await this.loadModelList();const t=++e>=this.modelList.models.length?0:e;this.loadModel(t,0,this.modelList.messages[t])}else fetch(`${this.apiPath}switch/?id=${e}`).then((e=>e.json())).then((e=>{this.loadModel(e.model.id,0,e.model.message)}))}}const n={hitokoto:{icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">\x3c!--! Font Awesome Free 6.2.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2022 Fonticons, Inc. --\x3e<path d="M512 240c0 114.9-114.6 208-256 208c-37.1 0-72.3-6.4-104.1-17.9c-11.9 8.7-31.3 20.6-54.3 30.6C73.6 471.1 44.7 480 16 480c-6.5 0-12.3-3.9-14.8-9.9c-2.5-6-1.1-12.8 3.4-17.4l0 0 0 0 0 0 0 0 .3-.3c.3-.3 .7-.7 1.3-1.4c1.1-1.2 2.8-3.1 4.9-5.7c4.1-5 9.6-12.4 15.2-21.6c10-16.6 19.5-38.4 21.4-62.9C17.7 326.8 0 285.1 0 240C0 125.1 114.6 32 256 32s256 93.1 256 208z"/></svg>',callback:function(){fetch("https://v1.hitokoto.cn").then((e=>e.json())).then((e=>{const t=`这句一言来自 <span>「${e.from}」</span>，是 <span>${e.creator}</span> 在 hitokoto.cn 投稿的。`;o(e.hitokoto,6e3,9),setTimeout((()=>{o(t,4e3,9)}),6e3)}))}},asteroids:{icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">\x3c!--! Font Awesome Free 6.2.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2022 Fonticons, Inc. --\x3e<path d="M498.1 5.6c10.1 7 15.4 19.1 13.5 31.2l-64 416c-1.5 9.7-7.4 18.2-16 23s-18.9 5.4-28 1.6L277.3 424.9l-40.1 74.5c-5.2 9.7-16.3 14.6-27 11.9S192 499 192 488V392c0-5.3 1.8-10.5 5.1-14.7L362.4 164.7c2.5-7.1-6.5-14.3-13-8.4L170.4 318.2l-32 28.9 0 0c-9.2 8.3-22.3 10.6-33.8 5.8l-85-35.4C8.4 312.8 .8 302.2 .1 290s5.5-23.7 16.1-29.8l448-256c10.7-6.1 23.9-5.5 34 1.4z"/></svg>',callback:()=>{if(window.Asteroids)window.ASTEROIDSPLAYERS||(window.ASTEROIDSPLAYERS=[]),window.ASTEROIDSPLAYERS.push(new Asteroids);else{const e=document.createElement("script");e.src="https://fastly.jsdelivr.net/gh/stevenjoezhang/asteroids/asteroids.js",document.head.appendChild(e)}}},"switch-model":{icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">\x3c!--! Font Awesome Free 6.2.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2022 Fonticons, Inc. --\x3e<path d="M399 384.2C376.9 345.8 335.4 320 288 320H224c-47.4 0-88.9 25.8-111 64.2c35.2 39.2 86.2 63.8 143 63.8s107.8-24.7 143-63.8zM512 256c0 141.4-114.6 256-256 256S0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM256 272c39.8 0 72-32.2 72-72s-32.2-72-72-72s-72 32.2-72 72s32.2 72 72 72z"/></svg>',callback:()=>{}},"switch-texture":{icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">\x3c!--! Font Awesome Free 6.2.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2022 Fonticons, Inc. --\x3e<path d="M320 64c0-35.3-28.7-64-64-64s-64 28.7-64 64s28.7 64 64 64s64-28.7 64-64zm-96 96c-35.3 0-64 28.7-64 64v48c0 17.7 14.3 32 32 32h1.8l11.1 99.5c1.8 16.2 15.5 28.5 31.8 28.5h38.7c16.3 0 30-12.3 31.8-28.5L318.2 304H320c17.7 0 32-14.3 32-32V224c0-35.3-28.7-64-64-64H224zM132.3 394.2c13-2.4 21.7-14.9 19.3-27.9s-14.9-21.7-27.9-19.3c-32.4 5.9-60.9 14.2-82 24.8c-10.5 5.3-20.3 11.7-27.8 19.6C6.4 399.5 0 410.5 0 424c0 21.4 15.5 36.1 29.1 45c14.7 9.6 34.3 17.3 56.4 23.4C130.2 504.7 190.4 512 256 512s125.8-7.3 170.4-19.6c22.1-6.1 41.8-13.8 56.4-23.4c13.7-8.9 29.1-23.6 29.1-45c0-13.5-6.4-24.5-14-32.6c-7.5-7.9-17.3-14.3-27.8-19.6c-21-10.6-49.5-18.9-82-24.8c-13-2.4-25.5 6.3-27.9 19.3s6.3 25.5 19.3 27.9c30.2 5.5 53.7 12.8 69 20.5c3.2 1.6 5.8 3.1 7.9 4.5c3.6 2.4 3.6 7.2 0 9.6c-8.8 5.7-23.1 11.8-43 17.3C374.3 457 318.5 464 256 464s-118.3-7-157.7-17.9c-19.9-5.5-34.2-11.6-43-17.3c-3.6-2.4-3.6-7.2 0-9.6c2.1-1.4 4.8-2.9 7.9-4.5c15.3-7.7 38.8-14.9 69-20.5z"/></svg>',callback:()=>{}},photo:{icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">\x3c!--! Font Awesome Free 6.2.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2022 Fonticons, Inc. --\x3e<path d="M220.6 121.2L271.1 96 448 96v96H333.2c-21.9-15.1-48.5-24-77.2-24s-55.2 8.9-77.2 24H64V128H192c9.9 0 19.7-2.3 28.6-6.8zM0 128V416c0 35.3 28.7 64 64 64H448c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H271.1c-9.9 0-19.7 2.3-28.6 6.8L192 64H160V48c0-8.8-7.2-16-16-16H80c-8.8 0-16 7.2-16 16l0 16C28.7 64 0 92.7 0 128zM344 304c0 48.6-39.4 88-88 88s-88-39.4-88-88s39.4-88 88-88s88 39.4 88 88z"/></svg>',callback:()=>{o("照好了嘛，是不是很可爱呢？",6e3,9),Live2D.captureName="photo.png",Live2D.captureFrame=!0}},info:{icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">\x3c!--! Font Awesome Free 6.2.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2022 Fonticons, Inc. --\x3e<path d="M256 512c141.4 0 256-114.6 256-256S397.4 0 256 0S0 114.6 0 256S114.6 512 256 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-144c-17.7 0-32-14.3-32-32s14.3-32 32-32s32 14.3 32 32s-14.3 32-32 32z"/></svg>',callback:()=>{open("https://github.com/stevenjoezhang/live2d-widget")}},quit:{icon:'<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512">\x3c!--! Font Awesome Free 6.2.0 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License) Copyright 2022 Fonticons, Inc. --\x3e<path d="M310.6 150.6c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L160 210.7 54.6 105.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L114.7 256 9.4 361.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0L160 301.3 265.4 406.6c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L205.3 256 310.6 150.6z"/></svg>',callback:()=>{localStorage.setItem("waifu-display",Date.now()),o("愿你有一天能与重要的人重逢。",2e3,11),document.getElementById("waifu").style.bottom="-500px",setTimeout((()=>{document.getElementById("waifu").style.display="none",document.getElementById("waifu-toggle").classList.add("waifu-toggle-active")}),3e3)}}};function i(t){const i=new s(t);function c(t){let s,n=!1,i=t.message.default;window.addEventListener("mousemove",(()=>n=!0)),window.addEventListener("keydown",(()=>n=!0)),setInterval((()=>{n?(n=!1,clearInterval(s),s=null):s||(s=setInterval((()=>{o(i,6e3,9)}),2e4))}),1e3),o(function(e){if("/"===location.pathname)for(let{hour:t,text:o}of e){const e=new Date,s=t.split("-")[0],n=t.split("-")[1]||s;if(s<=e.getHours()&&e.getHours()<=n)return o}const t=`欢迎阅读<span>「${document.title.split(" - ")[0]}」</span>`;let o;if(""!==document.referrer){const e=new URL(document.referrer),s=e.hostname.split(".")[1],n={baidu:"百度",so:"360搜索",google:"谷歌搜索"};return location.hostname===e.hostname?t:(o=s in n?n[s]:e.hostname,`Hello！来自 <span>${o}</span> 的朋友<br>${t}`)}return t}(t.time),7e3,11),window.addEventListener("mouseover",(s=>{for(let{selector:n,text:i}of t.mouseover)if(s.target.matches(n))return i=e(i),i=i.replace("{text}",s.target.innerText),void o(i,4e3,8)})),window.addEventListener("click",(s=>{for(let{selector:n,text:i}of t.click)if(s.target.matches(n))return i=e(i),i=i.replace("{text}",s.target.innerText),void o(i,4e3,8)})),t.seasons.forEach((({date:t,text:o})=>{const s=new Date,n=t.split("-")[0],c=t.split("-")[1]||n;n.split("/")[0]<=s.getMonth()+1&&s.getMonth()+1<=c.split("/")[0]&&n.split("/")[1]<=s.getDate()&&s.getDate()<=c.split("/")[1]&&(o=(o=e(o)).replace("{year}",s.getFullYear()),i.push(o))}));const c=()=>{};console.log("%c",c),c.toString=()=>{o(t.message.console,6e3,9)},window.addEventListener("copy",(()=>{o(t.message.copy,6e3,9)})),window.addEventListener("visibilitychange",(()=>{document.hidden||o(t.message.visibilitychange,6e3,9)}))}localStorage.removeItem("waifu-display"),sessionStorage.removeItem("waifu-text"),document.body.insertAdjacentHTML("beforeend",'<div id="waifu">\n            <div id="waifu-tips"></div>\n            <canvas id="live2d" width="800" height="800"></canvas>\n            <div id="waifu-tool"></div>\n        </div>'),setTimeout((()=>{document.getElementById("waifu").style.bottom=0}),0),function(){n["switch-model"].callback=()=>i.loadOtherModel(),n["switch-texture"].callback=()=>i.loadRandModel(),Array.isArray(t.tools)||(t.tools=Object.keys(n));for(let e of t.tools)if(n[e]){const{icon:t,callback:o}=n[e];document.getElementById("waifu-tool").insertAdjacentHTML("beforeend",`<span id="waifu-tool-${e}">${t}</span>`),document.getElementById(`waifu-tool-${e}`).addEventListener("click",o)}}(),function(){let e=localStorage.getItem("modelId"),o=localStorage.getItem("modelTexturesId");null===e&&(e=1,o=53),i.loadModel(e,o),fetch(t.waifuPath).then((e=>e.json())).then(c)}()}window.initWidget=function(e,t){"string"==typeof e&&(e={waifuPath:e,apiPath:t}),document.body.insertAdjacentHTML("beforeend",'<div id="waifu-toggle">\n            <span>看板娘</span>\n        </div>');const o=document.getElementById("waifu-toggle");o.addEventListener("click",(()=>{o.classList.remove("waifu-toggle-active"),o.getAttribute("first-time")?(i(e),o.removeAttribute("first-time")):(localStorage.removeItem("waifu-display"),document.getElementById("waifu").style.display="",setTimeout((()=>{document.getElementById("waifu").style.bottom=0}),0))})),localStorage.getItem("waifu-display")&&Date.now()-localStorage.getItem("waifu-display")<=864e5?(o.setAttribute("first-time",!0),setTimeout((()=>{o.classList.add("waifu-toggle-active")}),0)):i(e)}}();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/live2d-widget/waifu-tips.json"/>
      <url>/live2d-widget/waifu-tips.json</url>
      
        <content type="html"><![CDATA[{"mouseover":[{"selector":"#live2d","text":["干嘛呢你，快把手拿开～～","鼠…鼠标放错地方了！","你要干嘛呀？","喵喵喵？","怕怕(ノ≧∇≦)ノ","非礼呀！救命！","这样的话，只能使用武力了！","我要生气了哦","不要动手动脚的！","真…真的是不知羞耻！","Hentai！"]},{"selector":"#waifu-tool-hitokoto","text":["猜猜我要说些什么？","我从青蛙王子那里听到了不少人生经验。"]},{"selector":"#waifu-tool-asteroids","text":["要不要来玩飞机大战？","这个按钮上写着「不要点击」。","怎么，你想来和我玩个游戏？","听说这样可以蹦迪！"]},{"selector":"#waifu-tool-switch-model","text":["你是不是不爱人家了呀，呜呜呜～","要见见我的姐姐嘛？","想要看我妹妹嘛？","要切换看板娘吗？"]},{"selector":"#waifu-tool-switch-texture","text":["喜欢换装 PLAY 吗？","这次要扮演什么呢？","变装！","让我们看看接下来会发生什么！"]},{"selector":"#waifu-tool-photo","text":["你要给我拍照呀？一二三～茄子～","要不，我们来合影吧！","保持微笑就好了～"]},{"selector":"#waifu-tool-info","text":["想要知道更多关于我的事么？","这里记录着我搬家的历史呢。","你想深入了解我什么呢？"]},{"selector":"#waifu-tool-quit","text":["到了要说再见的时候了吗？","呜呜 QAQ 后会有期……","不要抛弃我呀……","我们，还能再见面吗……","哼，你会后悔的！"]},{"selector":".menu-item-home a","text":["点击前往首页，想回到上一页可以使用浏览器的后退功能哦。","点它就可以回到首页啦！","回首页看看吧。"]},{"selector":".menu-item-about a","text":["你想知道我家主人是谁吗？","这里有一些关于我家主人的秘密哦，要不要看看呢？","发现主人出没地点！"]},{"selector":".menu-item-tags a","text":["点击就可以看文章的标签啦！","点击来查看所有标签哦。"]},{"selector":".menu-item-categories a","text":["文章都分类好啦～","点击来查看文章分类哦。"]},{"selector":".menu-item-archives a","text":["翻页比较麻烦吗，那就来看看文章归档吧。","文章目录都整理在这里啦！"]},{"selector":".menu-item-friends a","text":["这是我的朋友们哦ヾ(◍°∇°◍)ﾉﾞ","要去大佬们的家看看吗？","要去拜访一下我的朋友们吗？"]},{"selector":".menu-item-search a","text":["找不到想看的内容？搜索看看吧！","在找什么东西呢，需要帮忙吗？"]},{"selector":".menu-item a","text":["快看看这里都有什么呢？"]},{"selector":".site-author","text":["我家主人好看吗？","这是我家主人(*´∇｀*)"]},{"selector":".site-state","text":["这是文章的统计信息～","要不要点进去看看？"]},{"selector":".feed-link a","text":["这里可以使用 RSS 订阅呢！","利用 feed 订阅器，就能快速知道博客有没有更新了呢。"]},{"selector":".cc-opacity, .post-copyright-author","text":["要记得规范转载哦。","所有文章均采用 CC BY-NC-SA 4.0 许可协议～","转载前要先注意下文章的版权协议呢。"]},{"selector":".links-of-author","text":["这里是主人的常驻地址哦。","这里有主人的联系方式！"]},{"selector":".followme","text":["手机扫一下就能继续看，很方便呢～","扫一扫，打开新世界的大门！"]},{"selector":".fancybox img, img.medium-zoom-image","text":["点击图片可以放大呢！"]},{"selector":".copy-btn","text":["代码可以直接点击复制哟。"]},{"selector":".highlight .table-container, .gist","text":["GitHub！我是新手！","PHP 是最好的语言！"]},{"selector":"a[href^='mailto']","text":["邮件我会及时回复的！","点击就可以发送邮件啦～"]},{"selector":"a[href^='/tags/']","text":["要去看看 <span>{text}</span> 标签么？","点它可以查看此标签下的所有文章哟！"]},{"selector":"a[href^='/categories/']","text":["要去看看 <span>{text}</span> 分类么？","点它可以查看此分类下的所有文章哟！"]},{"selector":".post-title-link","text":["要看看 <span>{text}</span> 这篇文章吗？"]},{"selector":"a[rel='contents']","text":["点击来阅读全文哦。"]},{"selector":"a[itemprop='discussionUrl']","text":["要去看看评论吗？"]},{"selector":".beian a","text":["我也是有户口的人哦。","我的主人可是遵纪守法的好主人。"]},{"selector":".container a[href^='http'], .nav-link .nav-text","text":["要去看看 <span>{text}</span> 么？","去 <span>{text}</span> 逛逛吧。","到 <span>{text}</span> 看看吧。"]},{"selector":".back-to-top","text":["点它就可以回到顶部啦！","又回到最初的起点～","要回到开始的地方么？"]},{"selector":".reward-container","text":["我是不是棒棒哒～快给我点赞吧！","要打赏我嘛？好期待啊～","主人最近在吃土呢，很辛苦的样子，给他一些钱钱吧～"]},{"selector":"#wechat","text":["这是我的微信二维码～"]},{"selector":"#alipay","text":["这是我的支付宝哦！"]},{"selector":"#bitcoin","text":["这是我的比特币账号！"]},{"selector":"#needsharebutton-postbottom .btn","text":["好东西要让更多人知道才行哦。","觉得文章有帮助的话，可以分享给更多需要的朋友呢。"]},{"selector":".need-share-button_weibo","text":["微博？来分享一波喵！"]},{"selector":".need-share-button_wechat","text":["分享到微信吧！"]},{"selector":".need-share-button_douban","text":["分享到豆瓣好像也不错！"]},{"selector":".need-share-button_qqzone","text":["QQ 空间，一键转发，耶～"]},{"selector":".need-share-button_twitter","text":["Twitter？好像是不存在的东西？"]},{"selector":".need-share-button_facebook","text":["emmm…FB 好像也是不存在的东西？"]},{"selector":".post-nav-item a[rel='next']","text":["来看看下一篇文章吧。","点它可以看下一篇文章哦！","要翻到下一篇文章吗？"]},{"selector":".post-nav-item a[rel='prev']","text":["来看看上一篇文章吧。","点它可以看上一篇文章哦！","要翻到上一篇文章吗？"]},{"selector":".extend.next","text":["去下一页看看吧。","点它可以前进哦！","要翻到下一页吗？"]},{"selector":".extend.prev","text":["去上一页看看吧。","点它可以后退哦！","要翻到上一页吗？"]},{"selector":"input.vnick","text":["该怎么称呼你呢？","留下你的尊姓大名！"]},{"selector":".vmail","text":["留下你的邮箱，不然就是无头像人士了！","记得设置好 Gravatar 头像哦！","为了方便通知你最新消息，一定要留下邮箱！"]},{"selector":".vlink","text":["快快告诉我你的家在哪里，好让我去参观参观！"]},{"selector":".veditor","text":["想要去评论些什么吗？","要说点什么吗？","觉得博客不错？快来留言和主人交流吧！"]},{"selector":".vcontrol a","text":["你会不会熟练使用 Markdown 呀？","使用 Markdown 让评论更美观吧～"]},{"selector":".vemoji-btn","text":["要插入一个萌萌哒的表情吗？","要来一发表情吗？"]},{"selector":".vpreview-btn","text":["要预览一下你的发言吗？","快看看你的评论有多少负熵！"]},{"selector":".vsubmit","text":["评论没有审核，要对自己的发言负责哦～","要提交了吗，请耐心等待回复哦～"]},{"selector":".vcontent","text":["哇，快看看这个精彩评论！","如果有疑问，请尽快留言哦～"]}],"click":[{"selector":"#live2d","text":["是…是不小心碰到了吧…","萝莉控是什么呀？","你看到我的小熊了吗？","再摸的话我可要报警了！⌇●﹏●⌇","110 吗，这里有个变态一直在摸我(ó﹏ò｡)","不要摸我了，我会告诉老婆来打你的！","干嘛动我呀！小心我咬你！","别摸我，有什么好摸的！"]},{"selector":".veditor","text":["要吐槽些什么呢？","一定要认真填写喵～","有什么想说的吗？"]},{"selector":".vsubmit","text":["输入验证码就可以提交评论啦～"]}],"seasons":[{"date":"01/01","text":"<span>元旦</span>了呢，新的一年又开始了，今年是{year}年～"},{"date":"02/14","text":"又是一年<span>情人节</span>，{year}年找到对象了嘛～"},{"date":"03/08","text":"今天是<span>国际妇女节</span>！"},{"date":"03/12","text":"今天是<span>植树节</span>，要保护环境呀！"},{"date":"04/01","text":"悄悄告诉你一个秘密～<span>今天是愚人节，不要被骗了哦～</span>"},{"date":"05/01","text":"今天是<span>五一劳动节</span>，计划好假期去哪里了吗～"},{"date":"06/01","text":"<span>儿童节</span>了呢，快活的时光总是短暂，要是永远长不大该多好啊…"},{"date":"09/03","text":"<span>中国人民抗日战争胜利纪念日</span>，铭记历史、缅怀先烈、珍爱和平、开创未来。"},{"date":"09/10","text":"<span>教师节</span>，在学校要给老师问声好呀～"},{"date":"10/01","text":"<span>国庆节</span>到了，为祖国母亲庆生！"},{"date":"11/05-11/12","text":"今年的<span>双十一</span>是和谁一起过的呢～"},{"date":"12/20-12/31","text":"这几天是<span>圣诞节</span>，主人肯定又去剁手买买买了～"}],"time":[{"hour":"6-7","text":"早上好！一日之计在于晨，美好的一天就要开始了～"},{"hour":"8-11","text":"上午好！工作顺利嘛，不要久坐，多起来走动走动哦！"},{"hour":"12-13","text":"中午了，工作了一个上午，现在是午餐时间！"},{"hour":"14-17","text":"午后很容易犯困呢，今天的运动目标完成了吗？"},{"hour":"18-19","text":"傍晚了！窗外夕阳的景色很美丽呢，最美不过夕阳红～"},{"hour":"20-21","text":"晚上好，今天过得怎么样？"},{"hour":"22-23","text":["已经这么晚了呀，早点休息吧，晚安～","深夜时要爱护眼睛呀！"]},{"hour":"0-5","text":"你是夜猫子呀？这么晚还不睡觉，明天起的来嘛？"}],"message":{"default":["好久不见，日子过得好快呢……","大坏蛋！你都多久没理人家了呀，嘤嘤嘤～","嗨～快来逗我玩吧！","拿小拳拳锤你胸口！","记得把小家加入收藏夹哦！"],"console":"哈哈，你打开了控制台，是想要看看我的小秘密吗？","copy":"你都复制了些什么呀，转载要记得加上出处哦！","visibilitychange":"哇，你终于回来了～"}}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/live2d-widget/waifu.css"/>
      <url>/live2d-widget/waifu.css</url>
      
        <content type="html"><![CDATA[#waifu-toggle {background-color: #fa0;border-radius: 5px;bottom: 66px;color: #fff;cursor: pointer;font-size: 12px;left: 0;margin-left: -100px;padding: 5px 2px 5px 5px;position: fixed;transition: margin-left 1s;width: 60px;writing-mode: vertical-rl;}#waifu-toggle.waifu-toggle-active {margin-left: -50px;}#waifu-toggle.waifu-toggle-active:hover {margin-left: -30px;}#waifu {bottom: -1000px;left: 0;line-height: 0;margin-bottom: -10px;position: fixed;transform: translateY(3px);transition: transform .3s ease-in-out, bottom 3s ease-in-out;z-index: 1;}#waifu:hover {transform: translateY(0);}#waifu-tips {animation: shake 50s ease-in-out 5s infinite;background-color: rgba(236, 217, 188, .5);border: 1px solid rgba(224, 186, 140, .62);border-radius: 12px;box-shadow: 0 3px 15px 2px rgba(191, 158, 118, .2);font-size: 14px;line-height: 24px;margin: -30px 20px;min-height: 70px;opacity: 0;overflow: hidden;padding: 5px 10px;position: absolute;text-overflow: ellipsis;transition: opacity 1s;width: 250px;word-break: break-all;}#waifu-tips.waifu-tips-active {opacity: 1;transition: opacity .2s;}#waifu-tips span {color: #0099cc;}#live2d {cursor: grab;height: 300px;position: relative;width: 300px;}#live2d:active {cursor: grabbing;}#waifu-tool {color: #aaa;opacity: 0;position: absolute;right: -10px;top: 70px;transition: opacity 1s;}#waifu:hover #waifu-tool {opacity: 1;}#waifu-tool span {display: block;height: 30px;text-align: center;}#waifu-tool svg {fill: #7b8c9d;cursor: pointer;height: 25px;transition: fill .3s;}#waifu-tool svg:hover {fill: #0684bd; /* #34495e */}@keyframes shake {2% {transform: translate(.5px, -1.5px) rotate(-.5deg);}4% {transform: translate(.5px, 1.5px) rotate(1.5deg);}6% {transform: translate(1.5px, 1.5px) rotate(1.5deg);}8% {transform: translate(2.5px, 1.5px) rotate(.5deg);}10% {transform: translate(.5px, 2.5px) rotate(.5deg);}12% {transform: translate(1.5px, 1.5px) rotate(.5deg);}14% {transform: translate(.5px, .5px) rotate(.5deg);}16% {transform: translate(-1.5px, -.5px) rotate(1.5deg);}18% {transform: translate(.5px, .5px) rotate(1.5deg);}20% {transform: translate(2.5px, 2.5px) rotate(1.5deg);}22% {transform: translate(.5px, -1.5px) rotate(1.5deg);}24% {transform: translate(-1.5px, 1.5px) rotate(-.5deg);}26% {transform: translate(1.5px, .5px) rotate(1.5deg);}28% {transform: translate(-.5px, -.5px) rotate(-.5deg);}30% {transform: translate(1.5px, -.5px) rotate(-.5deg);}32% {transform: translate(2.5px, -1.5px) rotate(1.5deg);}34% {transform: translate(2.5px, 2.5px) rotate(-.5deg);}36% {transform: translate(.5px, -1.5px) rotate(.5deg);}38% {transform: translate(2.5px, -.5px) rotate(-.5deg);}40% {transform: translate(-.5px, 2.5px) rotate(.5deg);}42% {transform: translate(-1.5px, 2.5px) rotate(.5deg);}44% {transform: translate(-1.5px, 1.5px) rotate(.5deg);}46% {transform: translate(1.5px, -.5px) rotate(-.5deg);}48% {transform: translate(2.5px, -.5px) rotate(.5deg);}50% {transform: translate(-1.5px, 1.5px) rotate(.5deg);}52% {transform: translate(-.5px, 1.5px) rotate(.5deg);}54% {transform: translate(-1.5px, 1.5px) rotate(.5deg);}56% {transform: translate(.5px, 2.5px) rotate(1.5deg);}58% {transform: translate(2.5px, 2.5px) rotate(.5deg);}60% {transform: translate(2.5px, -1.5px) rotate(1.5deg);}62% {transform: translate(-1.5px, .5px) rotate(1.5deg);}64% {transform: translate(-1.5px, 1.5px) rotate(1.5deg);}66% {transform: translate(.5px, 2.5px) rotate(1.5deg);}68% {transform: translate(2.5px, -1.5px) rotate(1.5deg);}70% {transform: translate(2.5px, 2.5px) rotate(.5deg);}72% {transform: translate(-.5px, -1.5px) rotate(1.5deg);}74% {transform: translate(-1.5px, 2.5px) rotate(1.5deg);}76% {transform: translate(-1.5px, 2.5px) rotate(1.5deg);}78% {transform: translate(-1.5px, 2.5px) rotate(.5deg);}80% {transform: translate(-1.5px, .5px) rotate(-.5deg);}82% {transform: translate(-1.5px, .5px) rotate(-.5deg);}84% {transform: translate(-.5px, .5px) rotate(1.5deg);}86% {transform: translate(2.5px, 1.5px) rotate(.5deg);}88% {transform: translate(-1.5px, .5px) rotate(1.5deg);}90% {transform: translate(-1.5px, -.5px) rotate(-.5deg);}92% {transform: translate(-1.5px, -1.5px) rotate(1.5deg);}94% {transform: translate(.5px, .5px) rotate(-.5deg);}96% {transform: translate(2.5px, -.5px) rotate(-.5deg);}98% {transform: translate(-1.5px, -1.5px) rotate(-.5deg);}0%, 100% {transform: translate(0, 0) rotate(0);}}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom/twikoo_beautify.css"/>
      <url>/css/custom/twikoo_beautify.css</url>
      
        <content type="html"><![CDATA[/* 自定义twikoo评论输入框高度 */.tk-input[data-v-619b4c52] .el-textarea__inner {    height: 130px !important;}/* 输入评论时自动隐藏输入框背景图片 */.tk-input[data-v-619b4c52] .el-textarea__inner:focus {    background-image: none !important;}/* 调整楼中楼样式 ，整体左移，贴合气泡化效果 */.tk-replies {    left: -70px;    width: calc(100% + 70px);}/* 头像宽度调整 rem单位与全局字体大小挂钩，需配合自己情况调整大小以保证头像显示完整*/.tk-replies .tk-avatar {    width: 2.5rem !important;    height: 2.5rem !important;}.tk-replies .tk-avatar img {    width: 2.5rem !important;    height: 2.5rem !important;}/* 回复框左移，避免窄屏时出框 */.tk-comments-container .tk-submit {    position: relative;    left: -70px;}/* 评论块气泡化修改 */.tk-content {    background: #00a6ff; /*默认模式访客气泡配色*/    padding: 10px;    color: #fff; /*默认模式访客气泡字体配色*/    border-radius: 10px;    font-size: 16px !important;    width: fit-content;    max-width: 100%;    position: relative !important;    overflow: visible !important;    max-height: none !important;}/* 修复图片出框 */.tk-content img {    max-width: 100% !important;}/* 修复过长文本出框 */.tk-content pre {    white-space: pre-wrap;    word-wrap: break-word;}.tk-content a {    color: #eeecaa; /*默认模式超链接配色*/}.tk-content::before {    content: '';    width: 0;    height: 0;    position: absolute;    top: 20px;    left: -13px;    border-top: 2px solid transparent;    border-bottom: 20px solid transparent;    border-right: 15px solid #00a6ff; /*默认模式访客气泡小三角配色*/    border-left: 0px solid transparent;}.tk-master .tk-content {    background: #ff8080; /*默认模式博主气泡配色*/    color: #fff; /*默认模式博主气泡字体配色*/    width: fit-content;    max-width: 100%;}.tk-master .tk-content a {    color: #eeecaa;}.tk-master .tk-content::before {    content: '';    width: 0;    height: 0;    position: absolute;    top: 20px;    left: -13px;    border-top: 2px solid transparent;    border-bottom: 20px solid transparent;    border-right: 15px solid #ff8080; /*默认模式博主气泡小三角配色*/    border-left: 0px solid transparent;}.tk-row[data-v-d82ce9a0] {    max-width: 100%;    width: fit-content;}.tk-avatar {    border-radius: 50%;    margin-top: 10px;}/* 夜间模式配色，具体比照上方默认模式class */[data-theme="dark"] .tk-content {    background: #000;    color: #fff;}[data-theme="dark"] .tk-content a {    color: #dfa036;}[data-theme="dark"] .tk-content::before {    border-right: 15px solid #000;}[data-theme="dark"] .tk-master .tk-content {    background: #000;    color: #fff;}[data-theme="dark"] .tk-master .tk-content a {    color: #dfa036;}[data-theme="dark"] .tk-master .tk-content::before {    border-top: 2px solid transparent;    border-bottom: 20px solid transparent;    border-right: 15px solid #000;    border-left: 0px solid transparent;}/* 自适应内容 */@media screen and (min-width: 1024px) {    /* 设置宽度上限，避免挤压博主头像 */    .tk-content {        max-width: 75%;        width: fit-content;    }    .tk-master .tk-content {        width: 75%;    }    .tk-master .tk-content::before {        left: 100%;        border-left: 15px solid #ff8080;        border-right: 0px solid transparent;    }    .tk-master .tk-avatar {        position: relative;        left: calc(75% + 70px);    }    .tk-master .tk-row[data-v-d82ce9a0] {        position: relative;        top: 0px;        left: calc(75% - 230px);    }    [data-theme="dark"] .tk-master .tk-content::before {        border-left: 15px solid #000;        border-right: 0px solid transparent;    }}/* 设备名称常态隐藏，悬停评论时显示 */.tk-extras {    opacity: 0;    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";    filter: alpha(opacity=0);}.tk-content:hover + .tk-extras {    -webkit-animation: tk-extras-fadeIn 0.5s linear;    -moz-animation: tk-extras-fadeIn 0.5s linear;    -o-animation: tk-extras-fadeIn 0.5s linear;    -ms-animation: tk-extras-fadeIn 0.5s linear;    animation: tk-extras-fadeIn 0.5s linear;    -webkit-animation-fill-mode: forwards;    -moz-animation-fill-mode: forwards;    -o-animation-fill-mode: forwards;    -ms-animation-fill-mode: forwards;    animation-fill-mode: forwards;}@-moz-keyframes tk-extras-fadeIn {    from {        opacity: 0;        -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";        filter: alpha(opacity=0);    }    to {        opacity: 1;        -ms-filter: none;        filter: none;    }}@-webkit-keyframes tk-extras-fadeIn {    from {        opacity: 0;        -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";        filter: alpha(opacity=0);    }    to {        opacity: 1;        -ms-filter: none;        filter: none;    }}@-o-keyframes tk-extras-fadeIn {    from {        opacity: 0;        -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";        filter: alpha(opacity=0);    }    to {        opacity: 1;        -ms-filter: none;        filter: none;    }}@keyframes tk-extras-fadeIn {    from {        opacity: 0;        -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";        filter: alpha(opacity=0);    }    to {        opacity: 1;        -ms-filter: none;        filter: none;    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/live2d-widget/demo/demo.html"/>
      <url>/live2d-widget/demo/demo.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html><head><meta charset="UTF-8"><title>Live2D 看板娘 / Demo</title><style>#github svg {transition: all 1s;fill: #222;color: #fff;position: absolute;top: 0;right: 0;border: 0;width: 80px;height: 80px;}#github:hover svg {width: 160px;height: 160px;}</style></head><body><a id="github" href="https://github.com/stevenjoezhang/live2d-widget" target="_blank" title="Visit the open-source code on GitHub!"><svg viewBox="0 0 250 250" aria-hidden="true"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"></path></svg></a><script src="../autoload.js"></script></body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/live2d-widget/demo/login.html"/>
      <url>/live2d-widget/demo/login.html</url>
      
        <content type="html"><![CDATA[<!DOCTYPE html><html><head><meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"><title>看板娘登陆平台</title><link rel="stylesheet" href="https://fastly.jsdelivr.net/npm/bootstrap@5/dist/css/bootstrap.min.css"><link rel="stylesheet" href="https://fastly.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/css/all.min.css"><script src="../live2d.min.js"></script><style>html, body {height: 100%;}body {display: flex;align-items: center;justify-content: center;padding-top: 40px;padding-bottom: 40px;background-color: #f5f5f5;}.form-signin {width: 100%;max-width: 330px;padding: 15px;margin: 0 auto;}.form-signin .checkbox {font-weight: 400;}.form-signin .form-control {position: relative;box-sizing: border-box;height: auto;padding: 10px;font-size: 16px;}.form-signin .form-control:focus {z-index: 2;}.form-signin input[type=text] {margin-bottom: -1px;border-bottom-right-radius: 0;border-bottom-left-radius: 0;}.form-signin input[type=password] {margin-bottom: 10px;border-top-left-radius: 0;border-top-right-radius: 0;}#stage {position: relative;}#stage img {width: 100%;margin-bottom: 20px;border-radius: 20px;}#stage button {position: absolute;padding: 0;}#inner {position: relative;background-color: #999;clip-path: circle(120px at center);}#cover {position: absolute;background-color: #CB3837;width: 100%;height: 100%;bottom: 10%;transition: all 1s;box-shadow: 0 0 0 5px rgba(0, 0, 0, .1);}#text {position: absolute;bottom: 30%;font-size: 2em;left: 50%;transform: translateX(-50%);opacity: 0.4;font-weight: bold;}#detail {position: absolute;background: rgba(255, 255, 255, .1);width: 100%;height: 10px;bottom: 0;}#handle {position: absolute;background: #ccc;bottom: -2px;box-shadow: 0 1px 0 1px rgba(0, 0, 0, .1);height: 8px;left: 50%;margin-left: -15px;width: 30px;cursor: pointer;}#info {left: 40px;bottom: 20px;}#refresh {right: 40px;bottom: 20px;}#live2d {cursor: grab;height: 300px;width: 300px;}#live2d:active {cursor: grabbing;}</style></head><body class="text-center"><form class="form-signin" action="login.php" method="post"><div id="stage"><div id="inner"><div id="cover"><div id="text"><span style="color: cyan;">MIMI</span><span style="color: white;">POWERED</span></div><div id="detail"></div><div id="handle"></div></div><canvas class="mb-4" id="live2d" width="800" height="800"></canvas></div><button class="btn btn-link" id="info"><i class="fa fa-lg fa-info"></i></button><button class="btn btn-link" id="refresh"><i class="fa fa-lg fa-sync-alt"></i></button></div><h1 class="h3 mb-3 fw-normal">看板娘登陆平台</h1><label for="room" class="sr-only">用户名</label><input type="text" name="room" class="form-control" placeholder="用户名" required autofocus><label for="pass" class="sr-only">密码</label><input type="password" name="pass" class="form-control" placeholder="密码" required><div class="checkbox mb-4"><label><input type="checkbox" value="remember-me"> 记住我</label></div><div class="d-grid"><button class="btn btn-lg btn-primary" type="submit">登录</button></div><p class="mt-5 mb-3 text-muted">Copyleft &copy; Mimi 2019</p></form><script>/* * _(:з」∠)_ * Created by Shuqiao Zhang in 2019. * https://zhangshuqiao.org *//* * This program is free software: you can redistribute it and/or modify *  it under the terms of the GNU General Public License as published by *  the Free Software Foundation, either version 3 of the License, or *  (at your option) any later version. * * This program is distributed in the hope that it will be useful, *  but WITHOUT ANY WARRANTY; without even the implied warranty of *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the *  GNU General Public License for more details. */window.addEventListener("load", () => {"use strict";if (!CSS.supports("clip-path", "circle(120px at center)")) {document.getElementById("stage").innerHTML = '<img src="../assets/screenshot-1.png">';return;}const apiPath = "https://live2d.fghrsh.net/api";let state = 0, loading = false,modelId = localStorage.getItem("modelId"),modelTexturesId = localStorage.getItem("modelTexturesId");if (modelId === null) {modelId = 1;modelTexturesId = 53;}loadModel(modelId, modelTexturesId);function loadModel(modelId, modelTexturesId) {localStorage.setItem("modelId", modelId);if (modelTexturesId === undefined) modelTexturesId = 0;localStorage.setItem("modelTexturesId", modelTexturesId);loadlive2d("live2d", `${apiPath}/get/?id=${modelId}-${modelTexturesId}`, null);console.log("live2d", `模型 ${modelId}-${modelTexturesId} 加载完成`);setTimeout(() => {coverPosition("80%");state = 2;}, 2000);}function loadRandModel() {const modelId = localStorage.getItem("modelId"),modelTexturesId = localStorage.getItem("modelTexturesId");fetch(`${apiPath}/rand_textures/?id=${modelId}-${modelTexturesId}`).then(response => response.json()).then(result => {loadModel(modelId, result.textures.id);setTimeout(() => {state = 2;coverPosition("80%");loading = false;}, 1000);});}function loadOtherModel() {const modelId = localStorage.getItem("modelId");fetch(`${apiPath}/switch/?id=${modelId}`).then(response => response.json()).then(result => {loadModel(result.model.id);});}function coverPosition(pos) {document.getElementById("cover").style.bottom = pos;}document.getElementById("info").addEventListener("click", () => {fetch("https://v1.hitokoto.cn").then(response => response.json()).then(result => {alert("「" + result.hitokoto + "」——" + result.from);});});document.getElementById("refresh").addEventListener("click", () => {if (loading) return;state = 0;coverPosition("10%");loading = true;setTimeout(loadRandModel, 1000);});document.getElementById("handle").addEventListener("click", () => {if (state === 1) {state = 2;coverPosition("80%");}else if (state === 2) {state = 1;coverPosition("20%");}});document.querySelector("input[type=password]").addEventListener("focus", () => {if (state === 2) {state = 1;coverPosition("20%");}});document.querySelector("input[type=password]").addEventListener("blur", () => {if (state === 1) {state = 2;coverPosition("80%");}});});</script></body></html>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/live2d-widget/src/index.js"/>
      <url>/live2d-widget/src/index.js</url>
      
        <content type="html"><![CDATA[import Model from "./model.js";import showMessage from "./message.js";import randomSelection from "./utils.js";import tools from "./tools.js";function loadWidget(config) {    const model = new Model(config);    localStorage.removeItem("waifu-display");    sessionStorage.removeItem("waifu-text");    document.body.insertAdjacentHTML("beforeend", `<div id="waifu">            <div id="waifu-tips"></div>            <canvas id="live2d" width="800" height="800"></canvas>            <div id="waifu-tool"></div>        </div>`);    // https://stackoverflow.com/questions/24148403/trigger-css-transition-on-appended-element    setTimeout(() => {        document.getElementById("waifu").style.bottom = 0;    }, 0);    (function registerTools() {        tools["switch-model"].callback = () => model.loadOtherModel();        tools["switch-texture"].callback = () => model.loadRandModel();        if (!Array.isArray(config.tools)) {            config.tools = Object.keys(tools);        }        for (let tool of config.tools) {            if (tools[tool]) {                const { icon, callback } = tools[tool];                document.getElementById("waifu-tool").insertAdjacentHTML("beforeend", `<span id="waifu-tool-${tool}">${icon}</span>`);                document.getElementById(`waifu-tool-${tool}`).addEventListener("click", callback);            }        }    })();    function welcomeMessage(time) {        if (location.pathname === "/") { // 如果是主页            for (let { hour, text } of time) {                const now = new Date(),                    after = hour.split("-")[0],                    before = hour.split("-")[1] || after;                if (after <= now.getHours() && now.getHours() <= before) {                    return text;                }            }        }        const text = `欢迎阅读<span>「${document.title.split(" - ")[0]}」</span>`;        let from;        if (document.referrer !== "") {            const referrer = new URL(document.referrer),                domain = referrer.hostname.split(".")[1];            const domains = {                "baidu": "百度",                "so": "360搜索",                "google": "谷歌搜索"            };            if (location.hostname === referrer.hostname) return text;            if (domain in domains) from = domains[domain];            else from = referrer.hostname;            return `Hello！来自 <span>${from}</span> 的朋友<br>${text}`;        }        return text;    }    function registerEventListener(result) {        // 检测用户活动状态，并在空闲时显示消息        let userAction = false,            userActionTimer,            messageArray = result.message.default,            lastHoverElement;        window.addEventListener("mousemove", () => userAction = true);        window.addEventListener("keydown", () => userAction = true);        setInterval(() => {            if (userAction) {                userAction = false;                clearInterval(userActionTimer);                userActionTimer = null;            } else if (!userActionTimer) {                userActionTimer = setInterval(() => {                    showMessage(messageArray, 6000, 9);                }, 20000);            }        }, 1000);        showMessage(welcomeMessage(result.time), 7000, 11);        window.addEventListener("mouseover", event => {            for (let { selector, text } of result.mouseover) {                if (!event.target.closest(selector)) continue;                if (lastHoverElement === selector) return;                lastHoverElement = selector;                text = randomSelection(text);                text = text.replace("{text}", event.target.innerText);                showMessage(text, 4000, 8);                return;            }        });        window.addEventListener("click", event => {            for (let { selector, text } of result.click) {                if (!event.target.closest(selector)) continue;                text = randomSelection(text);                text = text.replace("{text}", event.target.innerText);                showMessage(text, 4000, 8);                return;            }        });        result.seasons.forEach(({ date, text }) => {            const now = new Date(),                after = date.split("-")[0],                before = date.split("-")[1] || after;            if ((after.split("/")[0] <= now.getMonth() + 1 && now.getMonth() + 1 <= before.split("/")[0]) && (after.split("/")[1] <= now.getDate() && now.getDate() <= before.split("/")[1])) {                text = randomSelection(text);                text = text.replace("{year}", now.getFullYear());                messageArray.push(text);            }        });        const devtools = () => { };        console.log("%c", devtools);        devtools.toString = () => {            showMessage(result.message.console, 6000, 9);        };        window.addEventListener("copy", () => {            showMessage(result.message.copy, 6000, 9);        });        window.addEventListener("visibilitychange", () => {            if (!document.hidden) showMessage(result.message.visibilitychange, 6000, 9);        });    }    (function initModel() {        let modelId = localStorage.getItem("modelId"),            modelTexturesId = localStorage.getItem("modelTexturesId");        if (modelId === null) {            // 首次访问加载 指定模型 的 指定材质            modelId = 1; // 模型 ID            modelTexturesId = 53; // 材质 ID        }        model.loadModel(modelId, modelTexturesId);        fetch(config.waifuPath)            .then(response => response.json())            .then(registerEventListener);    })();}function initWidget(config, apiPath) {    if (typeof config === "string") {        config = {            waifuPath: config,            apiPath        };    }    document.body.insertAdjacentHTML("beforeend", `<div id="waifu-toggle">            <span>看板娘</span>        </div>`);    const toggle = document.getElementById("waifu-toggle");    toggle.addEventListener("click", () => {        toggle.classList.remove("waifu-toggle-active");        if (toggle.getAttribute("first-time")) {            loadWidget(config);            toggle.removeAttribute("first-time");        } else {            localStorage.removeItem("waifu-display");            document.getElementById("waifu").style.display = "";            setTimeout(() => {                document.getElementById("waifu").style.bottom = 0;            }, 0);        }    });    if (localStorage.getItem("waifu-display") && Date.now() - localStorage.getItem("waifu-display") <= 86400000) {        toggle.setAttribute("first-time", true);        setTimeout(() => {            toggle.classList.add("waifu-toggle-active");        }, 0);    } else {        loadWidget(config);    }}export default initWidget;]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/live2d-widget/src/message.js"/>
      <url>/live2d-widget/src/message.js</url>
      
        <content type="html"><![CDATA[import randomSelection from "./utils.js";let messageTimer;function showMessage(text, timeout, priority) {    if (!text || (sessionStorage.getItem("waifu-text") && sessionStorage.getItem("waifu-text") > priority)) return;    if (messageTimer) {        clearTimeout(messageTimer);        messageTimer = null;    }    text = randomSelection(text);    sessionStorage.setItem("waifu-text", priority);    const tips = document.getElementById("waifu-tips");    tips.innerHTML = text;    tips.classList.add("waifu-tips-active");    messageTimer = setTimeout(() => {        sessionStorage.removeItem("waifu-text");        tips.classList.remove("waifu-tips-active");    }, timeout);}export default showMessage;]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/live2d-widget/src/tools.js"/>
      <url>/live2d-widget/src/tools.js</url>
      
        <content type="html"><![CDATA[import fa_comment from "@fortawesome/fontawesome-free/svgs/solid/comment.svg";import fa_paper_plane from "@fortawesome/fontawesome-free/svgs/solid/paper-plane.svg";import fa_user_circle from "@fortawesome/fontawesome-free/svgs/solid/circle-user.svg";import fa_street_view from "@fortawesome/fontawesome-free/svgs/solid/street-view.svg";import fa_camera_retro from "@fortawesome/fontawesome-free/svgs/solid/camera-retro.svg";import fa_info_circle from "@fortawesome/fontawesome-free/svgs/solid/circle-info.svg";import fa_xmark from "@fortawesome/fontawesome-free/svgs/solid/xmark.svg";import showMessage from "./message.js";function showHitokoto() {    // 增加 hitokoto.cn 的 API    fetch("https://v1.hitokoto.cn")        .then(response => response.json())        .then(result => {            const text = `这句一言来自 <span>「${result.from}」</span>，是 <span>${result.creator}</span> 在 hitokoto.cn 投稿的。`;            showMessage(result.hitokoto, 6000, 9);            setTimeout(() => {                showMessage(text, 4000, 9);            }, 6000);        });}const tools = {    "hitokoto": {        icon: fa_comment,        callback: showHitokoto    },    "asteroids": {        icon: fa_paper_plane,        callback: () => {            if (window.Asteroids) {                if (!window.ASTEROIDSPLAYERS) window.ASTEROIDSPLAYERS = [];                window.ASTEROIDSPLAYERS.push(new Asteroids());            } else {                const script = document.createElement("script");                script.src = "https://fastly.jsdelivr.net/gh/stevenjoezhang/asteroids/asteroids.js";                document.head.appendChild(script);            }        }    },    "switch-model": {        icon: fa_user_circle,        callback: () => {}    },    "switch-texture": {        icon: fa_street_view,        callback: () => {}    },    "photo": {        icon: fa_camera_retro,        callback: () => {            showMessage("照好了嘛，是不是很可爱呢？", 6000, 9);            Live2D.captureName = "photo.png";            Live2D.captureFrame = true;        }    },    "info": {        icon: fa_info_circle,        callback: () => {            open("https://github.com/stevenjoezhang/live2d-widget");        }    },    "quit": {        icon: fa_xmark,        callback: () => {            localStorage.setItem("waifu-display", Date.now());            showMessage("愿你有一天能与重要的人重逢。", 2000, 11);            document.getElementById("waifu").style.bottom = "-500px";            setTimeout(() => {                document.getElementById("waifu").style.display = "none";                document.getElementById("waifu-toggle").classList.add("waifu-toggle-active");            }, 3000);        }    }};export default tools;]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/live2d-widget/src/model.js"/>
      <url>/live2d-widget/src/model.js</url>
      
        <content type="html"><![CDATA[import showMessage from "./message.js";import randomSelection from "./utils.js";class Model {    constructor(config) {        let { apiPath, cdnPath } = config;        let useCDN = false;        if (typeof cdnPath === "string") {            useCDN = true;            if (!cdnPath.endsWith("/")) cdnPath += "/";        } else if (typeof apiPath === "string") {            if (!apiPath.endsWith("/")) apiPath += "/";        } else {            throw "Invalid initWidget argument!";        }        this.useCDN = useCDN;        this.apiPath = apiPath;        this.cdnPath = cdnPath;    }    async loadModelList() {        const response = await fetch(`${this.cdnPath}model_list.json`);        this.modelList = await response.json();    }    async loadModel(modelId, modelTexturesId, message) {        localStorage.setItem("modelId", modelId);        localStorage.setItem("modelTexturesId", modelTexturesId);        showMessage(message, 4000, 10);        if (this.useCDN) {            if (!this.modelList) await this.loadModelList();            const target = randomSelection(this.modelList.models[modelId]);            loadlive2d("live2d", `${this.cdnPath}model/${target}/index.json`);        } else {            loadlive2d("live2d", `${this.apiPath}get/?id=${modelId}-${modelTexturesId}`);            console.log(`Live2D 模型 ${modelId}-${modelTexturesId} 加载完成`);        }    }    async loadRandModel() {        const modelId = localStorage.getItem("modelId"),            modelTexturesId = localStorage.getItem("modelTexturesId");        if (this.useCDN) {            if (!this.modelList) await this.loadModelList();            const target = randomSelection(this.modelList.models[modelId]);            loadlive2d("live2d", `${this.cdnPath}model/${target}/index.json`);            showMessage("我的新衣服好看嘛？", 4000, 10);        } else {            // 可选 "rand"(随机), "switch"(顺序)            fetch(`${this.apiPath}rand_textures/?id=${modelId}-${modelTexturesId}`)                .then(response => response.json())                .then(result => {                    if (result.textures.id === 1 && (modelTexturesId === 1 || modelTexturesId === 0)) showMessage("我还没有其他衣服呢！", 4000, 10);                    else this.loadModel(modelId, result.textures.id, "我的新衣服好看嘛？");                });        }    }    async loadOtherModel() {        let modelId = localStorage.getItem("modelId");        if (this.useCDN) {            if (!this.modelList) await this.loadModelList();            const index = (++modelId >= this.modelList.models.length) ? 0 : modelId;            this.loadModel(index, 0, this.modelList.messages[index]);        } else {            fetch(`${this.apiPath}switch/?id=${modelId}`)                .then(response => response.json())                .then(result => {                    this.loadModel(result.model.id, 0, result.model.message);                });        }    }}export default Model;]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/live2d-widget/src/utils.js"/>
      <url>/live2d-widget/src/utils.js</url>
      
        <content type="html"><![CDATA[function randomSelection(obj) {    return Array.isArray(obj) ? obj[Math.floor(Math.random() * obj.length)] : obj;}export default randomSelection;]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/live2d-widget/src/waifu-tips.js"/>
      <url>/live2d-widget/src/waifu-tips.js</url>
      
        <content type="html"><![CDATA[import initWidget from "./index.js";window.initWidget = initWidget;]]></content>
      
    </entry>
    
    
  
</search>
